<?xml version="1.0"?>

<section xml:id="ch-practical-string-api">
  <title>More String Methods &amp; StringBuilder</title>

  <!-- =====================================================
       1. INTRODUCTION & MOTIVATION
       ===================================================== -->
  <subsection xml:id="sec-practical-string-intro">
    <title>Introduction &amp; Motivation</title>
    <p>Before we dive in, let's briefly discuss <term>exceptions</term>. 
    In Java, when something goes wrong during program execution (like trying to use a value that doesn't exist), the program can throw an <term>exception</term> - a special signal indicating that an error occurred. For now, just know that exceptions can crash your program if not handled properly. We'll learn much more about exceptions and how to handle them in later chapters.</p>
    <p>In earlier sections, we examined Java <c>String</c> fundamentals in depth—covering aspects like immutability, indexing, searching, comparing, and creating custom methods such as <c>substring</c>. While these core concepts are pivotal, you will frequently rely on Java's built-in <c>String</c> API for everyday tasks including <term>cleaning</term>, <term>splitting</term>, <term>transforming</term>, or <term>building</term> strings.</p>
    <p>This section offers a <term>toolbox</term> of essential, frequently used methods, supported by runnable code examples, cautionary notes, and real-world usage scenarios. Rather than methodically applying the entire Design Recipe, we'll emphasize <em>hands-on demonstrations</em> you can adopt immediately to write clearer, more efficient programs.</p>
    <p>By the end of this section, you will be able to:</p>
    <objectives>
      <ul>
        <li><term>Recognize</term> the right contexts to use built-in <c>String</c> methods such as <c>trim</c>, <c>replace</c>, and <c>split</c>.</li>
        <li><term>Avoid</term> typical mistakes involving locale configurations, regex symbols, and the cost of immutability.</li>
        <li><term>Use</term> <c>StringBuilder</c> effectively for concatenation in loops or large-scale text generation.</li>
        <li><term>Leverage</term> <c>String.format</c> and <c>printf</c> for more flexible templated output.</li>
      </ul>
    </objectives>
  </subsection>

  <!-- =====================================================
       2. TRIMMING & CLEANING INPUT
       ===================================================== -->
  <subsection xml:id="sec-trimming-cleaning">
    <title>Trimming &amp; Cleaning Input</title>
    <p>In real applications, strings often come from external sources (user input, files, network data) and may include leading/trailing whitespace or unexpected spacing. Java provides <c>trim()</c> (and in newer versions, <c>strip()</c>) to remove whitespace from both ends of a string, ensuring cleaner inputs.</p>
    <program language="java"  interactive="activecode">
      <input>
public class TrimDemo {
    public static void main(String[] args) {
        String raw = "   Hello, world!   ";
        System.out.println("Original length: " + raw.length());

        String trimmed = raw.trim();
        System.out.println("Trimmed length: " + trimmed.length());
        System.out.println("Trimmed text: [" + trimmed + "]");

        // For Java 11+, strip() uses Unicode-aware rules:
        // (But if you only have an older version, trim() suffices for typical usage)
        String stripped = raw.strip();
        System.out.println("Stripped length: " + stripped.length());
        System.out.println("Stripped text: [" + stripped + "]");
    }
}
      </input>
    </program>
    <p>Running this code shows how <c>trim()</c> or <c>strip()</c> removes leading and trailing whitespace, producing a more uniform format from user-typed input.</p>
    <p><term>Common Pitfalls:</term></p>
    <ul>
      <li><em><b>Null Values</b>:</em> If you try to call <c>trim()</c> on a string that doesn't exist (has value <c>null</c>), your program will crash with an exception. Always make sure your string exists before using it!</li>
      <li><em><b>Unicode Whitespace</b>:</em> <c>trim()</c> only removes characters &lt;= '\u0020', whereas <c>strip()</c> (Java 11+) handles more Unicode whitespace. In most English-oriented code, <c>trim()</c> is fine, but be mindful of differences if you need internationalization.</li>
    </ul>
  </subsection>

  <!-- =====================================================
       3. CHANGING CASE: toLowerCase() & toUpperCase()
       ===================================================== -->
  <subsection xml:id="sec-case-conversion">
    <title>Changing Case: <c>toLowerCase()</c> &amp; <c>toUpperCase()</c></title>
    <p>Converting text to a uniform case is a quick way to handle case-insensitive comparisons or store data in a normalized form. For example:</p>
    <program language="java"  interactive="activecode">
      <input>
public class CaseConversion {
    public static void main(String[] args) {
        String username = "Alice";
        
        // Store everything as lowercase internally
        String lowercase = username.toLowerCase();
        System.out.println("lowercase => " + lowercase); // "alice"

        // Or uppercase for emphasis
        String uppercase = username.toUpperCase();
        System.out.println("uppercase => " + uppercase); // "ALICE"

        // Example usage: checking user commands ignoring case
        String command = "HeLp";
        if (command.toLowerCase().equals("help")) {
            System.out.println("User requested help!");
        }
    }
}
      </input>
    </program>
    <p><term>Common Pitfalls:</term></p>
    <ul>
      <li><em><b>Locale Sensitivity</b>:</em> Languages like Turkish have uppercase/lowercase mappings that differ from English. Java provides <c>toLowerCase(Locale)</c> and <c>toUpperCase(Locale)</c> for custom behavior. By default, your platform's locale is used, which is typically acceptable, but keep this in mind if you your platfor uses different languages.</li>
      <li><em><b>Null Strings</b>:</em> As with <c>trim()</c>, trying to use these methods on a non-existent string will cause your program to crash.</li>
    </ul>
  </subsection>

  <!-- =====================================================
       4. REPLACING TEXT: replace() & replaceAll()
       ===================================================== -->
  <subsection xml:id="sec-replacing-text">
    <title>Replacing Text: <c>replace()</c> &amp; <c>replaceAll()</c></title>
    <p>Often you'll need to alter or remove substrings—e.g., sanitizing user inputs, removing punctuation, or transforming placeholders. Java provides:</p>
    <ul>
      <li><p><c>replace(oldChar, newChar)</c> or <c>replace(CharSequence, CharSequence)</c> <term>performs a literal replacement</term> without regex interpretation.</p></li>
      <li><p><c>replaceAll(String regex, String replacement)</c> <term>uses regex</term>, treating the first argument as a regular expression.</p></li>
    </ul>
    <program language="java"  interactive="activecode">
      <input>
public class ReplaceDemo {
    public static void main(String[] args) {
        String original = "Cats are great, cats are interesting.";
        
        // 1) Literal replacement of substring
        String replaced = original.replace("cats", "dogs");
        System.out.println("After replace(): " + replaced);
        // Notice "Cats" didn't change because "cats" != "Cats" (case differs)
        
        // 2) Regex-based replacement
        // Let's remove punctuation by replacing any non-word (\W) characters
        // with a space, except we might keep spaces.
        // This example is simplified for demonstration:
        String noPunct = original.replaceAll("[^a-zA-Z0-9 ]", "");
        System.out.println("After replaceAll(): " + noPunct);
    }
}
      </input>
    </program>
    <p><term>Common Pitfalls:</term></p>
    <ul>
      <li><em><b>Regex gotchas</b>:</em> <c>"."</c> is a regex wildcard, so <c>replaceAll(".", "_")</c> matches every character. For literal dots, use <c>"\\."</c>.</li>
      <li><em><b>Case Sensitivity</b>:</em> Replacements are case-sensitive unless you employ a case-insensitive regex flag (<c>"(?i)"</c>) or manually convert the string's case.</li>
      <li><em><b>Performance</b>:</em> <c>replaceAll</c> compiles a regex pattern. If you just need a straightforward literal change, <c>replace</c> is faster and simpler.</li>
    </ul>
  </subsection>

  <!-- =====================================================
       5. SPLITTING & JOINING
       ===================================================== -->
  <subsection xml:id="sec-splitting-joining">
    <title>Splitting &amp; Joining</title>
    <p>Splitting a string into tokens is common—e.g., reading CSV input or splitting a command into words. The method <c>split(String regex)</c> divides a string based on regex matches, while <c>String.join</c> reassembles arrays or lists with a given delimiter.</p>
    <program language="java"  interactive="activecode">
      <input>
public class SplitJoinDemo {
    public static void main(String[] args) {
        // 1) Splitting a CSV-like line
        String line = "alice,bob,charlie";
        String[] parts = line.split(",");
        System.out.println("Number of parts: " + parts.length);
        for (String p : parts) {
            System.out.println(" - " + p);
        }

        // 2) Splitting on a period requires escaping the regex wildcard:
        String sentence = "Hello.World";
        // If we just do split("."):
        //   line.split(".") => that means "split on ANY character"
        // so let's do:
        String[] safer = sentence.split("\\.");
        System.out.println("Split on literal period:");
        for (String s : safer) {
            System.out.println(s);
        }

        // 3) Rejoining a list of tokens
        String joined = String.join(";", parts);
        System.out.println("Rejoined with semicolons => " + joined);
    }
}
      </input>
    </program>
    <p><term>Common Pitfalls:</term></p>
    <ul>
      <li><em><b>Regex vs. Literal Splits</b>:</em> The <c>split()</c> method always interprets your delimiter as a regex. Special characters like <c>"."</c>, <c>"|"</c>, or <c>"^"</c> must be escaped (<c>"\\."</c>).</li>
      <li><em><b>Empty Splits</b>:</em> By default, <c>split()</c> discards trailing empty strings. If you need them, specify a limit or carefully examine the result.</li>
      <li><em><b>Null Items</b>:</em> If you try to split a non-existent string, your program will crash. Always ensure your string exists before splitting it!</li>
    </ul>
  </subsection>

  <!-- =====================================================
       6. STRINGBUILDER FOR EFFICIENT CONCATENATION
       ===================================================== -->
  <subsection xml:id="sec-stringbuilder">
    <title>StringBuilder for Efficient Concatenation</title>
    <p>Because Java <c>String</c>s are <term>immutable</term>, each concatenation can create a new object. This overhead is fine for small, infrequent operations, but can become costly in loops or extensive string assembly.</p>
    <p><c>StringBuilder</c> (or <c>StringBuffer</c>) mitigates this by maintaining a mutable character sequence that supports fast <c>append</c>, <c>insert</c>, and <c>delete</c> operations.</p>
    <program language="java"  interactive="activecode">
      <input>
public class StringBuilderDemo {
    public static void main(String[] args) {
        // Suppose we want to build a large message from many parts:
        StringBuilder sb = new StringBuilder();

        sb.append("Hello");
        sb.append(", ").append("world!");
        // Repeated appends are fast because we don't copy the whole string each time

        sb.append(" Current time is: ");
        sb.append(System.currentTimeMillis());

        // When finished, convert to an immutable String
        String result = sb.toString();
        System.out.println(result);

        // We can also do advanced edits:
        // Insert or delete:
        sb.insert(5, "(INSERTED)");
        System.out.println("After insert => " + sb);

        sb.delete(5, 14);
        System.out.println("After delete => " + sb);

        // Or replace:
        sb.replace(0, 5, "Hi");
        System.out.println("After replace => " + sb);
    }
}
      </input>
    </program>
    <p><term>Common Pitfalls:</term></p>
    <ul>
      <li><em><b>Forgetting to Call <c>toString()</c></b>:</em> Passing a <c>StringBuilder</c> to a method expecting a <c>String</c> can be a mistake. Finalize your text with <c>builder.toString()</c>.</li>
      <li><em><b>One-Off Cases</b>:</em> For small concatenations (two or three strings), <c>StringBuilder</c> offers limited benefit. Java often optimizes simple string concatenation internally.</li>
      <li><em><b>StringBuffer vs. StringBuilder</b>:</em> <c>StringBuffer</c> is thread-safe. In single-threaded code, <c>StringBuilder</c> is typically faster and preferred.</li>
    </ul>
  </subsection>

  <!-- =====================================================
       7. STRING FORMAT & PRINTF
       ===================================================== -->
  <subsection xml:id="sec-string-format">
    <title>Formatting Strings: <c>String.format</c> &amp; <c>printf</c></title>
    <p><c>String.format</c> allows you to build complex strings using a printf-style template, which can be much more readable than multiple concatenations—particularly when mixing different data types in the same output.</p>
    <program language="java"  interactive="activecode">
      <input>
public class FormatDemo {
    public static void main(String[] args) {
        // 1) Basic usage: format strings with placeholders
        int qty = 3;
        double price = 9.99;
        String item = "Notebook";

        String line = String.format("Purchased %d %ss at $%.2f each", 
                                    qty, item, price);
        System.out.println(line);
        // => "Purchased 3 Notebooks at $9.99 each"

        // 2) Using System.out.printf (similar to format, but prints directly)
        System.out.printf("Hello %s, you have %d new messages.%n", "Alice", 5);
        // => "Hello Alice, you have 5 new messages."
    }
}
      </input>
    </program>
    <p><term>Common Pitfalls:</term></p>
    <ul>
      <li><em><b>Print vs. Return</b>:</em> <c>String.format</c> returns a new string, whereas <c>printf</c> writes directly to the output stream.</li>
      <li><em><b>Mismatch in Placeholders</b>:</em> Ensure <c>%d</c> is used for integers, <c>%f</c> for floating-point values, <c>%s</c> for strings, etc. Using the wrong specifier can cause errors or unexpected results.</li>
      <li><em><b>Locale Considerations</b>:</em> By default, <c>String.format</c> applies your system's locale. If you need special numeric or date formats, provide a <c>Locale</c> argument to <c>String.format</c>.</li>
    </ul>
  </subsection>

  <!-- =====================================================
       8. CONCLUSION & NEXT STEPS
       ===================================================== -->
  <subsection xml:id="sec-practical-string-conclusion">
    <title>Conclusion &amp; Next Steps</title>
    <p>Java's <c>String</c> class delivers a <term>rich suite</term> of methods for trimming, replacing, splitting, and joining text, plus a dedicated <c>StringBuilder</c> for efficient in-memory construction. These built-ins save significant effort over coding everything manually (as we did in earlier <c>MyString</c> examples).</p>
    <p>Here's how to apply them routinely:</p>
    <ul>
      <li><p><term>Cleaning &amp; Validation:</term> Use <c>trim()</c> or <c>strip()</c> on user inputs before storage or comparisons. Convert to a consistent case (e.g., <c>toLowerCase()</c>) if logic ignores case.</p></li>
      <li><p><term>Transforming &amp; Tokenizing:</term> Use <c>replace()</c> for literal changes or <c>replaceAll()</c> for pattern-based transformations (mind regex intricacies!). Break strings into arrays with <c>split(...)</c>, then recombine them via <c>String.join(...)</c>.</p></li>
      <li><p><term>Performance &amp; Assembly:</term> For building large or repetitive text, use <c>StringBuilder</c> for speed, then finalize with <c>.toString()</c>.</p></li>
      <li><p><term>Formatting &amp; Output:</term> <c>String.format</c> or <c>printf</c> simplifies complex output—especially if mixing multiple placeholders or controlling numeric precision.</p></li>
    </ul>
    <!-- <p>If you'd like some <term>practice</term> right now, try these short exercises:</p>
    <ul>
      <li><p>Write a method <c>cleanInput</c> that accepts a <c>String</c>, trims it, removes punctuation using <c>replaceAll("[^a-zA-Z0-9 ]", "")</c>, and returns the result.</p></li>
      <li><p>Split a text file's lines on commas, convert each piece to uppercase, and then join them with semicolons.</p></li>
      <li><p>Construct a multi-line report with 10 lines of dynamic data. Compare doing it with repeated <c>+</c> versus using <c>StringBuilder</c>. If possible, measure any performance difference!</p></li>
    </ul> -->
    <p>Now you have a more <term>practical toolkit</term> for handling strings. While the <term>Design Recipe</term> remains invaluable for learning low-level string manipulation, the built-in methods will streamline your code for real-world scenarios.</p>
  </subsection>
  <subsection xml:id="ex-string-methods">
    <title>Check Your Understanding</title>

  <exercises>
    <!-- ==========================================
         Quiz #1: Trim vs. Strip
         ========================================== -->
    <exercise xml:id="mc-trim-strip" type="multiplechoice">
      <title>Multiple-Choice: Trim vs. Strip</title>
      <statement>
        <p>Which of the following statements about <code>trim()</code> and <code>strip()</code> is correct?</p>
      </statement>
      <choices>
        <choice>
          <statement><code>trim()</code> is only available in Java 11+, and <code>strip()</code> is available in all Java versions.</statement>
          <feedback>No. Actually, <code>trim()</code> is older, while <code>strip()</code> was introduced in Java 11.</feedback>
        </choice>
        <choice correct="yes">
          <statement><code>trim()</code> removes ASCII whitespace up to <code>'\u0020'</code>, while <code>strip()</code> (Java 11+) follows Unicode rules, removing a broader range of whitespace.</statement>
          <feedback>Correct! <code>strip()</code> is more Unicode-aware, whereas <code>trim()</code> works with basic ASCII whitespace.</feedback>
        </choice>
        <choice>
          <statement><code>trim()</code> throws an exception if the string has no whitespace, while <code>strip()</code> silently ignores it.</statement>
          <feedback>No. Neither <code>trim()</code> nor <code>strip()</code> throw an exception on empty or no-whitespace strings.</feedback>
        </choice>
        <choice>
          <statement>They differ only in name; their internal implementations are identical in modern Java.</statement>
          <feedback>No. <code>strip()</code> is specifically more Unicode-complete, so they are not identical.</feedback>
        </choice>
      </choices>
    </exercise>

    <!-- ==========================================
         Quiz #2: toLowerCase() & Locale
         ========================================== -->
    <exercise xml:id="mc-tolowercase-locale" type="multiplechoice">
      <title>Multiple-Choice: Case Conversion &amp; Locale</title>
      <statement>
        <p>Which scenario <em>best</em> illustrates why you might need <code>toLowerCase(Locale)</code> or <code>toUpperCase(Locale)</code> rather than the default version?</p>
      </statement>
      <choices>
        <choice>
          <statement>You want to convert an English string like "Hello" to uppercase, e.g., "HELLO."</statement>
          <feedback>No, the default locale-based methods usually suffice for basic English text. There's no special nuance here.</feedback>
        </choice>
        <choice>
          <statement>You're handling numeric data, and <code>toLowerCase</code> has no effect on digits.</statement>
          <feedback>No. Converting digits to lower/upper case is irrelevant. There's no “digit case.”</feedback>
        </choice>
        <choice correct="yes">
          <statement>You're dealing with a language like Turkish, where “I” to lowercase can differ from English. Using a specific <code>Locale</code> ensures correct letter mappings.</statement>
          <feedback>Correct! Certain languages have special casing rules, so <code>toLowerCase(Locale)</code> handles them properly.</feedback>
        </choice>
        <choice>
          <statement>When reading a file from disk, you must call <code>toLowerCase(Locale)</code> on its path to avoid OS-level errors.</statement>
          <feedback>No. Filenames on most operating systems are not changed by typical Java locale settings. This scenario is not a standard reason to use a custom locale.</feedback>
        </choice>
      </choices>
    </exercise>

    <!-- ==========================================
         Quiz #3: replace() vs. replaceAll()
         ========================================== -->
    <exercise xml:id="mc-replace-vs-replaceAll" type="multiplechoice">
      <title>Multiple-Choice: replace() vs. replaceAll()</title>
      <statement>
        <p>What's the main distinction between <code>replace(...)</code> and <code>replaceAll(...)</code> in Java's <code>String</code> class?</p>
      </statement>
      <choices>
        <choice>
          <statement>They're fully identical, with <code>replaceAll</code> simply being a new name added in later Java versions.</statement>
          <feedback>No. They differ in how they treat the search pattern (regex vs. literal).</feedback>
        </choice>
        <choice correct="yes">
          <statement><code>replace(...)</code> does literal character/substring substitution, whereas <code>replaceAll(...)</code> interprets the first argument as a regex pattern.</statement>
          <feedback>Exactly. That's the key difference, often leading to unexpected behavior if you forget <code>replaceAll</code> uses regex.</feedback>
        </choice>
        <choice>
          <statement><code>replaceAll(...)</code> is case-insensitive by default, while <code>replace(...)</code> is case-sensitive.</statement>
          <feedback>No. Both are case-sensitive unless you explicitly use regex flags in <code>replaceAll</code>.</feedback>
        </choice>
        <choice>
          <statement><code>replaceAll(...)</code> only removes characters, and <code>replace(...)</code> only inserts new characters, so they handle different tasks.</statement>
          <feedback>No. Both can swap or remove/insert depending on your arguments. They're not restricted to removing or inserting only.</feedback>
        </choice>
      </choices>
    </exercise>

    <!-- ==========================================
         Quiz #4: Split and Join
         ========================================== -->
    <exercise xml:id="mc-split-join" type="multiplechoice">
      <title>Multiple-Choice: Splitting &amp; Joining</title>
      <statement>
        <p>Consider you have <code>String line = "abc.def.ghi";</code> and want to split it on literal periods <code>"."</code>, then rejoin with dashes <code>"-"</code>. Which statement is correct?</p>
      </statement>
      <choices>
        <choice correct="yes">
          <statement>You must escape the period in the regex: <code>line.split("\\.")</code>, then use <code>String.join("-", array)</code> to recombine.</statement>
          <feedback>Correct. The dot in a regex means “any character,” so you must use <code>"\\."</code> to match a literal period.</feedback>
        </choice>
        <choice>
          <statement>Simply calling <code>line.split(".")</code> will suffice, because <code>"."</code> is automatically escaped in Java.</statement>
          <feedback>No. <code>split(".")</code> would split on every character, not just periods.</feedback>
        </choice>
        <choice>
          <statement>You must call <code>split("\\.")</code> and then can only rejoin using <code>StringBuffer</code>, because <code>String.join</code> is deprecated.</statement>
          <feedback>No. <code>String.join</code> is not deprecated; it's perfectly valid to use for rejoining.</feedback>
        </choice>
        <choice>
          <statement>Use <code>Arrays.split(line, ".")</code> followed by <code>Arrays.join("-", parts)</code>, as <code>String</code> doesn't support splitting or joining.</statement>
          <feedback>No. Java's <code>String</code> class has built-in <code>split</code> and <code>String</code> also has <code>join</code> (static method).</feedback>
        </choice>
      </choices>
    </exercise>

    <!-- ==========================================
         Quiz #5: StringBuilder Usage
         ========================================== -->
    <exercise xml:id="mc-stringbuilder-loop" type="multiplechoice">
      <title>Multiple-Choice: StringBuilder in a Loop</title>
      <statement>
        <p>Which usage scenario justifies <code>StringBuilder</code> to avoid performance issues?</p>
      </statement>
      <choices>
        <choice>
          <statement>Concatenating a constant prefix and suffix once or twice (e.g., <code>"Hello" + "World"</code>).</statement>
          <feedback>No. For small, one-off concatenations, <code>StringBuilder</code> gives minimal benefit.</feedback>
        </choice>
        <choice correct="yes">
          <statement>Building a large string inside a loop, adding text from each iteration, e.g., generating 10,000 lines of report data.</statement>
          <feedback>Yes. Repeated concatenations in a loop can get expensive with immutable <code>String</code>; <code>StringBuilder</code> is a great fit.</feedback>
        </choice>
        <choice>
          <statement>Parsing an integer from a string, e.g., <code>Integer.parseInt("123")</code>.</statement>
          <feedback>No. That's an entirely different operation; <code>StringBuilder</code> doesn't help parse integers from text.</feedback>
        </choice>
        <choice>
          <statement>Defining a <code>public static final</code> constant that never changes during runtime.</statement>
          <feedback>No. Final constants are set at compile time, so there's no ongoing concatenation cost to worry about.</feedback>
        </choice>
      </choices>
    </exercise>

    <!-- ==========================================
         Quiz #6: String.format vs. printf
         ========================================== -->
    <exercise xml:id="mc-format-printf" type="multiplechoice">
      <title>Multiple-Choice: format() vs. printf()</title>
      <statement>
        <p>Which of these statements accurately compares <code>String.format(...)</code> and <code>System.out.printf(...)</code> usage in Java?</p>
      </statement>
      <choices>
        <choice>
          <statement><code>printf</code> is the only method to use placeholders like <code>%s</code> or <code>%d</code>; <code>String.format</code> doesn't support them.</statement>
          <feedback>No. Both support the same placeholder syntax. They're nearly identical in usage, except for printing vs. returning.</feedback>
        </choice>
        <choice>
          <statement><code>String.format</code> automatically localizes numeric formats if given <code>%d</code>, while <code>printf</code> always uses English locale.</statement>
          <feedback>No. Both can use localized formats if you provide a <code>Locale</code>, but by default they behave the same.</feedback>
        </choice>
        <choice>
          <statement>They behave identically in all cases, including how they handle newlines, because <code>System.out.printf</code> also returns a <code>String</code>.</statement>
          <feedback>No. <code>printf</code> prints to the console; it doesn't return any string.</feedback>
        </choice>
        <choice correct="yes">
          <statement><code>String.format</code> returns a new string with placeholders replaced, whereas <code>printf</code> writes directly to standard output (no returned string).</statement>
          <feedback>Correct. That's the key difference: <code>format</code> yields a <code>String</code>, <code>printf</code> prints.</feedback>
        </choice>
      </choices>
    </exercise>

    <!-- ==========================================
         Short-Answer: Practical Usage
         ========================================== -->
    <exercise xml:id="sa-practical-string-usage" type="shortanswer">
      <title>Short-Answer: Practical Usage Example</title>
      <statement>
        <p>Give a brief example (in plain English, no code needed) where you'd combine <code>trim()</code>, <code>toLowerCase()</code>, <code>split(...)</code>, and <code>StringBuilder</code> in a single workflow. What real-world task might benefit from using all of these in sequence?</p>
      </statement>
      <answer>One possible scenario is parsing user input from a command line: First trim whitespace, convert to lowercase to standardize commands, split on spaces to isolate each argument, then use StringBuilder to assemble a log or message from those arguments for display or debugging.</answer>
    </exercise>
</exercises>
</subsection>
</section>