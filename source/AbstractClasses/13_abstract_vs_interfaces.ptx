<section xml:id="abstract-vs-interfaces">
  <title>Choosing Between Abstract Classes and Interfaces</title>
  <p>The choice between abstract classes and interfaces can sometimes confuse beginners. Here's a practical comparison:</p>

  <note>
    <title>Understanding "Contracts" in Java</title>
    <p>Both abstract classes and interfaces define "contracts" but in different ways:</p>
    <ul>
      <li><term>Abstract classes</term> represent a partial implementation contract: "Here's some common state and behavior, but you must implement these specific methods."</li>
      <li><term>Interfaces</term> represent a pure responsibility contract: "Any class implementing this must provide these capabilities, regardless of its inheritance hierarchy."</li>
    </ul>
    <p>Abstract classes focus on what a class <em>is</em> (identity), while interfaces focus on what a class can <em>do</em> (capability).</p>
  </note>

  <tabular>
    <row header="yes">
      <cell>Feature</cell>
      <cell>Abstract Classes</cell>
      <cell>Interfaces</cell>
    </row>
    <row>
      <cell>Fields</cell>
      <cell>Can have instance fields</cell>
      <cell>Only constants (static final)</cell>
    </row>
    <row>
      <cell>Methods</cell>
      <cell>Mix of abstract and concrete</cell>
      <cell>Abstract (+ default since Java 8)</cell>
    </row>
    <row>
      <cell>Implementation</cell>
      <cell>Can provide partial implementation</cell>
      <cell>Only through default methods</cell>
    </row>
    <row>
      <cell>Constructors</cell>
      <cell>Yes</cell>
      <cell>No</cell>
    </row>
    <row>
      <cell>Multiple inheritance</cell>
      <cell>No (only one superclass)</cell>
      <cell>Yes (implement multiple)</cell>
    </row>
    <row>
      <cell>Access modifiers</cell>
      <cell>Any (public, protected, private)</cell>
      <cell>Only public</cell>
    </row>
  </tabular>

  <p>Based on the comparison, here are guidelines for choosing:</p>

  <ul>
    <li><term>Use Abstract Classes when:</term>
      <ul>
        <li>You have shared <term>state</term> (fields) that subclasses need</li>
        <li>You want to provide some common method implementations</li>
        <li>You have a clear "is-a" relationship in your domain</li>
        <li>You need to use non-public members (protected methods, fields)</li>
      </ul>
    </li>
    <li><term>Use Interfaces when:</term>
      <ul>
        <li>You want classes to fulfill multiple roles or behaviors independently</li>
        <li>You have unrelated classes that share common method signatures but no shared state</li>
        <li>You want maximum flexibility for future classes</li>
        <li>You're defining a <term>capability</term> rather than a type of object</li>
      </ul>
    </li>
  </ul>

  <p><term>Concrete Example Contrast:</term></p>
  <sidebyside widths="48% 48%">
    <stack>
      <p>Abstract Class Example</p>
      <p>A <c>Vehicle</c> abstract class makes sense because:</p>
      <ul>
        <li>All vehicles share common state (model, speed, position)</li>
        <li>There's clearly an "is-a" relationship (Car <em>is a</em> Vehicle)</li>
        <li>Common behaviors can be implemented once (accelerate, decelerate)</li>
        <li>Some methods need customization in subclasses (start, stop)</li>
      </ul>
    </stack>
    <stack>
      <p>Interface Example</p>
      <p>A <c>Printable</c> interface makes sense because:</p>
      <ul>
        <li>Many unrelated classes (Document, Invoice, User) might need printing capability</li>
        <li>These classes don't share a common superclass</li>
        <li>No shared state is needed for printing</li>
        <li>The capability can be added independently of inheritance hierarchy</li>
      </ul>
    </stack>
  </sidebyside>

  <p>Let's look at some examples from different domains:</p>
  
  <sidebyside widths="48% 48%">
    <stack>
      <p>Document Processing System</p>
      <p>Abstract class: <c>Document</c> with fields for common properties and some shared implementation</p>
      <p>Interfaces: <c>Printable</c>, <c>Searchable</c>, <c>Editable</c> as capabilities</p>
      <p>Class hierarchy:</p>
      <pre>
Document (abstract class with common behavior)
PDFDocument extends Document, implements Printable, Searchable
WordDocument extends Document, implements Printable, Searchable, Editable
ImageDocument extends Document, implements Printable
      </pre>
    </stack>
    <stack>
      <p>Vehicle System Example</p>
      <p>Abstract class: <c>Vehicle</c> with model, position, and shared behaviors</p>
      <p>Interfaces: <c>Drivable</c>, <c>Electric</c>, <c>Towable</c> as capabilities</p>
      <p>Class hierarchy:</p>
      <pre>
Vehicle (abstract class with common behavior)
Car extends Vehicle, implements Drivable
ElectricCar extends Vehicle, implements Drivable, Electric
Trailer extends Vehicle, implements Towable
      </pre>
    </stack>
  </sidebyside>
  
  <p>Real-world systems often combine both approaches to create flexible and organized designs.</p>
  
  <insight>
    <title>Hybrid Design: Combining Abstract Classes and Interfaces</title>
    <p>In complex applications, you'll often use both abstract classes and interfaces together. Let's build this up step by step using our vehicle example:</p>
    
    <p><term>Step 1:</term> First, we define our abstract class for common vehicle behavior and state:</p>
    <program language="java">
      <code>// Abstract base class - handles common state and partial implementation
public abstract class Vehicle {
    protected String model;
    protected double position;
    
    // Common implementation shared by all vehicles
    public String getModel() {
        return model;
    }
    
    // Abstract methods that all vehicles must implement
    public abstract void start();
    public abstract void stop();
}</code>
    </program>
    
    <p><term>Step 2:</term> Next, we define interfaces for optional capabilities vehicles might have:</p>
    <program language="java">
      <code>// Interface for vehicles that are electric powered
public interface Electric {
    void charge();
    int getBatteryLevel();
}

// Interface for vehicles that can tow other vehicles
public interface Towable {
    void tow(Vehicle other);
    int getTowingCapacity();
}</code>
    </program>
    
    <p><term>Step 3:</term> Finally, we create concrete vehicle types that combine the abstract class with selected interfaces:</p>
    <program language="java">
      <code>// Concrete class using both approaches
public class ElectricTruck extends Vehicle 
        implements Electric, Towable {
    
    private int batteryLevel;
    private int towingCapacity;
    
    // Implement required abstract methods from Vehicle
    @Override
    public void start() { 
        if (batteryLevel > 10) {
            System.out.println("Starting electric motor...");
        } else {
            System.out.println("Battery too low to start!");
        }
    }
    
    @Override
    public void stop() { 
        System.out.println("Stopping electric motor...");
    }
    
    // Implement Electric interface
    @Override
    public void charge() { 
        batteryLevel = 100;
        System.out.println("Battery fully charged");
    }
    
    @Override
    public int getBatteryLevel() {
        return batteryLevel;
    }
    
    // Implement Towable interface
    @Override
    public void tow(Vehicle other) {
        System.out.println("Towing " + other.getModel());
    }
    
    @Override
    public int getTowingCapacity() {
        return towingCapacity;
    }
}</code>
    </program>
    
    <p>This design leverages the strengths of both approaches:</p>
    <ul>
      <li>The abstract class (<c>Vehicle</c>) provides shared state (fields) and some implementation</li>
      <li>The interfaces add optional capabilities (<c>Electric</c>, <c>Towable</c>)</li>
      <li>Different vehicle types can mix and match these capabilities as needed</li>
    </ul>
  </insight>
  
  <p><term>Key takeaways for choosing between abstract classes and interfaces:</term></p>
  <ul>
    <li>Use abstract classes for "is-a" relationships with shared state and implementation</li>
    <li>Use interfaces for "can-do" capabilities that may apply to diverse classes</li>
    <li>Consider using both in combination for complex systems</li>
    <li>Remember: Java allows single inheritance but multiple interface implementation</li>
    <li>Avoid deep inheritance hierarchies (more than 2-3 levels) to reduce complexity. Deep hierarchies can lead to:
      <ul>
        <li>Fragile code that breaks when superclasses change</li>
        <li>Difficulty understanding the full behavior of a class</li>
        <li>"Method origin confusion" (which superclass does this method come from?)</li>
        <li>Reduced maintainability and code flexibility</li>
      </ul>
    </li>
  </ul>
  
  <exercises>
     <exercise xml:id="interface-vs-abstract-use-case1">
     <statement>
      <p>
       For the following scenario, decide whether an abstract class or an interface would be the better design choice:
      </p>
      <p>
      A set of shapes in a drawing application where every shape must have an area and perimeter calculation, 
      but some shapes might require different additional properties (e.g., a circle has a radius, a rectangle has width and height).
      </p>
     </statement>
     <choices>
      <choice correct="yes">
        <statement>
          <p>
            Abstract class
          </p>
        </statement>
      </choice>
     <choice>
      <statement>
        <p>
          Interface
        </p>
      </statement>
     </choice>
     </choices>
</exercise>
    
     <exercise xml:id="interface-vs-abstract-use-case2">
     <statement>
      <p>
       For the following scenario, decide whether an abstract class or an interface would be the better design choice:
      </p>
      <p>
      A set of devices (e.g., printers, scanners, projectors) that must implement a connect() method but may have completely different ways of working otherwise.
      </p>
     </statement>
     <choices>
      <choice>
        <statement>
          <p>
            Abstract class
          </p>
        </statement>
      </choice>
     <choice correct="yes">
      <statement>
        <p>
          Interface
        </p>
      </statement>
     </choice>
     </choices>
</exercise>

 <exercise xml:id="interface-vs-abstract-use-case3">
     <statement>
      <p>
       For the following scenario, decide whether an abstract class or an interface would be the better design choice:
      </p>
      <p>
      A hierarchy of vehicles where all vehicles share common attributes like speed and fuel capacity, but different types of vehicles 
      (cars, boats, planes) have specialized behaviors.
      </p>
     </statement>
     <choices>
      <choice correct="yes">
        <statement>
          <p>
            Abstract class
          </p>
        </statement>
      </choice>
     <choice>
      <statement>
        <p>
          Interface
        </p>
      </statement>
     </choice>
     </choices>
</exercise>

<exercise xml:id="interface-vs-abstract-use-case4">
     <statement>
      <p>
       For the following scenario, decide whether an abstract class or an interface would be the better design choice:
      </p>
      <p>
        A payment system where different payment methods (credit card, PayPal, bank transfer) must implement a <c>processPayment()</c> 
        method but don't share any default implementation.
      </p>
     </statement>
     <choices>
      <choice>
        <statement>
          <p>
            Abstract class
          </p>
        </statement>
      </choice>
     <choice correct="yes">
      <statement>
        <p>
          Interface
        </p>
      </statement>
     </choice>
     </choices>
</exercise>

<exercise xml:id="interface-vs-abstract-use-case5">
     <statement>
      <p>
       For the following scenario, decide whether an abstract class or an interface would be the better design choice:
      </p>
      <p>
      A game where different types of characters (warrior, mage, archer) have common characteristics such as health and attack power, 
      but specific attack strategies differ.
      </p>
     </statement>
     <choices>
      <choice correct="yes">
        <statement>
          <p>
            Abstract class
          </p>
        </statement>
      </choice>
     <choice>
      <statement>
        <p>
          Interface
        </p>
      </statement>
     </choice>
     </choices>
</exercise>

   


    <exercise xml:id="abstract-interface-true-false">
        <statement correct="no">
          <p>True or False: An interface can have constructors.</p>
        </statement>
         <feedback>
          <p>Interfaces cannot have constructors. Constructors are used to initialize object state, but interfaces cannot contain instance variables (except constants).</p>
        </feedback>
        </exercise>


            <exercise xml:id="abstract-interface-true-false1">
        <statement correct="no">
          <p>True or False: Abstract classes can contain only abstract methods.</p>
        </statement>
          <feedback>
          <p>Abstract classes can contain a mix of abstract methods AND concrete methods with implementations. In fact, this is one of their key advantages over interfaces.</p>
        </feedback>
        </exercise>
            <exercise xml:id="abstract-interface-true-false2">
        <statement correct="yes">
          <p>True or False: A class can implement multiple interfaces at the same time.</p>
        </statement>
        <feedback>
          <p>This is correct. Java allows a class to implement multiple interfaces simultaneously, which is a way to achieve a form of multiple inheritance for behavior.</p>
        </feedback>
        </exercise>
            <exercise xml:id="abstract-interface-true-false3">
        <statement correct="no">
          <p>True or False: You can create an instance of an abstract class directly.</p>
        </statement>
         <feedback>
          <p>You cannot instantiate abstract classes directly. You must create a concrete subclass that implements all abstract methods, then instantiate that subclass.</p>
        </feedback>
        </exercise>
            <exercise xml:id="abstract-interface-true-false4">
        <statement correct="yes">
          <p>True or False: Interface methods are implicitly public and abstract.</p>
        </statement>
           <feedback>
          <p>This is correct. In interfaces, methods are implicitly public and abstract (except for default methods, which have implementations).</p>
        </feedback>
        </exercise>
  <exercise xml:id="mc_abstract-interface4">
    <statement>
      <p>
        What is one advantage of using an abstract class over an interface?
      </p>
    </statement>
    <choices>
    <choice>
      <statement>
        <p>
           An abstract class allows multiple inheritance.
        </p>
      </statement>
      <feedback>
        <p>
          Incorrect. Java does not support multiple inheritance for classes, but a class can implement multiple interfaces.
        </p>
      </feedback>
    </choice>
    <choice correct="yes">
      <statement>
        <p>
          An abstract class can provide concrete methods with instance variables.
        </p>
      </statement>
      <feedback>
        <p>
          Correct! Abstract classes can define instance fields and provide methods that use them.
        </p>
      </feedback>
    </choice>
    <choice>
      <statement>
        <p>
          An abstract class allows multiple class extensions.
        </p>
      </statement>
      <feedback>
        <p>
           Incorrect. A class can only extend one abstract class, but it can implement multiple interfaces.
        </p>
      </feedback>
    </choice>
    <choice>
      <statement>
        <p>
          An abstract class does not require subclasses to implement all abstract methods.
        </p>
      </statement>
      <feedback>
        <p>
          Incorrect. A subclass must implement all abstract methods unless it is itself declared abstract.
        </p>
      </feedback>
    </choice>
    </choices>
  </exercise>

  <exercise xml:id="mc_abstract-interface5">
  <statement>
    <p>
      What is an advantage of using interfaces over abstract classes?
    </p>
  </statement>
  <choices>
    <choice>
      <statement>
        <p>
          Interfaces allow defining instance variables.
        </p>
      </statement>
      <feedback>
        <p>
           Incorrect. Interfaces do not allow instance variables, only constants (<c>public static final</c>).
        </p>
      </feedback>
    </choice>
    <choice correct="yes">
      <statement>
        <p>
           A class can implement multiple interfaces but extend only one abstract class.
        </p>
      </statement>
      <feedback>
        <p>
           Correct! This flexibility allows a class to inherit behavior from multiple sources.
        </p>
      </feedback>
    </choice>
    <choice>
      <statement>
        <p>
          Interfaces can contain only abstract methods, while abstract classes can have default methods.
        </p>
      </statement>
      <feedback>
        <p>
           Incorrect. Interfaces can have default methods, so this statement is outdated.
        </p>
      </feedback>
    </choice>
    <choice>
      <statement>
        <p>
          Interfaces require implementing classes to define all methods.
        </p>
      </statement>
      <feedback>
        <p>
           Incorrect. Interfaces can have default methods, which do not require implementation.
        </p>
      </feedback>
    </choice>
  
  </choices>
  </exercise>
  </exercises>
</section> 