<?xml version="1.0"?>
<!-- Generated by Docutils 0.19 -->
<section xml:id="_classes-step-tracker">
    <title>Classes Practice - StepTracker Class</title>

            <p>This question involves the implementation of a fitness tracking system that is represented by the <term>StepTracker</term> class. A StepTracker object is created with a parameter that defines the minimum number of steps that must be taken for a day to be considered active. The StepTracker class provides a constructor and the following methods.</p>
            <p><ul>
                <li>
                    <p><term>addDailySteps</term>, which accumulates information about steps, in readings taken once per day</p>
                </li>
                <li>
                    <p><term>activeDays</term>, which returns the number of active days</p>
                </li>
                <li>
                    <p><term>averageSteps</term>, which returns the average number of steps per day, calculated by dividing the total number of steps taken by the number of days tracked</p>
                </li>
            </ul></p>
            <p>The following table contains a sample code execution sequence and the corresponding results.</p>

<table>
  <!-- <tabular halign="center"> -->
     <tabular halign="left" top="major" bottom="minor">
          <col width="25%"/>
          <col width="25%"/>
          <col width="30%"/>
    <row header="yes" bottom="minor" >
      <cell>Statements and Expressions</cell>
      <cell>Value Returned (blank if no value)</cell>
      <cell>Comment</cell>
    </row>
    <row>
      <cell><c>StepTracker tr = new StepTracker(10000);</c></cell>
      <cell></cell>
      <cell><line>Days with at least 10,000 steps are considered</line><line>active.Assume that the parameter is positive.</line></cell>
    </row>
    <row>
        <cell><c>tr.activeDays();</c></cell>
        <cell>0</cell>
        <cell>No data have been recorded yet.</cell>
    </row>
    <row>
        <cell><c>tr.averageSteps();</c></cell>
        <cell>0.0</cell>
        <cell><line>When no step data have been recorded,</line><line>the averageSteps method returns 0.0.</line></cell>
    </row>
     <row>
        <cell><c>tr.addDailySteps(9000);</c></cell>
        <cell></cell>
        <cell><line>This is too few steps for the day to be </line><line> considered active.</line></cell>
    </row>
     <row>
        <cell><c>tr.addDailySteps(5000);</c></cell>
        <cell></cell>
        <cell><line>This is too few steps for the day to be </line><line> considered active.</line></cell>
    </row>
     <row>
        <cell><c>tr.activeDays();</c></cell>
        <cell>0</cell>
        <cell>No day had at least 10,000 steps.</cell>
    </row>
     <row>
        <cell><c>tr.averageSteps();</c></cell>
        <cell>7000.0</cell>
        <cell><line>The average number of steps per day </line><line>is (14000 / 2).</line></cell>
    </row>
     <row>
        <cell><c>tr.addDailySteps(13000);</c></cell>
        <cell></cell>
        <cell>This represents an active day.</cell>
    </row>
     <row>
        <cell><c>tr.activeDays();</c></cell>
        <cell>1</cell>
        <cell><line>Of the three days for which step data were </line><line>entered, one day had at least 10,000 steps.</line></cell>
    </row>
     <row>
        <cell><c>tr.averageSteps();</c></cell>
        <cell>9000.0</cell>
        <cell><line>The average number of steps per day</line><line> is (27000 / 3).</line></cell>
    </row>
     <row>
        <cell><c>tr.addDailySteps(23000);</c></cell>
        <cell></cell>
        <cell>This represents an active day.</cell>
    </row>
     <row>
        <cell><c>tr.addDailySteps(1111);</c></cell>
        <cell></cell>
        <cell><line>This is too few steps for the day to be </line><line> considered active.</line></cell>
    </row>
     <row>
        <cell><c>tr.activeDays();</c></cell>
        <cell>2</cell>
        <cell><line>Of the five days for which step data were</line><line>entered, two days had at least 10,000 steps.</line></cell>
    </row>
     <row>
        <cell><c>tr.averageSteps();</c></cell>
        <cell>10222.2</cell>
        <cell><line>The average number of steps per day is</line><line> (51111 / 5).</line></cell>
    </row>
    </tabular>

</table>


            <p>This question asks you to write the complete StepTracker class, including the constructor and any required instance variables and
                methods. Your implementation must meet all specifications and conform to the example.</p>
       
    <p><term>Part a.</term>  Determining the Instance Variables</p>
            <p>Read through the problem statement and determine the instance variables required for this class. 
            When starting to work on a problem like this it helps to circle the words that are important and may describe the instance variables. 
        </p>
            <p>It may help to first identify the variables that are needed for the constructor and the accessor and mutator methods.</p>

<exercise label="steptracker_instance_variables">
    <statement><p>Select the phrases below which probably mention an instance variable. Note that some of these may be referring to the same variable or to local variables.</p></statement>
<feedback><p>Think about phrases that indicate a value that is being stored or changed or returned.</p></feedback>
<areas>
<cline>This question involves the implementation of a fitness tracking </cline> <cline><area correct="no">system that is represented by the **StepTracker** class.</area></cline>
<cline/>
<cline><area correct="no">A StepTracker object</area> is created with a parameter that defines </cline> <cline> <area correct="yes">the minimum number of steps that must be taken for a day to be considered active. </area></cline>
<cline/>
<cline><area correct="no">The StepTracker class</area> provides a constructor and </cline> <cline>the following methods.</cline>
<cline/>
<cline>     - addDailySteps, which accumulates <area correct="yes">information about steps</area>, </cline> <cline>in readings taken once per day.</cline>
<cline/>
<cline>     - activeDays, which returns <area correct="yes">the number of active days.</area></cline>
<cline/>
<cline>     - averageSteps, which returns <area correct="yes">the average number of steps per day</area>, </cline> <cline>calculated by dividing <area correct="yes">the total number of steps taken</area></cline> <cline> by <area correct="yes">the number of days tracked.</area></cline>
</areas></exercise>            
  <p>Answering the multiple choice problem will help you determine the instance variables through the constructor parameters and accessor and mutator methods.</p>

    <exercise label="steptracker-constructor">
        <statement>

                <p>Given the StepTracker class description above, which of these statements describes an instance variable that the StepTracker constructor should set using a parameter?</p>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>the minimum number of steps that must be taken for a day to be considered active</p>
                </statement>
                <feedback>
                    <p>Yes, the problem definition describes this as a parameter to create a StepTracker object.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>the number of active days</p>
                </statement>
                <feedback>
                    <p>This is not described as a parameter to create an StepTracker object.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>the average number of steps per day</p>
                </statement>
                <feedback>
                    <p>This is not described as a parameter to create an StepTracker object.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>the total number of steps taken</p>
                </statement>
                <feedback>
                    <p>This is not described as a parameter to create an StepTracker object.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>number of days tracked</p>
                </statement>
                <feedback>
                    <p>This is not described as a parameter to create an StepTracker object.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
      

    <exercise label="steptracker-accessor">
        <statement>

                <p>Which of the following methods is an accessor method that returns the value of an instance variable?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>StepTracker tr = new StepTracker(1000)</p>
                </statement>
                <feedback>
                    <p>This is a call to the constructor.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>tr.addDailysteps(1000);</p>
                </statement>
                <feedback>
                    <p>No, addDailySteps(1000) probably adds the given steps to an instance variable as a mutator method.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>tr.activeDays();</p>
                </statement>
                <feedback>
                    <p>Yes, activeDays() is an accessor method that returns the number of active days (a great instance variable!).</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="steptracker-mutator">
        <statement>

                <p>Which of the following methods is a mutator method that changes the value of an instance variable?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>StepTracker tr = new StepTracker(1000)</p>
                </statement>
                <feedback>
                    <p>No, this is a call to the constructor.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>tr.addDailysteps(1000);</p>
                </statement>
                <feedback>
                    <p>Yes, addDailySteps(1000) is a mutator method that adds the steps given as a parameter to an instance variable that keeps track of the steps taken so far.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>tr.activeDays();</p>
                </statement>
                <feedback>
                    <p>No, activeDays() is an accessor method that returns the number of active days.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>tr.averageSteps();</p>
                </statement>
                <feedback>
                    <p>No, averageSteps() is a complex accessor method that calculates and returns the average number of steps from the instance variable.</p>
                </feedback>
            </choice>
</choices>

    </exercise>


            <p>At this point you should be able to answer the following questions: What are the instance variables (at least 4!) that you need for the StepTracker class? What are the data types for each instance variable?</p>

        <p><term>Part b.</term>  Writing the Class Header and Constructor</p>
<exercise label="stepTrackerCode1">
    <statement>
            <p>Write the first draft of the class StepTracker below with the class name, the instance variables, and the constructor with a parameter for the minimum number of steps threshold for active days. Make sure it compiles.</p>

    </statement>
    <program xml:id="stepTrackerCode1_editor" interactive="activecode" language="java">

        <input>
// Write class name here

{
   // write instance variable declarations here


   // write the constructor with a parameter here


   public static void main(String[] args)
   {
      StepTracker tr = new StepTracker(10000);
   }
}
        </input>
<tests>
import static org.junit.Assert.*;
 import org.junit.*;;
 import java.io.*;
 public class RunestoneTests extends CodeTestHelper
 {
   @Test
   public void test1(){
     //check class name
     boolean passed = checkCodeContains("correct class heading", "public class StepTracker");
     assertTrue(passed);

   }

   @Test
   public void test2(){
      //constructor with 1 parameter for threshold minSteps
      String args = "int";
      String results = checkConstructor(args);

      boolean passed = getResults("pass", results, "Checking constructor with one int argument");
      assertTrue(passed);

   }

   @Test
   public void test3(){
         //check int - declaration of instance variables and parameter in constructor
         String actual = testPrivateInstanceVariables();
         String expected = "4 Private";

         boolean passed = getResults(expected, actual, "Checking declaration of instance variables");
         assertTrue(passed);

   }
 }
</tests>

    </program>
</exercise>
            
    <p><term>Part c.</term> Writing the Accessor Method activeDays</p>
            <p>This problem asks you to write a simple accessor method called <term>activeDays</term> which returns the number of active days (which should be an instance variable) for 1 point.</p>
            <p>Remember that accessor methods usually look like the following:</p>
            <program language="java"><input>
class ExampleClass
{
  //Instance variable declaration
  private typeOfVar varName;

  // Accessor method template
  public typeOfVar getVarName()
  {
     return varName;
  }
}
</input></program>
             <p>Answering the multiple choice problem will help you determine the accessor method header.</p>

    <exercise label="steptracker-accessor-header">
        <statement>

                <p>Which of the following is a good method header for the accessor method activeDays()?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>public void activeDays()</p>
                </statement>
                <feedback>
                    <p>Accessor methods need a return type since they return the value of an instance variable or a value calculated from instance variables.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>private void activeDays()</p>
                </statement>
                <feedback>
                    <p>Accessor methods should not be private.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>public int activeDays(int numSteps)</p>
                </statement>
                <feedback>
                    <p>Accessor methods do not usually take parameters.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>public void activeDays(int numSteps)</p>
                </statement>
                <feedback>
                    <p>Accessor methods need a return type since they return the value of an instance variable or a value calculated from instance variables, and  they do not usually have a parameter.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>public int activeDays()</p>
                </statement>
                <feedback>
                    <p>Correct, accessor methods are public, have a return type, and no parameter.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

<exercise label="stepTrackerCode2">
    <statement>
            <p>Copy the code from your first draft of the class StepTracker above  with the instance variables and constructor. Write the accessor methods <term>activeDays</term> which returns the number of active days.</p>

    </statement>
    <program xml:id="stepTrackerCode2_editor" interactive="activecode" language="java">

        <input>
public class StepTracker
{
   // copy the instance variable declarations here


   // copy the constructor with a parameter here

   // Write the accessor method activeDays() here
   // @return activeDays

   public static void main(String[] args)
   {
      StepTracker tr = new StepTracker(10000);
      System.out.println(tr.activeDays()); // returns 0. No data have been recorded yet.
   }
}
        </input>
<tests>
import static org.junit.Assert.*;
 import org.junit.*;;
 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
    @Test
   public void testMain() throws IOException
   {
     String output = getMethodOutput("main");
     String expect = "0\n";
     boolean passed = getResults(expect, output, "Expected output from main");
     assertTrue(passed);
   }

   @Test
   public void checkCodeContains1(){
     //check accessor method activeDays()
     boolean passed = checkCodeContains("activeDays() method", "public int activeDays()");
     assertTrue(passed);

   }

   @Test
   public void checkCodeContains2(){
      //check that activeDays() returns a value
       boolean passed = checkCodeContains("return");
     assertTrue(passed);

   }
 }
</tests>

    </program>
</exercise>
            
    <p><term>Part d.</term>  Writing the Mutator Method addDailySteps</p>
            <p>This problem asks you to write a more complex mutator method called addDailySteps worth 3 points.</p>
            <p>Remember that mutator methods often look like the following:</p>
            <program language="java"><input>
class Example
{
    //Instance variable declaration
    private typeOfVar varName;

    // Mutator method template
    public void changeVarName(typeOfVar newValue)
    {
       // an instance variable is changed through = or an operator like +=, -=, ++, etc.
       varName = newValue;
    }
}
</input></program>
           <p>Answering the multiple choice problem will help you determine the mutator method header.</p>

    <exercise label="steptracker-mutator-header">
        <statement>

                <p>Which of the following is a good method header for the mutator method addDailySteps?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>public void addDailySteps()</p>
                </statement>
                <feedback>
                    <p>Mutator methods take a parameter to change the value of an instance variable.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>private void addDailySteps()</p>
                </statement>
                <feedback>
                    <p>Mutator methods should not be private.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>public int addDailySteps(int numSteps)</p>
                </statement>
                <feedback>
                    <p>Mutator methods do not usually return a value.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>public void addDailySteps(int numSteps)</p>
                </statement>
                <feedback>
                    <p>Correct, mutator methods are public with a void return type and take a parameter to change the value of an instance variable.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>private int addDailySteps()</p>
                </statement>
                <feedback>
                    <p>Mutator methods should not be private and should take a parameter to change the value of an instance variable.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
            <p>The code for this mutator method is a little more complex than the template above, because it needs to change more than 1 instance variable. Notice the comments in the sample code execution:</p>
           
           <table>
           <tabular halign="left" top="major" bottom="minor">
          <col width="25%"/>
          <col width="25%"/>
          <col width="30%"/>
    <row header="yes" bottom="minor" >
      <cell>Statements and Expressions	</cell>
      <cell>Value Returned (blank if no value)</cell>
      <cell>Comment</cell>
    </row>
    <row>
        <cell><c>tr.addDailySteps(5000);</c></cell>
        <cell></cell>
        <cell>This is too few steps for the day to be considered active.</cell>
    </row>
<row>
        <cell><c>tr.activeDays();</c></cell>
        <cell>0</cell>
        <cell>No day had at least 10,000 steps.</cell>
    </row>
<row>
        <cell><c>tr.addDailySteps(13000);</c></cell>
        <cell></cell>
        <cell>This represents an active day.</cell>
    </row>
<row>
        <cell><c>tr.activeDays();</c></cell>
        <cell>1</cell>
        <cell><line>Of the three days for which step data were entered,</line><line> one day had at least 10,000 steps.</line></cell>
    </row>

    </tabular>
    </table>
           
    
            <p>Consider each of your instance variables and whether this method should change them. The problem which you can reveal below may help you.</p>

    <exercise label="steptracker-mutator-changes">
        <statement>

                <p>Which of the following values does the mutator method addDailySteps need to change? (check all that apply)</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>the minimum number of steps that must be taken for a day to be considered active</p>
                </statement>
                <feedback>
                    <p>The minimum is set by the constructor.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>the number of active days</p>
                </statement>
                <feedback>
                    <p>Yes, addDailySteps should determine whether the number of steps given in its parameter is an active day and if so, change this variable.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>the average number of steps per day</p>
                </statement>
                <feedback>
                    <p>This method does not have to calculate the average.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>the total number of steps taken</p>
                </statement>
                <feedback>
                    <p>Yes, addDailySteps should add the number of steps taken that day in its parameter to the total.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>number of days tracked</p>
                </statement>
                <feedback>
                    <p>Yes, addDailySteps is called each day and can change the variable for the number of days being tracked.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

<exercise label="stepTrackerCode3">
    <statement>
            <p>Copy the code from your draft of the class StepTracker above  with the class name, the instance variables, constructor, and accessory method. Write the mutator method <term>addDailySteps</term> which takes a parameter and adds it to the appropriate instance variable and changes other instance variables appropriately.</p>

    </statement>
    <program xml:id="stepTrackerCode3_editor" interactive="activecode" language="java">

        <input>
public class StepTracker
{
   // copy the instance variable declarations here


   // copy the constructor with a parameter here

   // copy the accessor method activeDays() here.

   // Write the mutator method addDailySteps here.
   // @param number of steps taken that day



   public static void main(String[] args)
   {
      StepTracker tr = new StepTracker(10000);
      System.out.println(tr.activeDays()); // returns 0. No data have been recorded yet.
      tr.addDailySteps(9000); // This is too few steps for the day to be considered active.
      tr.addDailySteps(5000); // This is too few steps for the day to be considered active.
      System.out.println(tr.activeDays()); // returns 0.  No day had at least 10,000 steps.
      tr.addDailySteps(13000); // This represents an active day.
      System.out.println(tr.activeDays());  // returns 1. Of the three days for which step data were entered, one day had at least 10,000 steps.
   }
}
        </input>
<tests>
import static org.junit.Assert.*;
 import org.junit.*;;
 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
  @Test
  public void testMain() throws IOException
   {
     String output = getMethodOutput("main");
     String expect = "0\n0\n1\n";
     boolean passed = getResults(expect, output, "Expected output from main");
     assertTrue(passed);
   }

   @Test
   public void checkCodeContains1()
   {
     //check mutator method addDailySteps()
     boolean passed = checkCodeContains("addDailySteps method with parameter", "public void addDailySteps(int");
     assertTrue(passed);

   }

  @Test
   public void checkCodeContains2()
   {
     //check mutator method addDailySteps() contains "if"
     boolean passed = checkCodeContains("if statement","if (");
     assertTrue(passed);
   }
 }
</tests>

    </program>
</exercise>
            
    <p><term>Part d.</term>  Writing the Accessor Method averageSteps</p>
            <p>This problem asks you to write a more complex accessor method which uses the instance variables to calculate and return the <term>averageSteps</term> for 2 points. This method returns the average number of steps per day, calculated by dividing the total number of steps taken by the number of days tracked.</p>
            <p>Answering the multiple choice problem will help you determine the accessor method header.</p>

    <exercise label="steptracker-accessor-header2">
        <statement>

                <p>Which of the following is a good method header for the accessor method averageSteps() which returns the average number of steps per day?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>public void averageSteps()</p>
                </statement>
                <feedback>
                    <p>Accessor methods need a return type since they return the value of an instance variable or a value calculated from instance variables.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>public int averageSteps()</p>
                </statement>
                <feedback>
                    <p>When you compute an average using division, you usually end up with a double value, not int.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>public double averageSteps()</p>
                </statement>
                <feedback>
                    <p>Correct, accessor methods are public, have a return type, and no parameter. In this case, returning an average requires a double return type.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>public void averageSteps(int numSteps)</p>
                </statement>
                <feedback>
                    <p>Accessor methods need a return type since they return the value of an instance variable or a value calculated from instance variables, and  they do not usually have a parameter.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>public int averageSteps(int numSteps)</p>
                </statement>
                <feedback>
                    <p>Accessor methods do not usually take parameters.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
            <p>The complex accessor method <term>averageSteps()</term> must calculate the average number of steps from your instance variables. Notice that the first time it is called in the sample code execution, it returns 0.0 since there are no steps recorded. This avoids a divide by 0 error.</p>
             <table><tabular halign="left" top="major" bottom="minor">
    <row header="yes" bottom="minor" >
      <cell>Statements and Expressions	</cell>
      <cell>Value Returned (blank if no value)</cell>
      <cell>Comment</cell>
    </row>
<row>
        <cell><c>tr.averageSteps();</c></cell>
        <cell>0.0</cell>
        <cell><line>When no step data have been recorded,</line><line> the averageSteps method returns 0.0.</line></cell>
    </row>

    </tabular>
    </table>
           

<exercise label="stepTrackerCode4">
    <statement>
            <p>Copy the code from your draft of the class StepTracker above  with the instance variables, constructor, accessor and mutator methods. Write the accessor method <term>averageSteps</term> which returns the average number of steps per day, calculated by dividing the total number of steps taken by the number of days tracked.</p>

    </statement>
    <program xml:id="stepTrackerCode4_editor" interactive="activecode" language="java">

        <input>
public class StepTracker
{
   // copy the instance variable declarations here


   // copy the constructor with a parameter here

   // copy the accessor method activeDays() here


   // copy the mutator method addDailySteps here.
   // @param number of steps taken that day


   //Write the accessor method averageSteps() here
   // @return average steps calculated by dividing the total number of steps taken by the number of days tracked (which should be instance variables). Make sure you use type casting to double!




   public static void main(String[] args)
   {
      StepTracker tr = new StepTracker(10000);
      System.out.println(tr.activeDays()); // returns 0. No data have been recorded yet.
      System.out.println(tr.averageSteps()); // returns 0.0. When no step data have been recorded, the averageSteps method returns 0.0.
      tr.addDailySteps(9000); // This is too few steps for the day to be considered active.
      tr.addDailySteps(5000); // This is too few steps for the day to be considered active.
      System.out.println(tr.activeDays()); // returns 0.  No day had at least 10,000 steps.
      System.out.println(tr.averageSteps()); // returns 7000.0 The average number of steps per day is (14000 / 2).
      tr.addDailySteps(13000); // This represents an active day.
      System.out.println(tr.activeDays());  // returns 1. Of the three days for which step data were entered, one day had at least 10,000 steps.
      System.out.println(tr.averageSteps()); // returns 9000.0. The average number of steps per day is (27000 / 3).
      tr.addDailySteps(23000); // This represents an active day.
      tr.addDailySteps(1111); // This is too few steps for the day to be considered active.
      System.out.println(tr.activeDays()); // returns 2. Of the five days for which step data were entered, two days had at least 10,000 steps.
      System.out.println(tr.averageSteps()); // returns 10222.2. The average number of steps per day is (51111 / 5).
   }
}
        </input>
<tests>
import static org.junit.Assert.*;
 import org.junit.*;;
 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
  @Test
  public void testMain() throws IOException
   {
     String output = getMethodOutput("main");
     String expect = "0\n0.0\n0\n7000.0\n1\n9000.0\n2\n10222.2\n";
     boolean passed = getResults(expect, output, "Expected output from main. Make sure you used casting to double for the last result!");
     assertTrue(passed);
   }

   @Test
   public void checkCodeContains1()
   {
     //check mutator method averageSteps()
     boolean passed = checkCodeContains("averageSteps() method","public double averageSteps()");
     assertTrue(passed);

   }

   @Test
    public void checkCodeZero() {
        StepTracker tr = new StepTracker(10000);
        double average = tr.averageSteps();

        boolean passed = getResults(0.0, average, "averageSteps() returns 0.0 when no days recorded");
        assertTrue(passed);
    }

    @Test
    public void checkCodeDoubleResult() {
        StepTracker tr = new StepTracker(10000);
        tr.addDailySteps(9000); // This is too few steps for the day to be considered active.
        tr.addDailySteps(5000);
        tr.addDailySteps(13000);
        tr.addDailySteps(23000);
        tr.addDailySteps(1111);
        double average = tr.averageSteps();

        boolean passed = getResults(10222.2, average, "averageSteps() returns 10222.2 (no integer division)");
        assertTrue(passed);
    }

   }
</tests>

    </program>
</exercise>
         
</section>
