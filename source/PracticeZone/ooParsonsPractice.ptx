<?xml version="1.0"?>
<!-- Generated by Docutils 0.19 -->
<section xml:id="_classes-mixed-up">
  <title>Mixed Up Code Practice</title>
  <p>Try to solve each of the following. Click the <em>Check Me</em> button to check each solution.  You will be told if your solution is too short, has a block in the wrong order, or you are using the wrong block.  Some of the problems have an extra block or two that arenâ€™t needed in the correct solution.  Try to solve these on your phone or other mobile device!</p>
  <exercises>


  <exercise label="oopex4muc" numbered="yes" adaptive="yes" indentation="show" language="java"><statement>
        <p>The following program should create a Person class with a constructor that takes in a String and an integer value and intilaizes its fields name and id. But, the blocks have been mixed up and may include extra blocks that are not needed in a correct solution. Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</p>
</statement>
<blocks>
<block order="2">
<cline>public class Person</cline>
<cline>{</cline>
<cline>   private String name;</cline>
<cline>   private int id;</cline>
</block>
<block order="4" correct="yes">
<cline>   public Person(String name, int id)</cline>
<cline>   {</cline>
<cline>     this.name = name;</cline>
<cline>     this.id = id;</cline>
<cline>   }</cline>
</block>
<block order="4" correct="no">
<cline>   public Person()</cline>
<cline>   {</cline>
<cline>     this.name = name;</cline>
<cline>     this.id = id;</cline>
<cline>   }</cline>
</block>
<block order="3" correct="no">
<cline>   public Person(String name, int id)</cline>
<cline>   {</cline>
<cline>   </cline>  
<cline>   }</cline>
</block>
<block order="1" correct="no">
<cline>   public Person()</cline>
<cline>   {</cline>
<cline>     </cline>
<cline>   }</cline>
</block><block order="5">
<cline>} // end class</cline>
</block></blocks></exercise>

<exercise label="oopex5muc" numbered="yes" adaptive="yes" indentation="show" language="java"><statement>
        <p>The following program should create a Person class with a default constructor. But, the blocks have been mixed up and may include extra blocks that are not needed in a correct solution. Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</p>
</statement>
<blocks>
<block order="2">
<cline>public class Person</cline>
<cline>{</cline>
<cline>   private String name;</cline>
<cline>   private int id;</cline>
</block>
<block order="4" correct="no">
<cline>   public Person(String name, int id)</cline>
<cline>   {</cline>
<cline>     this.name = name;</cline>
<cline>     this.id = id;</cline>
<cline>   }</cline>
</block>
<block order="3" correct="no">
<cline>   public Person(String name, int id)</cline>
<cline>   {</cline>
<cline>   </cline>  
<cline>   }</cline>
</block>
<block order="1" correct="yes">
<cline>   public Person()</cline>
<cline>   {</cline>
<cline>     </cline>
<cline>   }</cline>
</block><block order="5">
<cline>} // end class</cline>
</block></blocks></exercise>

    <exercise label="oopex2muc" numbered="yes" adaptive="yes" indentation="show" language="java"><statement>
        <p>The following program segment should create an empty Dog class that is a child of the Animal class. But, the blocks have been mixed up and may include extra blocks that are not needed in a correct solution. Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</p>
</statement>
<blocks><block order="1">
<cline>public class Dog extends Animal {</cline>
</block><block order="2" correct="no">
<cline>public Animal class Dog { </cline>
</block><block order="5" correct="no">
<cline>public class Animal extends Dog { </cline>
</block><block order="4" correct="no">
<cline>public class Dog implements Animal { </cline>
</block><block order="3">
<cline>} // end class</cline>
</block></blocks></exercise>
    <exercise label="oopex3muc" numbered="yes" adaptive="yes" indentation="show" language="java"><statement>
        <p>The following program should overload a void method talk with no parameters. But, the blocks have been mixed up and may include extra blocks that are not needed in a correct solution. Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</p>
</statement>
<blocks><block order="2">
<cline>public class GenericPerson</cline>
<cline>{</cline>
<cline>   public void talk()</cline>
<cline>   {</cline>
<cline>      System.out.println("Hello!");</cline>
<cline>   }</cline>
<cline>}</cline>
<cline>public class Person extends GenericPerson {</cline>
</block><block order="4">
<cline>     public void talk(String name) {</cline>
<cline>             System.out.println("Hello" + name);</cline>
<cline>     }</cline>
</block><block order="3" correct="no">
<cline>public String talk() {</cline>
<cline>     return "Hello!";</cline>
<cline>} </cline>
</block><block order="1" correct="no">
<cline>public char talk() {</cline>
<cline>     return 'y';</cline>
<cline>} </cline>
</block><block order="5">
<cline>} // end class</cline>
</block></blocks></exercise>




  </exercises>
</section>
