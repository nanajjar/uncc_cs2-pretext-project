<section xml:id="interfaces-implements">
   <!-- =========================================
       3. Implementing an Interface in a Class
       ========================================= -->
      <title> Implementing an Interface</title>
      <introduction>
        <p>
          Now that we have seen how interfaces define a contract with method signatures but no implementations, let's explore how a class can use an interface by implementing it.
          When a class implements an interface, it must provide concrete implementations for all the methods declared in the interface. 
          This ensures that any class following the interface adheres to the expected behavior.  Let's see how this works in practice.</p>
      </introduction>
      

       <subsection xml:id="subsec-interface-implementation">
    <title>Using <c>implements</c> in a Class Declaration</title>
    <p>When a class says <c>implements SomeInterface</c>, it promises to provide <em>all</em> the methods defined by that interface. Let's update our <c>MusicTrack</c> and <c>PodcastEpisode</c> classes to implement <c>Playable</c>:</p>
    <program language="java">
      <code>
public class MusicTrack implements Playable {

    /**
     * The @Override annotation tells the compiler:
     * "I'm implementing a method from the interface."
     * If you misspell the method, you'll get a warning.
     */
    @Override
    public void play() {
        System.out.println("Playing music...");
    }
}

public class PodcastEpisode implements Playable {

    @Override
    public void play() {
        System.out.println("Playing podcast...");
    }
}
      </code>
    </program>
    <p><term>@Override</term> isn't strictly required, but it's <strong>highly recommended</strong>. It <em>explicitly</em> signals your intent to Java, and if you mismatch the signature (like <c>pLay()</c> or <c>play(String s)</c>), the compiler immediately warns you.</p>
    <p>With <c>implements</c>, the compiler ensures you match <c>void play()</c> exactly. If you omit <c>play()</c>, or if you rename it to something else, you'll get a compile-time error. For example:</p>
    <program language="java">
      <code>
// WRONG EXAMPLE: Missing 'play()'
public class Audiobook implements Playable {
    // no method provided!
}
      </code>
      <output>
Audiobook.java:1: error: Audiobook is not abstract and does not override
abstract method play() in Playable
public class Audiobook implements Playable {
       ^
1 error
      </output>
    </program>
    <p>This error means "you promised to implement <c>play()</c>, but you didn't!" The compiler halts, forcing you to fix the issue before running. Once we add the required method, it compiles fine:</p>
    <program language="java">
      <code>
// Correct fix:
public class Audiobook implements Playable {

    @Override
    public void play() {
        System.out.println("Playing audiobook...");
    }
}
      </code>
    </program>
    <p><strong>What if I want partial implementation?</strong> Then you can declare your class <c>abstract</c>, 
    meaning it's not fully complete and can't be instantiated. 
    <em><strong>Important Note for Beginners:</strong></em> Abstract classes are a more advanced feature you'll learn later. 
    For now, if the compiler complains you haven't implemented all methods, simply add the missing ones to your class. 
    <em>In later chapters will explore abstract classes in more depth, so don't worry if this concept doesn't fully make sense yet.</em> 
    Just focus on implementing all the interface methods in your regular classes for now.</p>
    <p><strong>Another mismatch example: Extra parameters or wrong return type</strong></p>
    <program language="java">
      <code>
public interface Playable {
    void play();
}

public class BadImplementation implements Playable {

    // This tries to use an extra parameter:
    @Override
    public void play(String track) { // but interface expects play()
        System.out.println("Attempting to play " + track);
    }
}
      </code>
      <output>
BadImplementation.java:1: error: BadImplementation is not abstract
and does not override abstract method play() in Playable
public class BadImplementation implements Playable {
       ^
1 error
      </output>
    </program>
    <p>The compiler clearly says "does not override abstract method <c>play()</c> in Playable," because <c>play(String)</c> is not the same signature as <c>play()</c>. Java's strictness ensures consistent method contracts.</p>
 
 </subsection>
 <!-- =========================================
       4. Methods That Use Interfaces
       ========================================= -->
  <subsection xml:id="interfaces-in-methods">
    <title>Writing a Method That Expects an Interface</title>
    <p>Now that <c>MusicTrack</c> and <c>PodcastEpisode</c> both implement <c>Playable</c>, let's simplify <c>playMedia</c> dramatically. Instead of accepting <c>Object media</c> and guessing its type, we can require a <c>Playable</c> parameter:</p>
    <program language="java">
      <code>
public static void playMedia(Playable media) {
    // Because 'media' implements Playable, it must have 'play()'.
    media.play(); 
}

public static void main(String[] args) {
    MusicTrack music = new MusicTrack();
    PodcastEpisode podcast = new PodcastEpisode();

    // Both are valid 'Playable' objects, so we can pass them in directly:
    playMedia(music);   // prints "Playing music..."
    playMedia(podcast); // prints "Playing podcast..."
}
      </code>
    </program>
    <p>No casting, no <c>instanceof</c>—just <c>media.play()</c>. If we later add:</p>
    <program language="java">
      <code>
public class Audiobook implements Playable {
    @Override
    public void play() {
        System.out.println("Playing audiobook...");
    }
}

// ... in main:
Audiobook book = new Audiobook();
playMedia(book); // prints "Playing audiobook..."
      </code>
    </program>
    <p>We don't need to modify the <c>playMedia</c> method at all. It automatically works with any new class that implements <c>Playable</c>. That's the power of interfaces for easily extending your code—<em>no need</em> to rewrite or expand older methods. If you created a new class <c>Livestream</c> implementing <c>Playable</c>, you could call <c>playMedia(new Livestream())</c> with zero changes elsewhere!</p>
    <p><strong>Real-World Analogy (Polymorphism):</strong> Think of a universal "Play" button that works on different devices: a DVD player, a streaming service, or a music player. Each device does something unique when you press "Play," but from your perspective, it's a single button. That's exactly what an interface method does in code: one method name (<c>play()</c>) triggers different implementations depending on the actual class or device.</p>
  </subsection>


<exercise xml:id="mc-interface-implementation">
        <title>Interface Implementation</title>
        <statement>
          <p>
            What happens if a class incorrectly implements an interface method by adding extra parameters or using a different return type?
          </p>
        </statement>
        <choices randomize="yes">
          <choice>
            <statement>
              <p>
                 The program will still compile, but the interface method will not be considered overridden.  
              </p>
            </statement>
            <feedback>
            Java enforces strict adherence to interface method signatures. If the signature does not match, the compiler does not allow the implementation, and the program fails to compile.
            </feedback>
          </choice>
          <choice correct="yes">
            <statement>
              <p>
                The program will not compile because the method signature must exactly match the interface definition.
              </p>
            </statement>
            <feedback>
            When implementing an interface, the method signature must match exactly (same method name, parameters, and return type). If extra parameters are added or the return type is changed, the method does not correctly override the interface method, causing a compilation error.
            </feedback>
          </choice>
          <choice>
            <statement>
              <p>
                The program will compile, but the extra parameters will be ignored.
              </p>
            </statement>
            <feedback>
            The Java compiler does not ignore extra parameters in method implementations. If an interface specifies a method signature, an implementation must match it exactly, otherwise, a compilation error occurs.
            </feedback>
          </choice>
          <choice>
            <statement>
              <p>
                The program will compile only if the method has a compatible return type.
              </p>
            </statement>
            <feedback>
            The return type must exactly match, except in cases of covariant return types (where the return type in the subclass is a subclass of the original return type). However, primitive return types like int and double are not covariant, so an incompatible return type will cause a compilation error.
            </feedback>
          </choice>
        </choices>
      </exercise>
      <exercise xml:id="mcq-interface-implementation2">
             <statement> <p>Consider the following Java interface and class implementation:

</p>
              <program language="java">
                <code>
interface Calculator {
    int add(int a, int b);
}

class MyCalculator implements Calculator {
   public double add(int a, int b) {
        return a + b;
    }
}
                </code>
              </program>
The code does not compile. How can this issue be fixed?  

        </statement>
          <choices randomize="yes">
          <choice>
            <statement>
              <p>
                Modify <c>Calculator</c> so that <c>add(int, int)</c> returns <c>double</c> instead of <c>int</c>.
              </p>
            </statement>
            <feedback>
              <p>
                While this change would allow MyCalculator to compile, it alters the interface definition, which could affect other classes implementing Calculator. Interfaces should be designed carefully to avoid breaking existing implementations.
              </p>
            </feedback>
          </choice>
          <choice correct="yes">
            <statement>
              <p>
                Change the return type of <c>add(int, int)</c> in <c>MyCalculator</c> to <c>int</c>.
              </p>
            </statement>
            <feedback>
              <p>
                To correctly implement an interface method, the return type must match exactly. Since <c>Calculator</c> defines <c>add(int, int)</c> with an <c>int</c> return type, <c>MyCalculator</c> must also return an <c>int</c>. Changing the method to return <c>int</c> ensures proper overriding and successful compilation.
              </p>
            </feedback>
          </choice>
          <choice>
            <statement>
              <p>
                 Use method overriding with <c>@Override</c> and let the compiler infer the correct return type.
              </p>
            </statement>
            <feedback>
              <p>
                The <c>@Override</c> annotation does not change the return type rules. The compiler does not "infer" a return type; the method must explicitly match the interface's method signature, including its return type.
              </p>
            </feedback>
          </choice>
          <choice>
            <statement>
              <p>
                Overload the add method in <c>MyCalculator</c> by adding another version with an <c>int</c> return type.
              </p>
            </statement>
            <feedback>
              <p>
                Overloading (having multiple methods with the same name but different parameters or return types) does not fix the issue. The class must override the method from the interface, not create an additional method.
              </p>
            </feedback>
          </choice>
          </choices>
          </exercise>
  </section>
