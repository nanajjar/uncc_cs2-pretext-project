<?xml version="1.0"?>
<!-- Generated by Docutils 0.19 -->
<section>
    <title>Two-way Selection: if-else Statements</title>
    <p>What if you want to pick between two possibilities?  If you are trying to decide between a couple of things to do, you might flip a coin and do one thing if it lands as heads and another if it is tails.  In programming, you can use the <term>if</term> keyword followed by a statement or block of statements and then the <term>else</term> keyword also followed by a statement or block of statements.</p>
    <program language="java">
    <input>
// A block if/else statement
if (boolean expression)
{
   statement1;
   statement2;
}
else
{
   do other statement;
   and another one;
}
</input>
  </program>
    <program language="java">
    <input>
// A single if/else statement
if (boolean expression)
    Do statement;
else
    Do other statement;
</input>
  </program>
    <p>The following flowchart demonstrates that if the condition (the boolean expression) is true, one block of statements is executed, but if the condition is false, a different block of statements inside the else clause is executed.</p>
    <figure align="center" xml:id="id1-20">
    <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 1: The order that statements execute in a conditional with 2 options: if and else</caption>
    <image source="ch-javaintro/Condition-two.png" width="50%"/>
  </figure>
    <note>
            <p>The else will only execute if the condition is false.</p>
        </note>
    <p> <term>Check your understanding</term></p>
    <p>If/else statements can also be used with relational operators and numbers like below. If your code has an if/else statement, you need to test it with 2 test-cases to make sure that both parts of the code work.</p>
    <p> <term>Coding Exercise</term></p>
    <p> <term>Coding Exercise</term></p>
  <subsection xml:id="_nested-ifs-and-dangling-else">
            <title>Nested Ifs and Dangling Else</title>
            <p>If statements can be nested inside other if statements. Sometimes with nested ifs we find a <term>dangling else</term> that could potentially belong to either if statement. The rule is that the else clause will always be a part of the closest if statement in the same block of code, regardless of indentation.</p>
            <program language="java"><input>
// Nested if with dangling else
if (boolean expression)
   if (boolean expression)
      Do statement;
   else  // belongs to closest if
      Do other statement;
</input></program>
            <p> <term>Coding Exercise</term></p>

<exercise label="danglingelse">
    <statement>
            <p>Try the following code with a dangling else. Notice that the indentation does not matter to the compiler (but you should make it your habit to use good indentation just as a best practice). How could you get the else to belong to the first if statement?</p>

    </statement>
    <program xml:id="danglingelse_editor" interactive="activecode" language="java">

        <input>
public class DanglingElseTest
{
   public static void main(String[] args)
   {
       boolean sunny = true;
       boolean hot = false;
       if (sunny)
         if (hot)
             System.out.println("Head for the beach!");
        else // Which if is else attached to??
       System.out.println("Bring your umbrella!");
   }
}
        </input>
<tests>
import static org.junit.Assert.*;
 import org.junit.*;;
 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
     @Test
     public void testMain() throws IOException
     {
         String output = getMethodOutput("main");
         String expect = "";
         boolean passed = getResults(expect, output, "Expected no output from main");
         assertTrue(passed);
     }
 }
</tests>

    </program>
</exercise>
            <p>You can use curly brackets { } to enclose a nested if and have the else clause belong to the the top level if clause like below:</p>
            <program language="java"><input>
// Nested if with dangling else
if (boolean expression)
{
   if (boolean expression)
      Do this statement;
}
else  // belongs to first if
  Do that statement;
</input></program>
        </subsection>
  
  <subsection xml:id="_summary-18">
            <title>Summary</title>
            <p><ul>
                <li>
                    <p>If statements can be followed by an associated <term>else</term> part to form a 2-way branch:</p>
                </li>
            </ul></p>
            <program language="java"><input>
if (boolean expression)
{
    Do statement;
}
else
{
    Do other statement;
}
</input></program>
            <p><ul>
                <li>
                    <p>A two way selection (if/else) is written when there are two sets of statements: one to be executed when the Boolean condition is true, and another set for when the Boolean condition is false.</p>
                </li>
                <li>
                    <p>The body of the “if” statement is executed when the Boolean condition is true, and the body of the “else” is executed when the Boolean condition is false.</p>
                </li>
                <li>
                    <p>Use 2 test-cases to find errors or validate results to try both branches of an if/else statement.</p>
                </li>
                <li>
                    <p>The else statement attaches to the closest if statement.</p>
                </li>
            </ul></p>
        </subsection>
  <exercises>
    <exercise label="lccb2">
    <statement>
        <p>Try the following code. If <c>isHeads</c> is true it will print <c>Let's go to the game</c> and then <c>after conditional</c>.</p>

    </statement>
    <program xml:id="lccb2_editor" interactive="activecode" language="java">

        <input>
public class Test2
{
   public static void main(String[] args)
   {
     boolean isHeads = true;
     if (isHeads)
     {
         System.out.println("Let's go to the game");
     }
     else
     {
         System.out.println("Let's watch a movie");
     }
     System.out.println("after conditional");
   }
}
        </input>
<tests>
import static org.junit.Assert.*;
 import org.junit.*;;
 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
     @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Let's go to the game\nafter conditional";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

 }
</tests>

    </program>
</exercise>
    <exercise label="3_3_1_falseElse">
            <statement>
    <p>3-3-2: Try changing the code above to <c>boolean isHeads = false;</c>.  What line will be printed before the <c>after conditional</c>? <var/>  </p></statement><setup><var><condition string="^\s*^Let's\s+watch\s+a\s+movie$\s*$"><feedback><p>Correct.  If the boolean value is false, the statement following the else will execute</p></feedback></condition><condition string="^\s*.*\s*$"><feedback><p>Try it and see</p></feedback></condition></var></setup></exercise>
    <exercise label="licenseifelse">
    <statement>
        <p>Run the following code to see what it prints out when the variable age is set to the value 16. Change the variable age’s value to 15 and then run it again to see the result of the print statement in the else part.
            Can you change the if-statement to indicate that you can get a license at age 15 instead of 16? Use 2 test cases for the value of age to test your code to see the results of both print statements.</p>

    </statement>
    <program xml:id="licenseifelse_editor" interactive="activecode" language="java">

        <input>
public class DriversLicenseTest
{
   public static void main(String[] args)
   {
     int age = 16;
     if (age &gt;= 16)
     {
         System.out.println("You can get a driver's license in most states!");
     }
     else
     {
         System.out.println("Sorry, you need to be older to get a driver's license.");
     }
   }
}
        </input>
<tests>
import static org.junit.Assert.*;
 import org.junit.*;;
 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
      @Test
    public void testCodeContains() throws IOException
    {
        String target = "age &gt;= 15";
        boolean passed = checkCodeContains("check age &gt;= 15", target);
        assertTrue(passed);
    }
 }
</tests>

    </program>
</exercise>
    <exercise label="ifelseevenOdd" numbered="yes" adaptive="yes" indentation="show" language="python"><statement>
        <p>The following program should print out “x is even” if the remainder of x divided by 2 is 0 and “x is odd” otherwise, but the code is mixed up.   Drag the blocks from the left and place them in the correct order on the right.  Click on Check Me to see if you are right.</p>
</statement>
<blocks><block order="9">
<cline>public class EvenOrOdd</cline>
<cline>{</cline>
</block><block order="8">
<cline>   public static void main(String[] args)</cline>
<cline>   {</cline>
<cline>   </cline>
</block><block order="4">
<cline>     int x = 92;</cline>
<cline>     </cline>
</block><block order="3">
<cline>     if (x % 2 == 0)</cline>
<cline>     </cline>
</block><block order="6">
<cline>     {</cline>
<cline>        System.out.println("x is even");</cline>
<cline>     }</cline>
<cline>     </cline>
</block><block order="1">
<cline>     else</cline>
<cline>     </cline>
</block><block order="2">
<cline>     {</cline>
<cline>        System.out.println("x is odd");</cline>
<cline>     }</cline>
<cline>     </cline>
</block><block order="7">
<cline>    }</cline>
<cline>    </cline>
</block><block order="5">
<cline> }</cline>
</block></blocks></exercise>
<!-- ToDO - Update question prompt -->
    <exercise label="scoreifelse">
    <statement>
        <p>Try the following code. Add an else statement to the if statement that prints out “Good job!” if the score is greater than 9. 
        Change the value of score to test it. Can you change the boolean test to only print out “Good job” if the score is greater than 20?</p>

    </statement>
    <program xml:id="scoreifelse_editor" interactive="activecode" language="java">

        <input>
public class ScoreTest
{
   public static void main(String[] args)
   {
       int score = 8;
       if (score &lt;= 9)
       {
         System.out.println("Try for a higher score!");
       }
   }
}
        </input>
<tests>
import static org.junit.Assert.*;
 import org.junit.*;;
 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
     @Test
     public void testChangedCode() {
         String origCode = "public class ScoreTest   {      public static void main(String[] args)      {        int score = 8;        if (score &lt;= 9)         {            System.out.println(\"Try for a higher score!\");        }      }} ";

         boolean changed = codeChanged(origCode);
         assertTrue(changed);
     }
     @Test
     public void testCodeContainsElse(){
       boolean ifCheck2 = checkCodeContains("else", "else");
       assertTrue(ifCheck2);
     }
     @Test
     public void testCodeContains(){
         boolean ifCheck1 = checkCodeContains("if testing with 20", "if (score &lt;= 20)");
         assertTrue(ifCheck1);
     }
 }
</tests>

    </program>
</exercise>
  </exercises>
</section>
