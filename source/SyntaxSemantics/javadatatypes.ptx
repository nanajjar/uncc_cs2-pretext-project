<?xml version="1.0"?>
<section xml:id="ch1_javaDataTypes">
  <title>Java Data Types</title>

  <subsection xml:id="ch1_javaDataTypes_numeric">
    <title>Numeric</title>

    <p>
      One of the great things about Python is that all of the basic data types are objects.
      Integers are objects, floating point numbers are objects, lists are objects, everything.
      In Java that is not the case.
      In Java, some of the most basic data types like integers and floating point numbers are not objects.
      The benefit of having these primitive data types be non-objects is that operations on the primitives are fast.
      The problem is that it became difficult for programmers to combine objects and non-objects in the way that we do in Python.
      So, eventually all the non-object primitives ended up with Objectified versions.
    </p>

    <table>
      <title>A simple table</title>
      <tabular halign="center">
        <row header="yes" bottom="minor" >
          <cell>Primitive</cell>
          <cell>Object</cell>
        </row>
        <row>
          <cell>int</cell>
          <cell>Integer</cell>
        </row>
        <row>
          <cell>float</cell>
          <cell>Float</cell>
        </row>
        <row>
          <cell>double</cell>
          <cell>Double</cell>
        </row>
        <row>
          <cell>char</cell>
          <cell>Char</cell>
        </row>
        <row>
          <cell>boolean</cell>
          <cell>Boolean</cell>
        </row>
      </tabular>
    </table>

    <p>
      In older versions of Java, it was the programmers responsibility to convert back and forth from a primitive to an object whenever necessary.
      This process of converting a primitive to an object was called "boxing."
      The reverse process is called "unboxing."
      Starting with Java 5
      <fn>
        New Java versions are released periodically; always refer to the documentation to ensure your programs are compatible with the version you are using.
      </fn>,
      the compiler became smart enough to know when to convert back and forth and is called "autoboxing."
      In this book, we will typically use the Object version of all the numeric data types and let the compiler do its thing.
    </p>

    <p>
      Let's look at a simple Python function which converts a Fahrenheit temperature to Celsius.
      If this program were run on the command-line, you would enter the temperature when prompted -- the Javascript pop-up for input is only an artifact of the digital textbook.
    </p>
    <program language="python">
      <code>
        def main():
            fahr = int(input("Enter the temperature in F: "))
            cel = (fahr - 32) * 5.0/9.0
            print("the temperature in C is: ", cel)

        main()
      </code>
    </program>

    <p>
      Next, lets look at the Java equivalent.
      If this program were run on the command-line, you would enter the temperature when prompted -- the "Input for Program" text box is only an artifact of the digital textbook.
    </p>

    <program language="java">
      <code>
        import java.util.Scanner;

        public class TempConv {
            public static void main(String[] args) {
                Double fahr;
                Double cel;
                Scanner in;

                in = new Scanner(System.in);
                System.out.println("Enter the temperature in F: ");
                fahr = in.nextDouble();

                cel = (fahr - 32) * 5.0/9.0;
                System.out.println("The temperature in C is: " + cel);
            }
        }
      </code>
    </program>

    <p>
      There are several new concepts introduced in this example.
      We will look at them in the following order:
      <ul>
        <li>
          <p>
            Import
          </p>
        </li>
        <li>
          <p>
            Variable Declaration
          </p>
        </li>
        <li>
          <p>
            Input/Output and the Scanner Class
          </p>
        </li>
      </ul>
    </p>

    <subsubsection xml:id="ch1_javaDataTypes_import">
      <title>Import</title>

      <p>
        In Java, you can use any class that is available without having to import the class, subject to two very important conditions:
        <ol>
          <li>
            <p>
              The <c>javac</c> and <c>java</c> commands must know that the class exists.
            </p>
          </li>
          <li>
            <p>
              You must use the full name of the class.
            </p>
          </li>
        </ol>

        Your first question might be how do the <c>java</c> and <c>javac</c> commands
        know that certain classes exist.
        The answer is the following:
        <ol>
          <li>
            <p>
              Java knows about all the classes that are defined in .java and .class files in your current working directory.
            </p>
          </li>
          <li>
            <p>
              Java knows about all the classes that are shipped with Java.
            </p>
          </li>
          <li>
            <p>
              Java knows about all the classes that are included in your <c>CLASSPATH</c> environment variable.
              Your <c>CLASSPATH</c> environment variable can name two kinds of structures.
            </p>
            <ol>
              <li>
                <p>
                  A .jar file that contains Java classes.
                </p>
              </li>
              <li>
                <p>
                  Another directory that contains Java class files.
                </p>
              </li>
            </ol>
          </li>
        </ol>
      </p>

      <p>
        You can think of the import statement in Java as working a little bit like the <c>from module import xxx</c> statement in Python.
        However, behind the scenes, the two statements actually do very different things.
        The first important difference to understand is that the class naming system in Java is very hierarchical.
        The *full* name of the Scanner class is really <c>java.util.Scanner</c>.
        You can think of this name as having two parts: The first part <c>java.util</c> is called the **package** and the last part is the **class**.
        We'll talk more about the class naming system a bit later.
        The second important difference is that it is the Java class loader's responsibility to load classes into memory, not the import statement's.
      </p>
      <p>
        So, what exactly does the import statement do?
        What it does is tell the compiler that we are going to use a shortened version of the class's name.
        In this example we are going to use the class <c>java.util.Scanner</c> but we can refer to it as just <c>Scanner</c>.
        We could use the <c>java.util.Scanner</c> class without any problem and without any import statement, provided that we always referred to it by its full name.
        As an experiment, you may want to try this yourself.
        Remove the import statement and change the string Scanner to <c>java.util.Scanner</c> in the rest of the code.
        The program should still compile and run.
      </p>
    </subsubsection>

    <subsubsection xml:id="ch1_javaDataTypes_decVar">
      <title>Declaring Variables</title>

      <p>
        Here is where we run into one of the most important differences between Java and Python.
        Python is a **dynamically typed** language.
        In a dynamically typed language a variable can refer to any kind of object at any time.
        When the variable is used, the interpreter figures out what kind of object it is.
        Java is a **statically typed** language.
        In a statically typed language the association between a variable and the type of object the variable can refer to is determined when the variable is **declared**.
        Once the declaration is made it is an error for a variable to refer to an object of any other type.
      </p>

      <p>
        In the example above, lines 5—7 contain variable declarations.
        Specifically we are saying that <c>fahr</c> and <c>cel</c> are going to reference objects that are of type <c>Double</c>.
        The variable <c>in</c> will reference a <c>Scanner</c> object.
        This means that if we were to try an assignment like <c>fahr = "xyz"</c> the compiler would generate an error because <c>"xyz"</c> is a string and <c>fahr</c> is supposed to be a double.
      </p>

      <p>
        For Python programmers, the following error is likely to be even more common.
        Suppose we forgot the declaration for <c>cel</c> and instead left line 6 blank.
        What would happen when we type <c>javac TempConv.java</c> on the command line?
      </p>

      <pre>
        TempConv.java:13: cannot find symbol
        symbol  : variable cel
        location: class TempConv
                 cel = (fahr - 32) * 5.0/9.0;
                 ^
        TempConv.java:14: cannot find symbol
        symbol  : variable cel
        location: class TempConv
                 System.out.println("The temperature in C is: " + cel);
                                                                  ^
        2 errors
      </pre>

      <p>
        When you see the first kind of error, where the symbol is on the left side of the equals sign, it usually means that you have not declared the variable.
        If you have ever tried to use a Python variable that you have not initialized the second error message will be familiar to you.
        The difference here is that we see the message before we ever try to test our program.
        More common error messages are discussed in the section :ref:`Common Mistakes`.
      </p>

      <p>
        The general rule in Java is that you must decide what kind of an object your variable is going to reference and then you must declare that variable before you use it.
        There is much more to say about the static typing of Java, but for now this is enough.
      </p>
    </subsubsection>

    <subsubsection xml:id="ch1_javaDataTypes_ioScnr">
      <title>Input / Output / Scanner </title>

      <p>
        In the previous section we created a <c>Scanner</c> object.
        In Java, <c>Scanner</c> objects make getting input from the user, a file, or even over the network relatively easy.
        In our case we simply want to ask the user to type in a number at the command line, so in line 9 we construct a <c>Scanner</c> by calling the constructor and passing it the <c>System.in</c> object.
        Notice that this <c>Scanner</c> object is assigned to the name <c>in</c>, which we declared to be a <c>Scanner</c> on line 7.
        <c>System.in</c> is similar to <c>System.out</c> except, of course, it is used for input.
        If you are wondering why we must create a <c>Scanner</c> to read data from <c>System.in</c> when we can write data directly to <c>System.out</c> using <c>println</c>, you are not alone.
        We will talk about the reasons why this is so later when we talk in-depth about Java streams.
        You will also see in other examples that we can create a <c>Scanner</c> by passing the <c>Scanner</c> a <c>File</c> object.
        You can think of a <c>Scanner</c> as a kind of “adapter” that makes low level objects easier to use.
      </p>

      <p>
        On line 11 we use the <c>Scanner</c> object to read in a number.
        Here again we see the implications of Java being a strongly typed language.
        Notice that we must call the method <c>nextDouble</c> because the variable <c>fahr</c> was declared as a double.
        So, we must have a function that is guaranteed to return each kind of object we might want to read.
        In this case, we need to read a Double so we call the function <c>nextDouble</c>.
        The compiler matches up these assignment statments and if you try to assign the results of a method call to the wrong kind of variable it will be flagged as an error.
      </p>

      <p>
        The table below shows some commonly used methods of the <c>Scanner</c> class.
        There are many more methods supported by this class and we will talk about how to find them in our chapter about :ref:`Java Documentation`. 
      </p>

      <table>
        <title>A simple table</title>
        <tabular halign="center">
          <row header="yes" bottom="minor">
            <cell>Return type</cell>
            <cell>Method Name</cell>
            <cell>Description</cell>
          </row>
          <row>
            <cell>boolean</cell>
            <cell>hasNext()</cell>
            <cell>returns true if more data is present </cell>
          </row>
          <row>
            <cell>boolean</cell>
            <cell>hasNextInt()</cell>
            <cell>returns true if the next thing to read is an integer</cell>
          </row>
          <row>
            <cell>boolean</cell>
            <cell>hasNextFloat()</cell>
            <cell>returns true if the next thing to read is a float</cell>
          </row>
          <row>
            <cell>boolean</cell>
            <cell>hasNextDouble()</cell>
            <cell>returns true if the next thing to read is a double </cell>
          </row>
          <row>
            <cell>Integer</cell>
            <cell>nextInt()</cell>
            <cell>returns the next thing to read as an integer</cell>
          </row>  
          <row>
            <cell>Float</cell>
            <cell>nextFloat()</cell>
            <cell>returns the next thing to read as a float</cell>
          </row>
          <row>
            <cell>Double</cell>
            <cell>nextDouble()</cell>
            <cell>returns the next thing to read as a Double</cell>
          </row>
          <row>
            <cell>String</cell>
            <cell>next()</cell>
            <cell>returns the next thing to read as a String</cell>
          </row>
        </tabular>
      </table>
<!--
==================== ================ ======================================================
         Return type      Method name                                            Description
==================== ================ ======================================================
             boolean        hasNext()                   returns true if more data is present
             boolean     hasNextInt()   returns true if the next thing to read is an integer
             boolean   hasNextFloat()      returns true if the next thing to read is a float
             boolean  hasNextDouble()     returns true if the next thing to read is a double
             Integer        nextInt()           returns the next thing to read as an integer
               Float      nextFloat()              returns the next thing to read as a float
              Double     nextDouble()             returns the next thing to read as a Double
              String           next()             returns the next thing to read as a String
==================== ================ ====================================================== -->

    </subsubsection>
  </subsection>

  <subsection xml:id="ch1_javaDataTypes_string">
    <title>String</title>

    <p>
      Strings in Java and Python are quite similar.
      Like Python, Java strings are immutable.
      However, manipulating strings in Java is not quite as obvious since Strings do not support an indexing or slicing operator.
      That is not to say that you can't index into a Java string, you can.
      You can also pull out a substring just as you can with slicing.
      The difference is that Java uses method calls where Python uses operators.
    </p>

    <p>
      In fact, this is the first example of another big difference between Java and Python.
      Java does not support any operator overloading.
      Table 3 maps common Python string operations to their Java counterparts.
      For the examples shown in the table we will use a string variable called “str”.
    </p>

    <table>
      <title>A simple table</title>
      <tabular halign="center">
        <row header="yes" bottom="minor" >
          <cell>Python</cell>
          <cell>Java</cell>
          <cell>Description</cell>
        </row>
        <row>
          <cell><c>str[3]</c></cell>
          <cell><c>str.charAt(3)</c></cell>
          <cell>Return character in 3rd position</cell>
        </row>
        <row>
          <cell><c>str[2:4]</c></cell>
          <cell><c>str.substring(2,4)</c></cell>
          <cell>Return substring from 2nd up to but not including 4th</cell>
        </row>
        <row>
          <cell><c>len(str)</c></cell>
          <cell><c>str.length()</c></cell>
          <cell>Return the length of the string</cell>
        </row>
        <row>
          <cell><c>str.find('x')</c></cell>
          <cell><c>str.indexOf('x')</c></cell>
          <cell>Find the first occurrence of x</cell>
        </row>
        <row>
          <cell><c>str.split()</c></cell>
          <cell><c>str.split('\s')</c></cell>
          <cell>Split the string on whitespace into a list/array of strings</cell>
        </row>
        <row>
          <cell><c>str.split(',')</c></cell>
          <cell><c>str.split(',')</c></cell>
          <cell>Split the string at ',' into a list/array of strings</cell>
        </row>
        <row>
          <cell><c>str + str</c></cell>
          <cell><c>str + str</c> or <c>str.concat(str)</c></cell>
          <cell>Concatenate two strings together</cell>
        </row>
        <row>
          <cell><c>str.strip()</c></cell>
          <cell><c>str.trim()</c></cell>
          <cell>Remove any whitespace at the beginning or end</cell>
        </row>
      </tabular>
    </table>
<!--
========================== ==================================== =============================================================
                    Python                     Java                                                   Description
========================== ==================================== =============================================================
                <c>str[3]<c>        <c>str.charAt(3)<c>             Return character in 3rd  position
              <c>str[2:4]<c>   <c>str.substring(2,4)<c>             Return substring from 2nd up to but not including 4th
              <c>len(str)<c>         <c>str.length()<c>             Return the length of the string
         <c>str.find('x')<c>     <c>str.indexOf('x')<c>             Find the first occurrence of x
           <c>str.split()<c>      <c>str.split('\s')<c>             Split the string on whitespace into a list/array of strings
        <c>str.split(',')<c>       <c>str.split(',')<c>             Split the string at <c>','<c> into a list/array of strings
             <c>str + str<c> <c>str + str<c> or <c>str.concat(str)<c> Concatenate two strings together
           <c>str.strip()<c>           <c>str.trim()<c>             Remove any whitespace at the beginning or end
========================== ==================================== ============================================================= -->

  </subsection>

  <subsection xml:id="ch1_javaDataTypes_list">
    <title>List</title>
    <p>
      Let's explore the differences between lists in Python and the equivalent data structures in Java. 
      In Python, we use lists, which are very flexible: they can grow or shrink in size, and they can hold different types of data (like numbers, strings, or even a mix of types). 
      In Java, there are two similar data structures: arrays and ArrayLists.

    </p>
    <p>
      Java arrays are similar to Python lists but with an important difference - they have a fixed size once they are created. 
      And since Java is a typed language all elements in an array must be of the same data type (e.g., all integers or all strings).
  Arrays are useful when you know exactly how many elements you need to store.
    </p>
    <p>
   On the other hand, Java ArrayLists function similarly to Python lists, as they can dynamically grow or shrink as needed. 
   Unlike arrays, ArrayLists are part of Java's java.util library, so you must import the library to use them. 
   It's important to note that ArrayLists can only store objects, not primitive types. 
   However, Java provides wrapper classes (like Integer for int) to bridge this gap and allow primitives to be used in an object-oriented manner.
               


    </p>


    <p>
      To see how the two types of arrays work, let's take this Python program that uses a list of numbers and produces a histogram showing the frequency of the numbers as an example. 
      Typically, data is read from a data source like a file. For simplicity instead of reading numbers from a file, we will work with a predefined list where each number is between 0 and 9. 
      Here is a simple Python program that creates and prints a histogram:
    </p>

    <program language="python">
      <code>
        def main():
            count = [0]*10
            data = [3, 7, 3, 2, 9, 0, 1, 7, 8, 3, 4, 4, 9, 6, 6, 2, 3, 5, 8, 7]

            for number in data:
                count[number] = count[number] + 1

            idx = 0
            for num in count:
                print(idx, " occured ", num, " times.")
                idx += 1

        main()
      </code>
    </program>

    <p>
      Test running the program.
    </p>

    <p>
      Let's review what is happening in this little program. 
      First, we create a list (or array in Java) and initialize the first 10 positions in the list to be 0. 
      Next, we use a predefined list (or array in Java) of numbers. 
      Third, we have a loop that iterates over each number in the list. 
      As we process each number, we increment the counter at the position in the list indicated by the number we just processed. 
      Finally, we iterate over each element in the list, printing out both the position in the list and the total value stored in that position.
        </p>

    <p>
      To write the Java version of this program, we will first use an array. 
      Additionally, you will see two different kinds of loops used in Java. 
      One of these loops will look familiar, the enhanced for loop, is a powerful and concise way to iterate over arrays in Java that is very similar to the for loop in Python. 
      The second for loop is slightly different from what you are used to in Python but is easy to understand once you see the syntax:

    </p>

    <p>
      <ul>

             <li>
          <p>
            <c>for (Type variable : collection) { code }</c>
          </p>
          <ul>
            <li>
              <p>
                The <c>code</c> will be executed once for each element in the <c>collection</c>.
                Each execution, <c>variable</c> will be assigned to the next element of <c>collection</c>.
                Known as the "for-each" loop.
                This form is useful for iterating over all members of a collection, similar to how you might use <c>for a in sequence</c> in Python.
              </p>
            </li>
          </ul>
        </li>
            <li>
        
          <p>
            <c>for (initialization statement; condition; loop statement) { code }</c>
          </p>
          <ul><li>
              <p>
                The <c>code</c> will be repeatedly executed until the <c>condition</c> becomes false.
                As shown in the example below, the <c>initialization statement</c> and <c>loop statement</c> make this form useful for iterating over a range of numbers,
                similar to how you might use <c>for i in range(10)</c> in Python.
              </p>
            </li>
          </ul>
        </li>
       
      </ul>
    </p>

    <p>Here is the Java code needed to write the exact same program using arrays:</p>

    <program language="java" interactive="activecode" label="array_histo">
      <code>    
        public class Histo {

          public static void main(String[] args) {
            int[] count = new int[10];
            int[] numbers = {3, 7, 3, 2, 9, 0, 1, 7, 8, 3, 4, 4, 9, 6, 6, 2, 3, 5, 8, 7};
            
            for (int number : numbers) {
              count[number]++;
            }

            for (int i = 0; i &lt; count.length; i++) {
              System.out.println(i + " occurred " + count[i] + " times.");
            }
          }
        }
      </code>
    </program>

    <p>
      Before going any further, I suggest you try to compile the above program and run it to see how it behaves.
    </p>

    <p>
      Now, let's look at what is happening in the Java source.
      As usual, we declare the variables we are going to use at the beginning of the method.
      In this example we are declaring two arrays.
      The first  <c>int []</c> variable called <c>count</c>, a second <c>int []</c> called <c>numbers</c>.
      However, there is a new twist to the <c>array</c> declaration.
      In Java, array declarations are more explicit, requiring you to specify the data type and size. 
      Python on the other hand offers more flexibility with list creation as we don't have to specify a type or initial size.
      In this case the <c>array</c> will contain <c>int</c> values.
      After declaring the variable, use the new keyword with the type and the size of the array (the number of elements it can hold). 
      This will actually create the array in memory.
    </p>

    <p>
      The first loop in this example is similar to the Python for loop where the object of the loop is a Sequence.
      In Java we can use this kind of for loop over all kinds of sequences, which are generally called Collection classes in Java.
      The for loop <c>for(int number : numbers)</c> is equivalent to the Python loop <c>for i in count: </c> This loop iterates over all of the elements in the array called numbers.
      Each time through the loop the int variable <c>number</c> is bound to the next element of the <c>array</c>.
    </p>

    <p>
      The syntax of the second for loop probably looks very strange to you, but in fact it is not too different from what happens in Python using range.
      In fact <c>for (int i = 0; i &lt; 10; i++)</c> is exactly equivalent to the Python <c>for i in range(10)</c> The first statement inside the parenthesis declares and initializes a loop variable <c>i</c>.
      The second statement is a Boolean expression that is our exit condition.
      In other words we will keep looping as long as this expression evaluates to true.
      The third clause is used to increment the value of the loop variable at the end of iteration through the loop.
      In fact <c>i++</c> is Java shorthand for <c>i = i + 1</c> Java also supports the shorthand <c>i--</c> to decrement the value of i.
      Like Python, you can also write <c>i += 2</c> as shorthand for <c>i = i + 2</c> Try to rewrite the following Python for loops as Java for loops:
    </p>

    <p>
      <ul>
        <li>
          <p>
            <c>for i in range(2,101,2)</c>
          </p>
        </li>
        <li>
          <p>
            <c>for i in range(1,100)</c>
          </p>
        </li>
        <li>
          <p>
            <c>for i in range(100,0,-1)</c>
          </p>
        </li>
      </ul>
    </p>

    <p>
      This example shows us that arrays in Java provide a fixed-size data structure for storing elements of the same type, which makes them efficient but somewhat limited in flexibility. 
      Once an array is created, its size cannot be changed, meaning you need to know the required size beforehand or implement additional logic to handle resizing. 
      This rigidity can be a drawback when working with collections of unknown or dynamically changing size. 
      To address this limitation, Java offers the ArrayList class, which provides a more adaptable alternative for managing collections of data.
    </p>
  <p>


  The ArrayList implementation is a more dynamic approach to handling collections in Java. 
  While the histogram example does not require resizing the collection (as we know there are only 10 possible numbers, 0 through 9), 
  using an ArrayList showcases its flexibility and provides a Python-like experience in Java. 
  </p>
      <p>Now, here's how we can implement the histogram using an ArrayList:</p>

      <program language="java"  label="arraylist_histo" interactive="activecode">
<code>
  import java.util.ArrayList;

public class HistogramArrayList {
    public static void main(String[] args) {
        
        ArrayList&lt;Integer&gt; count = new ArrayList&lt; &gt;();
        for (int i = 0; i &lt; 10; i++) {
            count.add(0);  // Initialize with 0
        }

        int[] numbers = {3, 7, 3, 2, 9, 0, 1, 7, 8, 3, 4, 4, 9, 6, 6, 2, 3, 5, 8, 7};

        for (int number : numbers) {
            count.set(number, count.get(number) + 1);
        }

        for (int i = 0; i &lt; count.size(); i++) {
            System.out.println(i + " occurred " + count.get(i) + " times.");
        }
    }
}
</code>
</program>


<p>
    Let's break down the implementation step by step:
</p>
  
  <pre>   ArrayList&lt;Integer&gt; count = new ArrayList&lt; &gt;();
</pre>

   <p>
     To start we create our <c>ArrayList</c> and give it an initial size of 10.
      Strictly speaking, it is not necessary to give the <c>ArrayList</c> any size.
      It will grow or shrink dynamically as needed, just like a list in Python.
    </p>



<pre>
for (int i = 0; i &lt; 10; i++) {
    count.add(0);  // Initialize all positions with 0
}
  </pre>
  <p>
    This serves the same purpose as the Python statement <c>count = [0]*10</c>, that is it initializes the first 10 positions in the <c>ArrayList</c> to hold the value 0.
Unlike Python lists, where we can initialize a list with [0] * 10, ArrayList in Java requires us to explicitly populate it.
Here, we use a for loop to add 10 zeros to the ArrayList. Each call to count.add(0) appends a zero to the list. 
  </p>

   <p>
      Technically, you don't *have* to declare what is going to be in an array list.
      The compiler will allow you to leave the <c>&lt;Type&gt;</c> off the declaration.
      If you don't tell Java what kind of object is going to be on the list Java will give you a warning message like this:
    </p>
 <pre>
      Note: Histo.java uses unchecked or unsafe operations.
      Note: Recompile with -Xlint:unchecked for details.
    </pre>
    <p>
      Without the <c>&lt;Integer&gt;</c> part of the declaration Java simply assumes that <em>any</em> object can be on the list.
      However, without resorting to an ugly notation called casting, you cannot do anything with the objects on a list like this!
      So, if you forget you will surely see more errors later in your code.
      (Try it and see what you get!)
    </p>


    <p>
  The next step is counting the occurrences and updating the list with the counts of each number:
</p>
<pre>
  for (int number : numbers) {
    count.set(number, count.get(number) + 1);
}
  </pre>

  <p>
  So, to set the value of an <c>ArrayList</c> element we use the <c>set</c> method.
      The first parameter of <c>set</c> indicates the index or position in the <c>ArrayList</c> we are going to change.
      The next parameter is the value we want to set.
      Notice that, we cannot use the indexing square bracket operator to retrieve a value from the list, but we must use the <c>get</c> method.
</p>


<p>
  <ul>
    <li>
      <p>
        <c>count.get(number)</c>: Retrieves the current value at the index corresponding to the number. 
        For example, if the number <c>3</c> is encountered, <c>count.get(3)</c> retrieves the current count at index <c>3</c>.
      </p>
    </li>
    <li>
      <p>
        <c>count.set(number, count.get(number) + 1)</c>: Updates the value at the index by incrementing it. For instance, if <c>count.get(3)</c> is <c>2</c>, this operation sets the value at index <c>3</c> to <c>3</c>.
          This is similar to the Python logic <c>count[number] += 1</c>, but in Java, we explicitly call <c>.get()</c> to retrieve the value and <c>.set()</c> to update it.
      </p>
    </li>
  </ul>
</p>
<p>
    The for loop in this example is structured similar to how we did it for the array example.
    </p>

<p>
  The next step is displaying the counts:
</p>

<pre>
  for (int i = 0; i &lt; count.size(); i++) {
    System.out.println(i + " occurred " + count.get(i) + " times.");
}
  </pre>

<p>
  Here, we iterate through each index of the <c>ArrayList</c>. <c>count.get(i)</c> retrieves the value at index <c>i</c> (the count of occurrences for the number <c>i</c>).
The output is formatted to show the number (<c>i</c>) and the count of occurrences.

</p>

    


 

    
  </subsection>

  <subsection xml:id="ch1_javaDataTypes_arrays">
    <title>Why we have both</title>

    <p>
    In this course, you will primarily work with Java <c>ArrayLists</c> because they offer several advantages: they are dynamic, meaning they can grow or shrink as needed; 
    they are easier to use with built-in methods for common operations; and they closely resemble the behavior of Python lists, making them more intuitive for those with prior Python experience. 
</p><p>
However, as you dive deeper into Java programming, you will notice that arrays are frequently used in a wide variety of code examples, especially in online resources and traditional Java textbooks. 
Arrays are a fundamental part of Java, offering a more low-level approach to storing and managing data. They are fixed in size, require explicit indexing, 
and provide a closer connection to how data is handled in memory, which is why understanding arrays is essential for developing a deeper comprehension of how Java works under the hood.
 </p>

  
   
  </subsection>
</section>
