<?xml version="1.0"?>
<!-- Generated by Docutils 0.19 -->
<section xml:id="_boolean-expressions-index-0">
    <title>Boolean Expressions</title>
    <p><term>Boolean</term> variables or expressions can only have <term>true</term> or <term>false</term> values.</p>
  <subsection xml:id="_testing-equality">
            <title>Testing Equality (==)</title>
            <p>The operators == and != (not equal) can be used to compare values. They return true or false boolean values.</p>
            <note>
                <p>One = sign changes the value of a variable. Two == equal signs are used to test if a variable holds a certain value, without changing its value!</p>
            </note>
            
           
                <p>The following code shows how == is used with primitive types like int.</p>

<exercise label="bool1">
    <statement>
            <p>What will the code below print out? Try to guess before you run it! Note that 1 equal sign (=) is used for assigning a value and 2 equal signs (==) for testing values.</p>

    </statement>
    <program xml:id="bool1_editor" interactive="activecode" language="java">

        <input>
public class BoolTest1
{
   public static void main(String[] args)
   {
     int age = 15;
     int year = 14;
     // Will this print true or false?
     System.out.println( age == year );
     year = 15;
     // Will this print true or false?
     System.out.println( age == year );
     // Will this print true or false?
     System.out.println( age != year );
   }
}
        </input>
<tests>
// should pass if/when they run code
 import static org.junit.Assert.*;
 import org.junit.*;;
 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
     @Test
     public void testMain() throws IOException
     {
         String output = getMethodOutput("main");
         String expect = "false\ntrue\nfalse\n";
         boolean passed = getResults(expect, output, "Expected output from main", true);
         assertTrue(passed);
     }
 }
</tests>

    </program>
</exercise>
        
        </subsection>
  <subsection xml:id="_relational-operators">
            <title>Relational Operators (&lt;, &gt;)</title>
            <p>The <term>Relational Operators</term> below in Java are used to compare numeric values or arithmetic expressions. Although some programming languages allow using relational operators like &lt; to compare strings, Java only uses these operators for numbers, and uses the string methods compareTo() and equals() for comparing String values.</p>
            <p><ul>
                <li>
                    <p>&lt; Less Than</p>
                </li>
                <li>
                    <p>&gt; Greater Than</p>
                </li>
                <li>
                    <p>&lt;= Less than or equal to</p>
                </li>
                <li>
                    <p>&gt;= Greater than or equal to</p>
                </li>
                <li>
                    <p>== Equals</p>
                </li>
                <li>
                    <p>!= Does not equal</p>
                </li>
            </ul></p>
            <p>If you have trouble telling &lt; and &gt; apart, think of a number line and think of &lt; and &gt; as arrows; &lt; (less than) points towards 0 and smaller numbers on the number line and &gt; (greater than) points towards the larger numbers on the number line. Or remember that &lt; starts with the smaller (less) point and &gt; starts with the open wide (greater) side. With &lt;= and &gt;=, remember to write the two symbols in the order that you would say them “less than” followed by “or equal to”.</p>
            <p> <term>Coding Exercise</term></p>

<exercise label="bool2">
    <statement>
            <p>Try to guess what the code below will print out before you run it.</p>

    </statement>
    <program xml:id="bool2_editor" interactive="activecode" language="java">

        <input>
public class BoolTest2
{
   public static void main(String[] args)
   {
     int age = 15;
     int year = 14;
     // Will these print true or false?
     System.out.println( age &lt; year );
     System.out.println( age &gt; year );
     System.out.println( age &lt;= year+1 );
     System.out.println( age-1 &gt;= year );
   }
}
        </input>
<tests>
import static org.junit.Assert.*;
 import org.junit.*;;
 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
     @Test
     public void testMain() throws IOException
     {
         String output = getMethodOutput("main");
         String expect = "false\ntrue\ntrue\ntrue\n";
         boolean passed = getResults(expect, output, "Expected output from main", true);
         assertTrue(passed);
     }
 }
</tests>

    </program>
</exercise>
            <p> <term>Check your understanding</term></p>

<exercise label="BooleanExps">
    <statement><p>Drag the boolean expression from the left and drop it on what it is testing on the right.  Click the "Check Me" button to see if you are correct.</p></statement>
    <feedback><p>Review the relational operators above.</p></feedback>
<matches><match order="1"><premise>x &gt; 0</premise><response>x is positive</response></match><match order="2"><premise>x == y</premise><response>x equals y</response></match><match order="3"><premise>x &lt; 0</premise><response>x is negative</response></match><match order="4"><premise>x != y</premise><response>x does not equal y</response></match><match order="5"><premise>x &lt; y </premise><response>x is less than y</response></match><match order="6"><premise>x &gt; y </premise><response>x is greater than y</response></match><match order="7"><premise>x &gt;= y </premise><response>x is greater than or equal to y</response></match></matches></exercise>        </subsection>
  <subsection xml:id="_testing-with-mod">
            <title>Testing with mod (%)</title>
            <p>Here are some boolean expressions that are very useful in coding and mod is used in many of them:</p>
            <program language="java"><input>
// Test if a number is positive
(number &gt; 0)
//Test if a number is negative
(number &lt; 0)
//Test if a number is even by seeing if the remainder is 0 when divided by 2
(number % 2 == 0)
//Test if a number is odd by seeing if there is a remainder when divided by 2
(number % 2 &gt; 0)
//Test if a number is a multiple of x (or divisible by x with no remainder)
(number % x == 0)
</input></program>

<exercise label="boolMod">
    <statement>
            <p>Try the expressions containing the % operator below to see how they can be used to check for even or odd numbers. All even numbers are divisible (with no remainder) by 2.</p>

    </statement>
    <program xml:id="boolMod_editor" interactive="activecode" language="java">

        <input>
public class BoolMod
{
   public static void main(String[] args)
   {
     int age1 = 15;
     int age2 = 16;
     int divisor = 2;
     System.out.println("Remainder of " + age1 + "/" + divisor + " is " + (age1 % divisor) );
     System.out.println("Remainder of " + age2 + "/" + divisor + " is " + (age2 % divisor) );
     System.out.println("Is " + age1 + " even? " + (age1 % 2 == 0) );
     System.out.println("Is " + age2 + " even? " + (age2 % 2 == 0) );
   }
}
        </input>
<tests>
import static org.junit.Assert.*;
 import org.junit.*;;
 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
     @Test
     public void testMain() throws IOException
     {
         String output = getMethodOutput("main");
         String expect = "Remainder of 15/2 is 1\nRemainder of 16/2 is 0\nIs 15 even? false \nIs 16 even? true\n";
         boolean passed = getResults(expect, output, "Expected output from main", true);
         assertTrue(passed);
     }
 }
</tests>

    </program>
</exercise>
            <p> The <term>modulo</term> operator is a powerful tool in programming. Because of its versatility, it's important to become familiar with how it works and how it can be applied in different problem-solving scenarios</p>
            <blockquote>
                <p><ul>
                    <li>
                        <p>Use it to check for odd or even numbers <c>(num % 2 == 1) is odd</c> and <c>(num % 2 == 0) is even</c>.  Actually, you can use it to check if any number is evenly divisible by another (<c>num1 % num2 == 0</c>)</p>
                    </li>
                    <li>
                        <p>Use it to get the last digit from an integer number (<c>num % 10 = last digit on right</c>).</p>
                    </li>
                    <li>
                        <p>Use it to get the number of minutes left when you convert to hours (<c>num % 60</c>).</p>
                    </li>
                    <li>
                        <p>Use it whenever you have limit in the value, and you need to wrap around to the front if the value goes over the limit (<c>num % limit</c>).</p>
                    </li>
                </ul></p>
            </blockquote>
        </subsection>
  
  <subsection xml:id="_summary-16">
            <title>Summary</title>
            <p><ul>
                <li>
                    <p>Primitive values and reference values can be compared using relational operators (i.e., == and !=) in Java.</p>
                </li>
                <li>
                    <p>Arithmetic expression values can be compared using relational operators (i.e., &lt;, &gt;, &lt;=, &gt;=) in Java.</p>
                </li>
                <li>
                    <p>An expression involving relational operators evaluates to a Boolean value of true or false.</p>
                </li>
            </ul></p>
        </subsection>
  <!-- <subsection xml:id="_relational-operators-practice-game">
            <title>Relational Operators Practice Game</title>
            
            <p>Try the game below to practice. Click on <term>Relationals</term>,  evaluate the relational expression and click on None, All, or the numbers that make the expression true. Check on Compound for an added challenge. We encourage you to work in pairs and see how high a score you can get.</p>
            <raw format="html" xml:space="preserve"><iframe id="page-embed" class="init" height="700px" width="100%" style="margin-left:10%;max-width:80%" src="https://csa-games.netlify.app/"></iframe></raw>
        </subsection> -->
</section>
