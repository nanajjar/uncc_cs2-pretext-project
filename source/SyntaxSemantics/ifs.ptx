<?xml version="1.0"?>
<!-- Generated by Docutils 0.19 -->
<section>
    <title>if Statements and Control Flow</title>
    <p xml:id="_index-0-25">
    <em>If statements</em> are found in all programming languages as a way to make choices. 
    Here’s a comparison of ifs in App Inventor blocks, CSP block and pseudocode and Java ifs.</p>
    <figure align="center" xml:id="id1-19">
    <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 1: Comparison of if block, Python ifs, and Java if statements</caption>
    <image source="ch-javaintro/IfComparison.png" width="NaN%"/>
  </figure>
    <p>The statements in a Java main method normally run or execute one at a time in the order they are found from top to bottom.   <term>If statements</term> (also called <term>conditionals</term> or <term>selection</term>) change the flow of control through the program so that some code is only run when something is true.  In an if statement, if the condition is true then the next statement or a block of statements will execute.  If the condition is false then the next statement or block of statements is skipped.</p>
    <figure align="center" xml:id="id2-11">
    <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 2: The order that statements execute in a conditional</caption>
    <image source="ch-javaintro/Condition.png" width="50%"/>
  </figure>
    <p>A conditional uses the keyword <c>if</c> followed by Boolean expression inside of  an open parenthesis <c>(</c> and a close parenthesis <c>)</c> and then followed by a single statement or block of statements.  The single statement or block of statements are only executed if the condition is true.  The open curly brace <c>{</c> and a close curly brace <c>}</c> are used to group a block of statements together.  It is recommended to always put in the curly braces even if you have just one statement under the if statement.</p>
    <program language="java">
    <input>
// A single if statement
if (boolean expression)
    Do statement;
// Or a single if with {}
if (boolean expression)
{
   Do statement;
}
// A block if statement: { } required
if (boolean expression)
{
   Do Statement1;
   Do Statement2;
   ...
   Do StatementN;
}
</input>
  </program>
    <note>
            <p>Note that there is no semicolon (;) at the end of the boolean expression in an if statement even if it is the end of that line. The semicolon goes at the end of the whole if statement, often on the next line. Or { } are used to mark the beginning and end of the block of code under the if condition.</p>
        </note>
    <p>Imagine that your cell phone wanted to remind you to take an umbrella if it was currently raining in your area when it detected that you were leaving the house.  This type of thing is going to become more common in the future and it is an area of research called Human Computer Interaction (HCI) or Ubiquitous Computing (computers are everywhere).</p>
    <p><term>Check your understanding</term></p>
  <subsection xml:id="_relational-operators-in-if-statements">
            <title>Relational Operators in If Statements</title>
            <p>Most if statements have a boolean condition that uses relational operators like ==, !=, &lt;, &gt;, &lt;=, &gt;=, as we saw in the last lesson.</p>
            <p> <term>Coding Exercise</term></p>

<exercise label="if-relational">
    <statement>
            <p>Run the following active code a couple times until you see all the possible outputs. It prints out whether a random number is positive or equal to 0. Add another if statement that tests if it is a negative number.</p>

    </statement>
    <program xml:id="if-relational_editor" interactive="activecode" language="java">

        <input>
public class TestNumbers
{
   public static void main(String[] args)
   {
       // Get a random number from -10 up to 10.
       int number = (int) (Math.random()*21) - 10;
       System.out.println("The number is " + number);

       // is it positive?
       if (number &gt; 0)
       {
           System.out.println(number + " is positive!");
       }
       // is it 0?
       if (number == 0)
       {
           System.out.println(number + " is zero!");
       }
       // is it negative?
       // Add another if statement

   }
}
        </input>
<tests>
// Test Code for Lesson 3.2.1 - Activity 1 - if-relational
 import static org.junit.Assert.*;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;

 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
     @Test
     public void testPositive()
     {
         String output = "";
         int num = -999;

         while(num &lt;= 0) {
             output = getMethodOutput("main");
             num = getNumber(output);
         }

         String expect = "The number is " + num + "\n" + num + " is positive!";

         boolean passed = getResults(expect, output, "Testing positive numbers");
         assertTrue(passed);
     }

     @Test
     public void testZero()
     {
         String output = "";
         int num = -999;

         while(num != 0) {
             output = getMethodOutput("main");
             num = getNumber(output);
         }

         String expect = "The number is " + num + "\n" + num + " is zero!";

         boolean passed = getResults(expect, output, "Testing zero");
         assertTrue(passed);
     }

     @Test
     public void testNegative()
     {
         String output = "";
         int num = 999;

         while(num &gt;= 0) {
             output = getMethodOutput("main");
             num = getNumber(output);
         }

         String expect = "The number is " + num + "\n" + num + " is negative!";

         boolean passed = getResults(expect, output,"Testing negative numbers");
         assertTrue(passed);
     }

     private int getNumber(String output) {
         output = output.replaceAll("The number is ", "");
         int space = output.indexOf("\n");

         String numStr = output;

         if (space &gt;= 0)
             numStr = numStr.substring(0, space).trim();

         return Integer.parseInt(numStr);
     }
 }
</tests>

    </program>
</exercise>
            <note>
                <p>A common mistake in if statements is using = instead of == in the condition by mistake. You should always <term>use ==</term>, not =, in the condition of an if statement to test a variable. One equal sign (=) assigns a value to a variable, and two equal signs (==) test if a variable has a certain value.</p>
            </note>
            <p> <term>Check your understanding</term></p>

    <exercise label="qcb1_2">
        <statement>

            <p>3-2-4: Consider the following code segment. What is printed as a result of executing the code segment?</p>
            <program language="java"><input>
int x = 3;
if (x &gt; 2)
{
    x = x * 2;
}
if (x &gt; 4)
{
   x = 0;
}
System.out.print(x);
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>3</p>
                </statement>
                <feedback>
                    <p>x is changed by the if statements.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>6</p>
                </statement>
                <feedback>
                    <p>What happens when x is greater than 2 and then greater than 4? Do both if statements.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>0</p>
                </statement>
                <feedback>
                    <p>If x is greater than 2, it's always doubled, and then that result is always greater than 4, so it's set to 0 in the second if statement.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>4</p>
                </statement>
                <feedback>
                    <p>x is changed by the if statements.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>The code will not compile</p>
                </statement>
                <feedback>
                    <p>This code will compile.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
            
        </subsection>
  <subsection xml:id="_common-errors-with-if-statements">
            <title>Common Errors with If Statements</title>
            <p>Here are some rules to follow with if statements to avoid some common errors:</p>
            <blockquote>
                <p><ul>
                    <li>
                        <p>Always use curly brackets <c>{</c> and <c>}</c> to enclose the block of statements under the if condition. Java doesn’t care if you indent the code – it goes by the { }.</p>
                    </li>
                    <li>
                        <p>Don’t put in a semicolon <c>;</c> after the first line of the if statement, if (test);. The if statement is a multiline block of code that starts with the if condition and then { the body of the if statement }.</p>
                    </li>
                    <li>
                        <p>Always use <term>==</term>, not =, in the condition of an if statement to test a variable. One = assigns, two == tests!</p>
                    </li>
                </ul></p>
            </blockquote>
            <p> <term>Coding Exercise</term></p>

<exercise label="lccb2-indent">
    <statement>
            <p>The code below doesn’t work as expected.  Fix it to only print <c>Wear a coat</c> and <c>Wear gloves</c> when isCold is true.</p>

    </statement>
    <program xml:id="lccb2-indent_editor" interactive="activecode" language="java">

        <input>
public class Test1
{
   public static void main(String[] args)
   {
       boolean isCold = false;
       if (isCold = true);
           System.out.println("Wear a coat");
           System.out.println("Wear gloves");

   }
}
        </input>
<tests>
import static org.junit.Assert.*;
 import org.junit.*;;
 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
     @Test
     public void testMain() throws IOException
     {
         String output = getMethodOutput("main");
         String expect = "";
         boolean passed = getResults(expect, output, "Expected output from main if isCold is false");
         assertTrue(passed);
     }
     @Test
     public void testCountCurlies()
     {
         String code = getCode();
         int num = countOccurences(code, "{");
         boolean passed = num &gt;= 3;

         getResults("3", "" + num, "Number of {", passed);
         assertTrue(passed);
     }
 }
</tests>

    </program>
</exercise>
        </subsection>

  <subsection xml:id="_summary-17">
            <title>Summary</title>
            <p><ul>
                <li>
                    <p>if statements test a boolean expression and if it is true, go on to execute the following statement or block of statements surrounded by curly brackets { } like below.</p>
                </li>
            </ul></p>
            <program language="java"><input>
// A single if statement
if (boolean expression)
    Do statement;
// A block if statement
if (boolean expression)
{
   Do Statement1;
   Do Statement2;
   ...
   Do StatementN;
}
</input></program>
            <p><ul>
                <li>
                    <p>Relational operators (==, !=, &lt;, &gt;, &lt;=, &gt;=) are used in boolean expressions to compare values and arithmetic expressions.</p>
                </li>
                <li>
                    <p>Conditional (if) statements affect the flow of control by executing different statements based on the value of a Boolean expression.</p>
                </li>
            </ul></p>
        </subsection>
  <exercises>
    <exercise label="lccb1">
    <statement>
        <p>The variable <c>isRaining</c> is a boolean variable that is either true or false. If it is true then the message <c>Take an umbrella!</c> will be printed and then execution will continue with the next statement which will print <c>Drive carefully</c>. Run the code below to see this.</p>

    </statement>
    <program xml:id="lccb1_editor" interactive="activecode" language="java">

        <input>
public class Test1
{
   public static void main(String[] args)
   {
     boolean isRaining = true;
     if (isRaining)
     {
        System.out.println("Take an umbrella!");
     }
     System.out.println("Drive carefully");
   }
}
        </input>
<tests>
import static org.junit.Assert.*;
 import org.junit.*;;
 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
     @Test
     public void testMain() throws IOException
     {
         String output = getMethodOutput("main");
         String expect = "Take an umbrella! \nDrive carefully";
         boolean passed = getResults(expect, output, "Expected output from main");
         assertTrue(passed);
     }
 }
</tests>

    </program>
</exercise>
    <exercise label="5_1_1_falseOutput">
            <statement>
    <p>3-2-2: Try changing the code above to <c>boolean isRaining = false;</c>.  What will it print? <var/>  </p></statement><setup><var><condition string="^\s*^Drive\s+carefully$\s*$"><feedback><p>Correct.  If the boolean is false, it will skip executing the print statement after the if.</p></feedback></condition><condition string="^\s*.*\s*$"><feedback><p>Try it and see</p></feedback></condition></var></setup></exercise>
  </exercises>
</section>
