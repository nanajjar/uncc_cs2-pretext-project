<?xml version="1.0"?>
<!-- Generated by Docutils 0.19 -->
<section>
    <title>Multi-Selection: else-if Statements</title>
    <p>Using if/else statements, you can even pick between 3 or more possibilites. Just add <term>else if</term> for each possibility after the first <term>if</term>, and <term>else</term> before the last possibility.</p>
    <program language="java">
    <input>
// 3 way choice with else if
if (boolean expression)
{
   statement1;
}
else if (boolean expression)
{
   statement2;
}
else
{
   statement3;
}
</input>
  </program>
    <p> <term>Coding Exercise</term></p>
    <p>Here is a flowchart for a conditional with 3 options like in the code above.</p>
    <figure align="center" xml:id="id1-21">
    <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 1: The order that statements execute in a conditional with 3 options: if, else if, and else</caption>
    <image source="ch-javaintro/Condition-three.png" width="50%"/>
  </figure>
    <note>
            <p>Another way to handle 3 or more conditional cases is to use the <c>switch</c> and <c>break</c> keywords, but these will not be on the exam.  For a tutorial on using switch see <url href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/switch.html" visual="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/switch.html">https://docs.oracle.com/javase/tutorial/java/nutsandbolts/switch.html</url>.</p>
        </note>

  <subsection xml:id="_summary-19">
            <title>Summary</title>
            <p><ul>
                <li>
                    <p>A multi-way selection is written when there are a series of conditions with different statements for each condition.</p>
                </li>
                <li>
                    <p>Multi-way selection is performed using if-else-if statements such that exactly one section of code is executed based on the first condition that evaluates to true.</p>
                </li>
            </ul></p>
            <program language="java"><input>
// 3 way choice with else if
if (boolean expression)
{
   statement1;
}
else if (boolean expression)
{
   statement2;
}
else
{
    statement3;
}
</input></program>
        </subsection>
  <exercises>
    <exercise label="lccbElseIf">
    <statement>
        <p>Run the code below and try changing the value of x to get each of the three possible lines in the conditional to print.</p>

    </statement>
    <program xml:id="lccbElseIf_editor" interactive="activecode" language="java">

        <input>
public class TestElseIf
{
   public static void main(String[] args)
   {
     int x = 2;
     if (x &lt; 0)
     {
       System.out.println("x is negative");
     }
     else if (x == 0)
     {
        System.out.println("x is 0");
     }
     else
     {
       System.out.println("x is positive");
     }
     System.out.println("after conditional");
   }
}
        </input>
<tests>
import static org.junit.Assert.*;
 import org.junit.*;;
 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
     @Test
     public void testChangedCode() {
         String origCode = "public class TestElseIf { public static void main(String[] args) { int x = 2; if (x &lt; 0) { System.out.println(\"x is negative\");  } else if (x == 0) {  System.out.println(\"x is 0\"); } else { System.out.println(\"x is positive\"); } System.out.println(\"after conditional\"); } }";
         boolean changed = codeChanged(origCode);
         assertTrue(changed);
     }
 }
</tests>

    </program>
</exercise>
    <exercise label="qcb3_4_1">
        <statement>

        <p>3-4-2: What does the following code print when x has been set to -5?</p>
        <program language="java"><input>
if (x &lt; 0)
{
   System.out.println("x is negative");
}
else if (x == 0)
{
   System.out.println("x is zero");
}
else
{
   System.out.println("x is positive");
}
</input></program>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>x is negative</p>
                </statement>
                <feedback>
                    <p>When x is equal to -5 the condition of x &lt; 0 is true.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>x is zero</p>
                </statement>
                <feedback>
                    <p>This will only print if x has been set to 0.  Has it?</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>x is positive</p>
                </statement>
                <feedback>
                    <p>This will only print if x is greater than zero.  Is it?</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="qcb3_4_2">
        <statement>

        <p>3-4-3: What does the following code print when x has been set to 2000?</p>
        <program language="java"><input>
if (x &lt; 0)
{
   System.out.println("x is negative");
}
else if (x == 0)
{
   System.out.println("x is zero");
}
else
{
   System.out.println("x is positive");
}
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>x is negative</p>
                </statement>
                <feedback>
                    <p>This will only print if x has been set to a number less than zero. Has it?</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>x is zero</p>
                </statement>
                <feedback>
                    <p>This will only print if x has been set to 0.  Has it?</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>x is positive</p>
                </statement>
                <feedback>
                    <p>The first condition is false and x is not equal to zero so the else will execute.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="qcb3_4_3">
        <statement>

        <p>3-4-4: What does the following code print when x has been set to .8?</p>
        <program language="java"><input>
if (x &lt; .25)
{
    System.out.println("first quartile");
}
else if (x &lt; .5)
{
    System.out.println("second quartile");
}
else if (x &lt; .75)
{
    System.out.println("third quartile");
}
else
{
    System.out.println("fourth quartile");
}
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>first quartile</p>
                </statement>
                <feedback>
                    <p>This will only print if x is less than 0.25.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>second quartile</p>
                </statement>
                <feedback>
                    <p>This will only print if x is greater than or equal to 0.25 and less than 0.5.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>third quartile</p>
                </statement>
                <feedback>
                    <p>The first only print if x is greater than or equal to 0.5 and less than 0.75.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>fourth quartile</p>
                </statement>
                <feedback>
                    <p>This will print whenever x is greater than or equal to 0.75.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="lccbIfDebug">
    <statement>
        <p>The else-if connection is necessary if you want to hook up conditionals together. In the following code, there are 4 separate if statements instead of the if-else-if pattern. Will this code print out the correct grade? First, trace through the code to see why it prints out the incorrect grade. Use the Code Lens button. Then, fix the code by adding in 3 else’s to connect the if statements and see if it works.</p>

    </statement>
    <program xml:id="lccbIfDebug_editor" interactive="activecode" language="java">

        <input>
public class IfDebug
{
   public static void main(String[] args)
   {
       int score = 93;
       String grade = "";

       if (score &gt;= 90)
       {
          grade = "A";
       }
       if (score &gt;= 80)
       {
         grade = "B";
       }
       if (score &gt;= 70)
       {
          grade = "C";
       }
       if (score &gt;= 60)
       {
          grade = "D";
       }
       else
       {
          grade = "F";
       }

       System.out.println(grade);
   }
}
        </input>
<tests>
// Test Code for Lesson 3.4 - lccbIfDebug
 import static org.junit.Assert.*;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
     @Test
     public void testMainCorrectOutput() throws IOException
     {
         String output = getMethodOutput("main");
         String expected = "A\n";
         boolean passed = getResults(expected, output, "Expected output from main");
         assertTrue(passed);
     }

     @Test
     public void testCodeContainsFourElses()
     {
         String code = getCode();
         String[] tokens = code.split("\\s+");

         int expectedElseCount = 4;
         int actualElseCount  = 0;
         for (int i = 0; i &lt; tokens.length; i++) {
             if (tokens[i].equals("else")) {
                 actualElseCount++;
             }
         }
         boolean passed = getResults(expectedElseCount, actualElseCount, "Expected number of else's");
         assertTrue(passed);
     }
 }
</tests>

    </program>
</exercise>
    <exercise label="ifelseifBattery">
    <statement>
        <p>Finish the following code so that it prints “Plug in your phone!” if the battery is below 50, “Unplug your phone!” if it is above 100, and “All okay!” otherwise. Change the battery value to test all 3 conditions.</p>

    </statement>
    <program xml:id="ifelseifBattery_editor" interactive="activecode" language="java">

        <input>
public class BatteryTest
{
    public static void main(String[] args)
    {
        int battery = 60;

        System.out.println("All okay!");
    }
}
        </input>
<tests>
import static org.junit.Assert.*;
  import org.junit.*;;
  import java.io.*;

  public class RunestoneTests extends CodeTestHelper
  {
      @Test
      public void testChangedCode() {
          String origCode = "public class BatteryTest {  public static void main(String[] args)  {  int battery = 60;  System.out.println(\"All okay!\");  }  }";

          boolean changed = codeChanged(origCode);
          assertTrue(changed);
      }

      @Test
      public void testCodeContains3(){
        boolean ifCheck1 = checkCodeContains("if statement for battery above 100", "if (battery &gt; 100)");
          assertTrue(ifCheck1);
      }

      @Test
      public void testCodeContains5(){
          boolean ifCheck1 = checkCodeContains("if statement for battery less than 50", "if (battery &lt; 50)");
          assertTrue(ifCheck1);
      }

      @Test
      public void testCodeContains4(){
        boolean ifCheck2 = checkCodeContains("else", "else");
        assertTrue(ifCheck2);
      }
  }
</tests>

    </program>
</exercise>
  </exercises>
</section>
