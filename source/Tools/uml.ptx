<?xml version="1.0"?>

<section xml:id="design_uml">
    <title> Unified Modeling Language </title>
<introduction>

    <p>Unified Modeling Language (UML) is a graphical language used to model the structure and behavior of object-oriented systems. 
    It is widely employed in industry to design, develop, and document complex software systems.
    </p>
    

<p>
    Unified Modeling Language (UML) is a graphical language used to model the structure and behavior of object-oriented systems. It is widely employed in industry to design, develop, and document complex software systems.

In this context, we will focus on UML class diagrams, which represent the internal structure of classes, including their attributes, methods, and visibility. 
UML class diagrams also capture relationships between classes—such as associations, dependencies, and inheritance—within object-oriented design.      
    </p>

<p> 
  This section outlines key elements of UML that are essential for understanding and representing classes at a foundational level. 
  It does not aim to cover all aspects of UML but instead highlights the minimum features needed to effectively model a class using UML class diagrams.
    </p>
    <p>
    This serves as the first step, and we will continue to build on this foundation as we introduce and explore object-oriented concepts and design principles. 
For a more in depth discussion refer to <url href="https://developer.ibm.com/articles/the-class-diagram/">this article from IBM Developer on class diagrams</url>
    </p>

</introduction>
<subsection xml:id="subsec-classdiagrams">
    <title>Class Diagrams</title>

<p>A class diagram represents each class as a rectangle divided into three sections:
 
<ul>
    <li>
        <p>
The class name (top section).        
</p>
    </li>
    <li>
        <p>
The fields—names and types of attributes (middle section).        </p>
    </li>
    <li>
        <p>
The methods—names, return types, and parameters (bottom section).
        </p>
    </li>
</ul>
</p>
<p>
This structure provides a clear visual representation of a class's internal details.
</p>
    
<p>
To illustrate, consider a Person class and a Book class as examples. While the following Java class definition is intentionally simplified, it effectively demonstrates the core UML data representations.
</p>
<p>
    For example, a Circle class and a Book class might be modeled like this.
    </p>
    <sidebyside>
        
    
 <figure xml:id="fig-uml_person">
      <caption>This UML diagram illustrates a Person as a datatype
       
      </caption> 
      <image width="10%" source="ch-tools/person_uml.png"/>
    </figure>
    <figure xml:id="fig-uml_book">
      <caption>This UML diagram illustrates a Book as a datatype
       
      </caption> 
      <image width="10%" source="ch-tools/book_uml.png"/>
    </figure>
    
    </sidebyside>

<p>
    This shows that a Person object has private fields named <c>name</c> and <c>birthDate</c>, along with public methods named <c>getName</c>, <c>setName</c>, and <c>isBirthday</c>. 
    Similarly, a Book object has private fields named <c>title</c> and <c>authors</c>, and public methods named <c>getTitle</c>, <c>getAuthors</c>, and addAuthor.
</p>
<p>The fields and methods are annotated to indicate their access level:
<ul>
    <li>
        <p>
            + (plus) for public
        </p>
    </li>
    <li>
        <p>
            - (minus) for private
        </p>
    </li>
    <li>
        <p>
            # (hash) for protected
        </p>
    </li>
</ul>

</p>
    
<p>
UML conventionally uses Algol-style naming, where:
<ul>
    <li>
        <p>
           Variables are written as name:type. 
        </p>
    </li>
    <li>
        <p>
            Methods are written as name(params:type), where each parameter is listed with its name and type.
        </p>
    </li>
</ul>
</p>
<p>
    In UML, metadata can be represented using stereotypes, which are enclosed in guillemets (&lt;&lt; &gt;&gt;). 
    For example, a constructor method may be labeled with the «constructor» stereotype.

</p>



<p>
We will introduce concepts like static members (underlined) and abstract members (italicized) in later sections as we expand our understanding of UML and object-oriented design.

</p>

<p>
Watch this first 4 minutes of this video for a quick tutorial about creating class diagrams. 
The rest of the video dives into relationships between classes which we will cover later in the course. 
Feel free to watch it as a look forward!
<video xml:id="uml_video" youtube="UI6lqHOVHic"/>



</p>
</subsection>

 </section>