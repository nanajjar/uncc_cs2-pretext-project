<?xml version="1.0"?>
<!-- Generated by Docutils 0.19 -->
<section xml:id="_expressions-and-assignment-statements">
  <title>Expressions and Assignment Statements</title>
  <introduction>
    <p>In this lesson, you will learn about assignment statements and expressions that contain math operators and variables.</p>
  </introduction>
  <subsection xml:id="_assignment-statements">
            <title>Assignment Statements</title>
            <p><term>Assignment statements</term> initialize or change the value stored in a variable using the assignment operator =.  An assignment statement always has a single variable on the left hand side. The value of the <term>expression</term> (which can contain math operators and other variables) on the right of the = sign is stored in the variable on the left.</p>
            <figure align="center" xml:id="id114"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 1: Assignment Statement (variable = expression;)</caption><image source="ch-javaintro/assignment.png" width="50%"/></figure>
            <p>Instead of saying equals for the = in an assignment statement, say “gets” or “is assigned” to remember that the variable gets or is assigned the value on the right. In the figure above score is assigned the value of the expression 10 times points (which is another variable) plus 5.</p>
            
            <p>The following <raw format="html" xml:space="preserve"><a href="https://www.youtube.com/watch?v=MZwIgM__5C8&amp;ab_channel=colleenlewis" target="_blank">video</a></raw> by Dr. Colleen Lewis shows how variables can change values in memory using assignment statements.</p>

    <video xml:id="MZwIgM__5C8" youtube="MZwIgM__5C8" width="82%"/>
                <p>As we saw in the video, we can set one variable’s value to a <em>copy</em> of the value of another variable like <c>y = x;</c>.  This won’t change the value of the variable that you are copying from.</p>
            
            <p>Let’s step through the following code in the <raw format="html" xml:space="preserve"><a href="http://www.pythontutor.com/visualize.html#code=public+class+Test2%0A%7B%0A+++public+static+void+main(String%5B%5D+args%29%0A+++%7B%0A+++++int+x+%3D+3%3B%0A+++++int+y+%3D+2%3B%0A+++++System.out.println(x%29%3B%0A+++++System.out.println(y%29%3B%0A+++++x+%3D+y%3B%0A+++++System.out.println(x%29%3B%0A+++++System.out.println(y%29%3B%0A+++++y+%3D+5%3B%0A+++++System.out.println(x%29%3B%0A+++++System.out.println(y%29%3B%0A+++%7D%0A%7D&amp;mode=display&amp;origin=opt-frontend.js&amp;cumulative=false&amp;heapPrimitives=false&amp;textReferences=false&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;curInstr=0" target="_blank"  style="text-decoration:underline">Java visualizer</a></raw> to see the values in memory. Click on the Next button at the bottom of the code to see how the values of the variables change. You can run the visualizer on any Active Code in this e-book by just clicking on the Code Lens button at the top of each Active Code.</p>

<program xml:id="asgn_viz1" interactive="codelens" language="java">
    <input>
public class Test2
{
  public static void main(String[] args)
  {
    int x = 3;
    int y = 2;
    System.out.println(x);
    System.out.println(y);
    x = y;
    System.out.println(x);
    System.out.println(y);
    y = 5;
    System.out.println(x);
    System.out.println(y);
  }
}
    </input>
</program>
            <p> <term>Check your understanding</term></p>
            

    <exercise label="q2_1">
        <statement>

            <p>What are the values of x, y, and z after the following code executes?  You can step through this code by clicking on this <raw format="html" xml:space="preserve"><a href="http://www.pythontutor.com/visualize.html#code=public+class+Test2%0A%7B%0A+++public+static+void+main(String%5B%5D+args%29%0A+++%7B%0A+++++int+x+%3D+0%3B%0A+++++int+y+%3D+1%3B%0A+++++int+z+%3D+2%3B%0A+++++x+%3D+y%3B%0A+++++y+%3D+y+*+2%3B%0A+++++z+%3D+3%3B%0A+++++System.out.println(x%29%3B%0A+++++System.out.println(y%29%3B%0A+++++System.out.println(z%29%3B%0A+++%7D%0A%7D&amp;mode=display&amp;origin=opt-frontend.js&amp;cumulative=false&amp;heapPrimitives=false&amp;textReferences=false&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;curInstr=0" target="_blank"  style="text-decoration:underline">Java visualizer</a></raw> link.</p>
            <program language="java"><input>
int x = 0;
int y = 1;
int z = 2;
x = y;
y = y * 2;
z = 3;
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>x = 0, y = 1, z = 2</p>
                </statement>
                <feedback>
                    <p>These are the initial values in the variable, but the values are changed.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>x = 1, y = 2, z = 3</p>
                </statement>
                <feedback>
                    <p>x changes to y's initial value, y's value is doubled, and z is set to 3</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>x = 2, y = 2, z = 3</p>
                </statement>
                <feedback>
                    <p>Remember that the equal sign doesn't mean that the two sides are equal.  It sets the value for the variable on the left to the value from evaluating the right side.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>x = 0, y = 0, z = 3</p>
                </statement>
                <feedback>
                    <p>Remember that the equal sign doesn't mean that the two sides are equal.  It sets the value for the variable on the left to the value from evaluating the right side.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
            <p> <term>Mixed Up Code</term></p>
<exercise label="2_swap" numbered="yes" adaptive="yes" indentation="show" language="python"><statement>
            <p>The following has the correct code to ‘swap’ the values in x and y (so that x ends up with y’s initial value and y ends up with x’s initial value), but the code is mixed up and contains one extra block which is not needed in a correct solution.  Drag the needed blocks from the left into the correct order on the right. Check your solution by clicking on the Check button.  You will be told if any of the blocks are in the wrong order or if you need to remove one or more blocks.  After three incorrect attempts you will be able to use the Help Me button to make the problem easier.</p>
</statement>
<blocks><block order="1">
<cline>int x = 3;</cline>
<cline>int y = 5;</cline>
<cline>int temp = 0;</cline>
</block><block order="4">
<cline>temp = x;</cline>
</block><block order="2">
<cline>x = y;</cline>
</block><block order="5">
<cline>y = temp;</cline>
</block><block order="3" correct="no">
<cline>y = x; </cline>
</block></blocks></exercise>        </subsection>
  <subsection xml:id="_adding-1-to-a-variable">
            <title>Adding 1 to a Variable</title>
            <p>If you use a variable to keep score you would probably increment it (add one to the current value) whenever score should go up.  You can do this by setting the variable to the current value of the variable plus one (score = score + 1) as shown below. The formula looks a little crazy in math class, but it makes sense in coding because the variable on the left is set to the value of the arithmetic expression on the right. So, the score variable is set to the previous value of score + 1.</p>

<exercise label="lccv1">
    <statement>
            <p>Try the code below to see how score is incremented by 1. Try substituting 2 instead of 1 to see what happens.</p>

    </statement>
    <program xml:id="lccv1_editor" interactive="activecode" language="java">

        <input>
public class Test1
{
   public static void main(String[] args)
   {
     int score = 0;
     System.out.println(score);
     score = score + 1;
     System.out.println(score);
   }
}
        </input>
<tests>
// Test Code for Lesson 1.4 Expressions - iccv1
 import static org.junit.Assert.*;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;

 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
     @Test
     public void test1()
     {
         String output = getMethodOutput("main");
         String expect = "0\n1\n";
         boolean passed = getResults(expect, output, "Expected output from main", true);
         assertTrue(passed);
     }
 }
</tests>

    </program>
</exercise>
        </subsection>
  <subsection xml:id="_input-with-variables">
            <title>Input with Variables</title>
            
            <p>Variables are a powerful abstraction in programming because the same algorithm can be used with different input values saved in variables.  
            The code below will say hello to anyone who types in their name for different name values. Click on run and then type in your name. Then, try run again and type in a friend’s name. 
            The code works for any name: behold, the power of variables!</p>
            
            <p>We'll learn more about the Scanner class as we progress. For more information on using the Scanner class can be found here <url href="https://www.w3schools.com/java/java_user_input.asp" visual="https://www.w3schools.com/java/java_user_input.asp">https://www.w3schools.com/java/java_user_input.asp</url></p>
        </subsection>
  <subsection xml:id="_operators">
            <title>Operators</title>
            
            
            <p xml:id="_index-014">Java uses the standard mathematical operators for addition (+), subtraction (-), multiplication (*), and division (/). Arithmetic expressions can be of type int or double. An arithmetic operation that uses two int values will evaluate to an int value. An arithmetic operation that uses at least one double value will evaluate to a double value.  (You may have noticed that + was also used to put text together in the input program above – more on this when we talk about strings.)</p>
            <p>Java uses the operator <term>==</term> to test if the value on the left is equal to the value on the right and <term>!=</term> to test if two items are not equal.   Don’t get one equal sign = confused with two equal signs ==. They mean different things in Java. One equal sign is used to assign a value to a variable. Two equal signs are used to test a variable to see if it is a certain value and that returns true or false as you’ll see below.  Use == and != only with int values and not doubles because double values are an approximation and 3.3333 will not equal 3.3334 even though they are very close.</p>
            <p> <term>Coding Exercise:</term></p>

<exercise label="lcop1">
    <statement>
            <p>Run the code below to see all the operators in action. Do all of those operators do what you expected?  What about 2 / 3? Isn’t it surprising that it prints 0?  See the note below.</p>

    </statement>
    <program xml:id="lcop1_editor" interactive="activecode" language="java">

        <input>
public class Test1
{
   public static void main(String[] args)
   {
     System.out.println(2 + 3);
     System.out.println(2 - 3);
     System.out.println(2 * 3);
     System.out.println(2 / 3);
     // == is to test while = is to assign
     System.out.println(2 == 3);
     System.out.println(2 != 3);
   }
}
        </input>
<tests>
// Test Code for Lesson 1.4 Expressions - iccv1
 import static org.junit.Assert.*;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
     @Test
     public void test1()
     {
         String output = getMethodOutput("main");
         String expect = "5\n-1\n6\n0\nfalse\ntrue";
         boolean passed = getResults(expect, output, "Expected output from main", true);
         assertTrue(passed);
     }
 }
</tests>

    </program>
</exercise>
            <note>
                <p>When Java sees you doing integer division (or any operation with integers) it assumes you want an integer result so it throws away anything after the decimal point in the answer. If you need a double answer, you should make at least one of the values in the expression a double like 2.0.</p>
            </note>
            <p>With division, another thing to watch out for is dividing by 0. An attempt to divide an integer by zero will result in an <term>ArithmeticException</term> error message. Try it in one of the active code windows above.</p>
            <p>Operators can be used to create compound expressions with more than one operator. You can either use a literal value which is a fixed value like 2, or variables in them.  When compound expressions are evaluated, <term>operator precedence</term> rules are used, so that *, /, and % are done before + and -. However, anything in parentheses is done first. It doesn’t hurt to put in extra parentheses if you are unsure as to what will be done first.</p>
            <p> <term>Coding Exercise:</term></p>

<exercise label="compound1">
    <statement>
            <p>In the example below, try to guess what it will print out and then run it to see if you are right. Remember to consider <term>operator precedence</term>. How do the parentheses change the precedence?</p>

    </statement>
    <program xml:id="compound1_editor" interactive="activecode" language="java">

        <input>
public class TestCompound
{
   public static void main(String[] args)
   {
     System.out.println(2 + 3 * 2);
     System.out.println((2 + 3) * 2);
     System.out.println(2 + (3 * 2));
   }
}
        </input>
<tests>
// Test Code for Lesson 1.4 Expressions - compounds
 import static org.junit.Assert.*;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
     @Test
     public void test1()
     {
         String output = getMethodOutput("main");
         String expect = "8\n10\n8";
         boolean passed = getResults(expect, output, "Expected output from main", true);
         assertTrue(passed);
     }
 }
</tests>

    </program>
</exercise>
        </subsection>
  <subsection xml:id="_the-modulo-operator">
            <title>The Modulo Operator</title>
            <p>The percent sign operator (%) is the <term>mod (modulo)</term> or <term>remainder</term> operator.  The mod operator (x % y) returns the remainder after you divide x (first number) by y (second number) so 5 % 2 will return 1 since 2 goes into 5 two times with a remainder of 1.  Remember long division when you had to specify how many times one number went into another evenly and the remainder?  That remainder is what is returned by the modulo operator.</p>
            <figure align="center" xml:id="id214"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 1: Long division showing the integer result and the remainder</caption><image source="ch-javaintro/mod-py.png" width="50%"/></figure>
            
            <p>Here is a <raw format="html" xml:space="preserve"><a href="https://www.youtube.com/watch?v=jp-T9lFISlI&amp;ab_channel=colleenlewis" target="_blank">video</a></raw> about mod.</p>

    <video xml:id="jp-T9lFISlI" youtube="jp-T9lFISlI" width="82%"/>
                <p><term>Coding Exercise:</term></p>

<exercise label="lcop2">
    <statement>
            <p>In the example below, try to guess what it will print out and then run it to see if you are right.</p>

    </statement>
    <program xml:id="lcop2_editor" interactive="activecode" language="java">

        <input>
public class Test1
{
   public static void main(String[] args)
   {
     System.out.println(11 % 10);
     System.out.println(3 % 4);
     System.out.println(8 % 2);
     System.out.println(9 % 2);
   }
}
        </input>
<tests>
// Test Code for Lesson 1.4 Expressions - lcop2
 import static org.junit.Assert.*;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;

 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
     @Test
     public void test1()
     {
         String output = getMethodOutput("main");
         String expect = "1\n3\n0\n1";
         boolean passed = getResults(expect, output, "Expected output from main",true);
         assertTrue(passed);
     }
 }
</tests>

    </program>
</exercise>
            <note>
                <p>The result of x % y when x is smaller than y is always x.  The value y can’t go into x at all (goes in 0 times), since x is smaller than y, so the result is just x.  So if you see 2 % 3 the result is 2.</p>
            </note>
            
            
            <p xml:id="_index-114"><term>Check Your Understanding</term></p>

    <exercise label="q3_4_1">
        <statement>

            <p>1-4-10: What is the result of 158 % 10?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>15</p>
                </statement>
                <feedback>
                    <p>This would be the result of 158 divided by 10.  modulo gives you the remainder.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>16</p>
                </statement>
                <feedback>
                    <p>modulo gives you the remainder after the division.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>8</p>
                </statement>
                <feedback>
                    <p>When you divide 158 by 10 you get a remainder of 8.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="q3_4_2">
        <statement>

            <p>1-4-11: What is the result of 3 % 8?</p>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>3</p>
                </statement>
                <feedback>
                    <p>8 goes into 3 no times so the remainder is 3.  The remainder of a smaller number divided by a larger number is always the smaller number!</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>2</p>
                </statement>
                <feedback>
                    <p>This would be the remainder if the question was 8 % 3 but here we are asking for the reminder after we divide 3 by 8.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>8</p>
                </statement>
                <feedback>
                    <p>What is the remainder after you divide 3 by 8?</p>
                </feedback>
            </choice>
</choices>

    </exercise>
        </subsection>
 
  <subsection xml:id="_summary14">
            <title>Summary</title>
            <p><ul>
                <li>
                    <p>Arithmetic expressions include expressions of type int and double.</p>
                </li>
                <li>
                    <p>The arithmetic operators consist of +, -, * , /, and % (modulo for the remainder in division).</p>
                </li>
                <li>
                    <p>An arithmetic operation that uses two int values will evaluate to an int value. With integer division, any decimal part in the result will be thrown away.</p>
                </li>
                <li>
                    <p>An arithmetic operation that uses at least one double value will evaluate to a double value.</p>
                </li>
                <li>
                    <p>Operators can be used to construct compound expressions.</p>
                </li>
                <li>
                    <p>During evaluation, operands are associated with operators according to <term>operator precedence</term> to determine how they are grouped. (*, /, % have precedence over + and -, unless parentheses are used to group those.)</p>
                </li>
                <li>
                    <p>An attempt to divide an integer by zero will result in an ArithmeticException to occur.</p>
                </li>
                <li>
                    <p>The assignment operator (=) allows a program to initialize or change the value stored in a variable.  The value of the expression on the right is stored in the variable on the left.</p>
                </li>
                <li>
                    <p>During execution, expressions are evaluated to produce a single value.</p>
                </li>
                <li>
                    <p>The value of an expression has a type based on the evaluation of the expression.</p>
                </li>
            </ul></p>
        </subsection>
  <subsection xml:id="_ap-practice14">
            <title>Practice</title>
            

    <exercise label="apcsa_sample1">
        <statement>

            <p>Consider the following code segment.</p>
            <program language="java"><input>
int a = 5;
int b = 2;
double c = 3.0;
System.out.println(5 + a / b * c - 1);
</input></program>
            <p>What is printed when the code segment is executed?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>0.666666666666667</p>
                </statement>
                <feedback>
                    <p>Don't forget that division and multiplication will be done first due to operator precedence.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>9.0</p>
                </statement>
                <feedback>
                    <p>Don't forget that division and multiplication will be done first due to operator precedence.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>10.0</p>
                </statement>
                <feedback>
                    <p>Yes, this is equivalent to (5 + ((a/b)*c) - 1).</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>11.5</p>
                </statement>
                <feedback>
                    <p>Don't forget that division and multiplication will be done first due to operator precedence, and that an int/int gives an int truncated result where everything to the right of the decimal point is dropped.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>14.0</p>
                </statement>
                <feedback>
                    <p>Don't forget that division and multiplication will be done first due to operator precedence.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
        </subsection>
</section>
