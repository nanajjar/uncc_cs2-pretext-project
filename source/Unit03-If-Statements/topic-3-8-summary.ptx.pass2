<?xml version="1.0"?>
<!-- Generated by Docutils 0.19 -->
<section xml:id="_unit-3-summary">
        <title>Unit 3 - Summary</title>
        <p>In this chapter you learned about <term>conditionals</term>.  <term>Conditionals</term> are used to execute code when a Boolean expression is true or false.  A Boolean expression is one that is either true or false like <c>x &gt; 0</c>.</p>
        
        
        <subsection xml:id="_concept-summary index-0">
            <title>Concept Summary</title>
            <p><ul>
                <li>
                    <p><term>Block of statements</term> - One or more statements enclosed in an open curly brace ‘{’ and a closing curly brace ‘}’.</p>
                </li>
                <li>
                    <p><term>Boolean expression</term> - A mathematical or logical expression that is either true or false.</p>
                </li>
                <li>
                    <p><term>compound Boolean expressions</term> - A Boolean expression with two or more conditions joined by a logical <term>and</term> ‘&amp;&amp;’ or a logical <term>or</term> ‘||’.</p>
                </li>
                <li>
                    <p><term>conditional</term> - Used to execute code only if a Boolean expression is true.</p>
                </li>
                <li>
                    <p><term>DeMorgan’s Laws</term> - Rules about how to distribute a negation on a complex conditional.</p>
                </li>
                <li>
                    <p><term>logical and</term> - Used in compound boolean expressions that are true if both conditions are true.</p>
                </li>
                <li>
                    <p><term>logical or</term> - Used in compound boolean expressions that are true if one of the conditions is true.</p>
                </li>
                <li>
                    <p><term>negation</term> - turns a true statement false and a false statement true</p>
                </li>
                <li>
                    <p><term>short circuit evaluation</term> - The type of evaluation used for logical <term>and</term> (&amp;&amp;) and logical <term>or</term> (||) expressions. If the first condition is false in a compound boolean expression joined with a logical <term>and</term>, then the second condition won’t be evaluated. If the first condition is true in a compound boolean expression joined with a logical <term>or</term> then the second condition won’t be evaluate.</p>
                </li>
            </ul></p>
        </subsection>
        <subsection xml:id="_java-keyword-summary">
            <title>Java Keyword Summary</title>
            <p><ul>
                <li>
                    <p><term>if (Boolean expression)</term> - used to start a conditional statement.  This is followed by a statement or a block of statements that will be executed if the Boolean expression is true.</p>
                </li>
                <li>
                    <p><term>else</term> - used to execute a statement or block of statements if the Boolean expression on the if part was false.</p>
                </li>
                <li>
                    <p><term>else if (Boolean expression)</term> - used to have 3 or more possible outcomes such as if x is equal, x is greater than, or x is less than some value.  It will only execute if the condition in the ‘if’ was false and the condition in the else if is true.</p>
                </li>
            </ul></p>
        </subsection>
        <subsection xml:id="_vocabulary-practice">
            <title>Vocabulary Practice</title>

<exercise label="ch5_cond1">
    <statement><p>Drag the definition from the left and drop it on the correct concept on the right.  Click the "Check Me" button to see if you are correct</p></statement>
    <feedback><p>Review the summaries above.</p></feedback>
<matches><match order="1"><premise>joins two conditions and it will only be true if both of the conditions are true</premise><response>logical and</response></match><match order="2"><premise>used to execute code only when a Boolean condition is true</premise><response>conditional</response></match><match order="3"><premise>an expression that is either true or false</premise><response>Boolean expression</response></match><match order="4"><premise>an expression with two or more expressions joined together with logical ands or ors</premise><response>compound boolean expression</response></match></matches></exercise>
<exercise label="ch5_cond2">
    <statement><p>Drag the definition from the left and drop it on the correct method on the right.  Click the "Check Me" button to see if you are correct.</p></statement>
    <feedback><p>Review the summaries above.</p></feedback>
<matches><match order="1"><premise>used to execute code when at least one of two conditions is true</premise><response>logical or</response></match><match order="2"><premise>one or more statements enclosed in a open curly brace and a close curly brace</premise><response>block(s) of statements</response></match><match order="3"><premise>used to start a conditional and execute code if a condition is true</premise><response>if</response></match><match order="4"><premise>used to distribute a negation on a compound boolean expression</premise><response>DeMorgan's Laws</response></match></matches></exercise>            
            <p>For more practice, see this <raw format="html" xml:space="preserve">&lt;a href="https://quizlet.com/434070386/cs-awesome-unit-3-vocabulary-flash-cards/" target="_blank" style="text-decoration:underline"&gt;Quizlet&lt;/a&gt;</raw>.</p>
        </subsection>
        <subsection xml:id="_common-mistakes">
            <title>Common Mistakes</title>
            <blockquote>
                <p><ul>
                    <li>
                        <p>Using = instead of == in <c>if</c>’s. Remember that = is used to assign values and == is used to test. Ifs always use ==.</p>
                    </li>
                    <li>
                        <p>Putting a ; at the end of <c>if (test);</c>. Remember that the if statement ends after <c>if (test) statement;</c> or use curly brackets <c>if (test) { statements; }</c>.</p>
                    </li>
                    <li>
                        <p>Using two <c>if</c>’s one after the other instead of an <c>if</c> and <c>else</c>.</p>
                    </li>
                    <li>
                        <p>Trouble with compound boolean expressions which are two or more Boolean expressions joined by <term>and (&amp;&amp;)`` or **or (||)</term>.</p>
                    </li>
                    <li>
                        <p>Not understanding that <title_reference>||</title_reference> is an inclusive-or where one or <em>both</em> conditions must be true.</p>
                    </li>
                    <li>
                        <p>Trouble with understanding or applying negation (<c>!</c>).  See the section on DeMorgan’s Laws.</p>
                    </li>
                    <li>
                        <p>Not understanding short circuit evaluation which is that if evaluation of the first Boolean expression is enough to determine the truth of a complex conditional the second expression will not be evaluated.</p>
                    </li>
                </ul></p>
            </blockquote>
        </subsection>
    </section>
