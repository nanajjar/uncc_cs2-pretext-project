<section xml:id="sec-arraylist-dr0-understand-spec">
  <title>Step 0: Understanding the Specification</title>

  <p>
    With our project environment ready, we begin applying the <term>Design Recipe</term> (See <xref ref="ch-design-recipe" />) to implement our <c>DataStructures.ArrayList&lt;T&gt;</c>. As Step 0 is "Understand and Restate the Problem," and our "problem" is defined by the <c>ADTs.ListADT&lt;T&gt;</c> interface specification, our focus here is to deeply <term>understand</term> this specification: what operations must our <c>ArrayList&lt;T&gt;</c> provide, what are their conceptual effects, and what is the underlying model (a dynamic array)?
  </p>

  <subsection xml:id="subsec-arraylist-dr0-core-task-revised3">
    <title>The Core Task Revisited</title>
    <p>
      Our goal is to create the class <c>DataStructures.ArrayList&lt;T&gt;</c> which <c>implements</c> the <c>ADTs.ListADT&lt;T&gt;</c> interface. This class must use a standard Java array (<c>T[]</c>) internally for storage and must automatically handle <term>dynamic resizing</term> to accommodate a varying number of elements. It must also adhere precisely to the conceptual behavior defined for each method in the <c>ListADT&lt;T&gt;</c> interface (which implies handling various edge cases and error conditions appropriately, as will be detailed by the Javadoc and explored in later Design Recipe steps).
    </p>
  </subsection>

  <subsection xml:id="subsec-arraylist-dr0-understand-ops-revised5">
    <title>Understanding the Required Operations (The <c>ListADT</c> Contract)</title>
    <p>
      The <c>ListADT&lt;T&gt;</c> interface (in <c>src/ADTs/ListADT.java</c>) specifies the methods our class must provide. Let's understand the core concepts, grouped logically. Consult the Javadoc in the interface file later (especially during Step 2 and 3) for precise details on parameters, return values, and specific error conditions.
    </p>
    <note>
        <title>Focus on Javadoc Later</title>
        <p>
            While the Javadoc comments in <c>ListADT.java</c> contain the full specification details (like exact index bounds and exception types), for Step 0, we focus on the conceptual purpose and effect of each operation group. We'll refer back to the Javadoc for precision in later steps.
        </p>
    </note>

    <subsubsection xml:id="subsubsec-arraylist-dr0-add-ops-revised5">
        <title>1. Adding Elements</title>
        <p>The primary method for adding is <c>add(int index, T item)</c>. Conceptually, this operation increases the list's size by one and places the new <c>item</c> at the specified <c>index</c>. All elements that were previously at or after this <c>index</c> now occupy the next higher position (<c>index + 1</c>).</p>
        <p><em>Conceptual State Change for <c>add(1, "X")</c> on list <c>[A, B, C]</c> (size 3) in an array of capacity 5:</em></p>
        <pre>
State Before:
  size = 3
  array = [ A | B | C |null|null ] (capacity=5)
Indices:    0   1   2    3    4

Operation: add(1, "X")

State After:
  size = 4
  array = [ A | X | B | C |null ] (capacity=5)
Indices:    0   1   2   3    4
</pre>
        <p>The interface also provides convenience methods built upon this concept:</p>
        <ul>
            <li><c>addLast(T item)</c>: Adds the item to the very end (conceptually, at the position indicated by the current size).</li>
            <li><c>addFirst(T item)</c>: Adds the item to the very beginning (index 0), causing all previous elements to conceptually occupy positions one index higher.</li>
            <li><c>addAfter(T existing, T item)</c>: Conceptually, this finds the <c>existing</c> item and performs an <c>add</c> immediately after its position.</li>
        </ul>
        <p>A key underlying requirement is that the internal array must have enough capacity; if not, <term>resizing</term> must occur conceptually before the addition happens.</p>
        </subsubsection>

    <subsubsection xml:id="subsubsec-arraylist-dr0-remove-ops-revised5">
        <title>2. Removing Elements</title>
        <p>The primary method for removal by position is <c>remove(int index)</c>. Conceptually, this operation decreases the list's size by one and returns the element that was previously at the specified <c>index</c>. All elements that were after the removed element now occupy the next lower position (<c>index - 1</c>).</p>
        <p><em>Conceptual State Change for <c>remove(1)</c> from list <c>[A, B, C, D]</c> (size 4) in an array of capacity 5:</em></p>
        <pre>
State Before:
  size = 4
  array = [ A | B | C | D |null ] (capacity=5)
Indices:    0   1   2   3    4

Operation: remove(1) (Conceptually removes "B")

State After:
  size = 3
  array = [ A | C | D |null|null ] (capacity=5)
Indices:    0   1   2    3    4
</pre>
         <p>Other removal methods build on this:</p>
         <ul>
             <li><c>removeFirst()</c>: Removes the element at index <c>0</c>. Assumes the list is not empty.</li>
             <li><c>removeLast()</c>: Removes the element at index <c>size() - 1</c>. Assumes the list is not empty.</li>
             <li><c>remove(T item)</c>: Finds the <term>first</term> occurrence of <c>item</c> and conceptually performs a <c>remove</c> at that index. Indicates if an item was removed.</li>
             <li><c>clear()</c>: Removes all elements, resulting in an empty list (size 0).</li>
         </ul>
        </subsubsection>

     <subsubsection xml:id="subsubsec-arraylist-dr0-shifting-rationale-revised3">
        <title>Maintaining Compactness: The "No Gaps" Rule</title>
        <p>
            Notice that the conceptual "State After" diagrams for <c>add(index)</c> and <c>remove(index)</c> show the elements remaining tightly packed together at the start of the array space. This reflects a fundamental design principle for our <c>ArrayList</c>: elements must always occupy the contiguous block of indices from <c>0</c> to <c>size - 1</c>. We do not allow <c>null</c> "gaps" within the list's active range.
        </p>
        <p>
            Why enforce this "no gaps" rule? Allowing gaps (e.g., <c>[ A | null | C | D | null ]</c> after removing "B") would severely complicate almost every other list operation. How would <c>size()</c> work reliably? What should <c>get(1)</c> return? How would loops iterate correctly without needing extra checks for internal nulls?
        </p>
        <p>
            By deciding that our list elements must always form a contiguous block, we simplify the logic for <c>size()</c>, <c>get(index)</c>, iteration, and searching. The necessary consequence of this decision is that insertions and deletions in the middle or at the beginning *require* conceptually shifting subsequent elements to either make space or close a gap. Understanding this design constraint *now* (in Step 0) is key to understanding the required behavior.
        </p>
    </subsubsection>

    <subsubsection xml:id="subsubsec-arraylist-dr0-other-ops-revised6">
        <title>4. Other Operations (Accessing, Querying)</title>
        <p>These operations typically read the list's state without changing the order or size (except for <c>set</c>):</p>
        <ul>
            <li><p><c>get(int index)</c>: Returns the element currently at <c>index</c>.</p></li>
            <li><p><c>set(int index, T item)</c>: Replaces the element at <c>index</c> with <c>item</c>, returning the element that was replaced.</p></li>
            <li><p><c>first()</c>: Returns the <term>first</term> element in the list (at index 0) <term>without removing it</term>. Assumes the list is not empty.</p></li>
            <li><p><c>last()</c>: Returns the <term>last</term> element in the list (at index <c>size() - 1</c>) <term>without removing it</term>. Assumes the list is not empty.</p></li>
            <li><p><c>isEmpty()</c>: Reports if <c>size</c> is 0.</p></li>
            <li><p><c>size()</c>: Reports the current number of elements.</p></li>
            <li><p><c>contains(T item)</c>: Checks if the <c>item</c> exists anywhere in the range <c>0</c> to <c>size-1</c> (using <c>equals</c>).</p></li>
            <li><p><c>indexOf(T item)</c>: Finds the index of the first occurrence of <c>item</c> in the range <c>0</c> to <c>size-1</c>, or returns -1.</p></li>
        </ul>
    </subsubsection>

    <subsubsection xml:id="subsubsec-arraylist-dr0-modify-structure">
        <title>5. Modifying Structure</title>
        <p>This operation changes the list's overall state dramatically:</p>
         <ul>
            <li><p><c>clear()</c>: Removes all elements, resulting in an empty list (size 0).</p></li>
        </ul>
    </subsubsection>
  </subsection>

  <subsection xml:id="subsec-arraylist-dr0-dynamic-concept-revised5">
    <title>The Dynamic Resizing Concept Revisited</title>
    <p>
        The other key conceptual requirement is <term>dynamic resizing</term>, triggered when an <c>add</c> operation occurs and the internal array is already full (<c>size == array.length</c>).
    </p>
     <p>
        <em>Conceptual State Change for Adding "D" when internal array <c>[A, B, C]</c> (capacity 3, size 3) is full:</em>
    </p>
    <pre>
State Before Add:
  size = 3
  Internal array state = [ A | B | C ]  (capacity=3)

Action: addLast("D") --&gt; Requires more capacity!

State After Add (Conceptually):
  size = 4
  Internal array state = [ A | B | C | D |null|null ] (capacity is now larger, e.g., 6)
    </pre>
    <p>
        Conceptually, the list must behave as if it obtained a larger internal storage space, copied the old elements over, and then performed the addition. The user of the list doesn't see the resizing happen, only the successful addition and the increased size.
    </p>
  </subsection>

  <subsection xml:id="subsec-arraylist-dr0-interface-critique-revised4">
      <title>A Quick Look at the <c>ListADT</c> Design</title>
      <p>
          As we understand the specification, it's useful to think critically about its design. You might notice potential <term>redundancy</term> in the <c>ListADT</c>. For example, <c>addLast(T item)</c> has the same effect as <c>add(size(), item)</c>, and <c>removeFirst()</c> could likely be implemented by calling <c>remove(0)</c>.
      </p>
      <p>
          Why include such methods? Often for <term>convenience</term> or to match common ways users think about lists. This highlights that API design involves <term>trade-offs</term>. For this project, our task is simply to implement the interface *as given*, fulfilling the contract for all specified methods. Recognizing these aspects is part of critically understanding a specification.
      </p>
  </subsection>

  <p>
    With a solid grasp of the required operations' conceptual effects (including the "no gaps" principle), the dynamic array concept, and the overall task as defined by <c>ListADT</c>, we have completed Step 0. We are now ready to proceed to <term>Design Recipe Step 1</term>: defining the specific data fields needed within our <c>ArrayList&lt;T&gt;</c> class to maintain the list's state.
  </p>

</section>