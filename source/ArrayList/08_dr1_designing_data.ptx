<section xml:id="sec-arraylist-dr1-designing-data">
  <title>Step 1: Designing the Data</title>

  <p>
    Having thoroughly understood the required operations and conceptual model for our dynamic list in Step 0, we now move to <term>Design Recipe Step 1: Data Definitions</term>. For implementing a class like <c>ArrayList&lt;T&gt;</c>, this step focuses on answering the critical question: <term>What information must an <c>ArrayList</c> object remember internally (as instance variables or fields) to correctly perform all the operations specified by the <c>ListADT&lt;T&gt;</c> interface?</term>
  </p>
  <p>
    Let's think iteratively, considering some key operations identified in Step 0 and what data they imply a need for:
  </p>
  <ul>
    <li>
      <p>To implement <c>get(index)</c> or <c>set(index, item)</c>: We clearly need access to the underlying sequence of elements themselves to retrieve or modify the one at a specific position.
      <term>Information Needed:</term> The stored elements in order.</p>
    </li>
    <li>
      <p>To implement <c>size()</c> or <c>isEmpty()</c>: We need to know the current number of elements actively stored in the list, which might be different from the total storage capacity.
      <term>Information Needed:</term> The current count of elements.</p>
    </li>
    <li>
      <p>To implement <c>add(index, item)</c> or <c>remove(index)</c>: We need the current elements (to shift them) and the current size (to know which elements to shift and where the valid indices end). We also need to know if there's enough underlying storage capacity.
      <term>Information Needed:</term> The stored elements, the current count, the storage capacity.</p>
    </li>
     <li>
      <p>To handle <term>dynamic resizing</term> (when adding to a full list): We need access to the current elements (to copy them) and the current storage capacity (to know when it's full and how much larger the new storage should be).
      <term>Information Needed:</term> The stored elements, the storage capacity.</p>
    </li>
     <li>
      <p>To implement search operations like <c>contains(item)</c> or <c>indexOf(item)</c>: We need the current elements and the current size (to know how many elements to check).<br />
      <term>Information Needed:</term> The stored elements, the current count.</p>
    </li>
  </ul>

  <p>
    Analyzing these requirements, two fundamental pieces of information emerge as essential state that the <c>ArrayList</c> object must maintain:
  </p>
  <ol>
    <li>
      <p><term>The sequence of elements:</term> Since we decided in Step 0 to use an array internally, we need an array field to hold the actual list items.</p>
    </li>
    <li>
      <p><term>The current number of elements:</term> We need to track how many items are *actually* in the list, as distinct from the total capacity of the internal array. This logical size determines valid indices and when resizing is needed.</p>
    </li>
  </ol>
  <p>
    What about the array's <term>capacity</term>? Do we need a separate field for that? No, because Java arrays provide a built-in way to query their fixed length using <c>.length</c>. So, the capacity information is implicitly available from the array object itself.
  </p>
  <p>
    Therefore, our data definition for the internal state of <c>ArrayList&lt;T&gt;</c> requires just two <term>instance variables</term> (also called fields):
  </p>
  <program language="java">
public class ArrayList&lt;T&gt; implements ListADT&lt;T&gt; {

    // 1. An array to store the list elements.
    //    It holds type T (the generic type parameter).
    private T[] buffer;

    // 2. An integer to track the number of elements currently in the list.
    private int size;

    // Constructor and methods will go here...
}
  </program>

  <p>
    We declare these fields as <c>private</c>. Why? This enforces <term>encapsulation</term> (See <xref ref="ch-classes-objects" />), a core OOP principle. By making the internal array and the size count private, we prevent code outside the <c>ArrayList</c> class from directly manipulating them in ways that might break the list's rules or invariants (like the "no gaps" rule, or making <c>size</c> inconsistent with the actual number of elements). All interactions must happen through the public methods defined by the <c>ListADT</c> interface, ensuring the list maintains a valid state.
  </p>

  <subsection xml:id="subsec-arraylist-dr1-generic-array-issue">
      <title>The Challenge of Generic Arrays (<c>T[]</c>)</title>
      <p>
          Looking at <c>private T[] buffer;</c>, you might recall from the Generics chapter (See <xref ref="ch-generics" />, specifically the section on Type Erasure limitations) that creating arrays of a generic type parameter (<c>new T[capacity]</c>) is problematic in Java due to <term>type erasure</term>. At runtime, the JVM doesn't know what <c>T</c> actually is, so it cannot safely create an array specifically typed as <c>T[]</c>.
      </p>
      <p>
          The standard workaround, which we will use when we implement the constructor (in Step 5), is to create an array of <c>Object</c> and cast it:
      </p>
      <program language="java">
// Inside the ArrayList constructor (preview of Step 5)
private static final int DEFAULT_CAPACITY = 10; // Example capacity

public ArrayList() {
    // Cannot do: this.buffer = new T[DEFAULT_CAPACITY]; // Compile Error!
    // Workaround: Create Object array and cast
    this.buffer = (T[]) new Object[DEFAULT_CAPACITY]; // Requires unchecked cast
    this.size = 0;
}
      </program>
      <p>
          This cast (<c>(T[])</c>) generates an "unchecked cast" warning from the compiler, because the compiler cannot guarantee at runtime that this cast will always be safe (though in the context of how <c>ArrayList</c> uses it, it generally is). To acknowledge this necessary workaround, we typically add the <c>@SuppressWarnings("unchecked")</c> annotation to the constructor or the field declaration. Understanding this issue now helps clarify why the initialization code will look the way it does later. Our data definition remains conceptually <c>T[]</c>, but we must remember this implementation detail forced by type erasure.
      </p>
  </subsection>

  <subsection xml:id="subsec-arraylist-dr1-invariants">
      <title>Key Invariants</title>
      <p>
          Based on our chosen fields and the conceptual model from Step 0, we can define crucial <term>invariants</term> â€“ conditions that must <term>always</term> be true for any valid <c>ArrayList</c> object after any public method call completes:
      </p>
      <ul>
          <li><c>0 &lt;= size</c>: The size can never be negative.</li>
          <li><c>size &lt;= buffer.length</c>: The number of elements stored cannot exceed the capacity of the internal array.</li>
          <li>Elements are contiguous: The list elements occupy the array slots from index <c>0</c> to <c>size - 1</c>. All array slots from index <c>size</c> to <c>buffer.length - 1</c> are considered unused (and should ideally hold <c>null</c> references after a <c>remove</c> or <c>clear</c>). This directly relates to the "no gaps" rule.</li>
      </ul>
      <p>
          These invariants are critical. Our implementation code in Step 5 must ensure that every method maintains these conditions to guarantee the correctness and consistency of our <c>ArrayList</c>.
      </p>
  </subsection>

  <p>
    We have now defined the essential data fields (<c>buffer</c> and <c>size</c>) and their invariants needed for our <c>ArrayList&lt;T&gt;</c>. With this internal state defined, we are ready for <term>Design Recipe Step 2</term>: formally defining the class structure and method signatures based on the <c>ListADT</c> interface.
  </p>

</section>