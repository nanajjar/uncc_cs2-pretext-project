<section xml:id="sec-arraylist-dr5-impl-indexed-add-remove">
  <title>Step 5.3: Implementing Indexed Add and Remove</title>

  <introduction>
    <p>
      Continuing with <term>Design Recipe Step 5: Implementation</term>, we've established the core structure, resizing logic (<c>growIfNeeded</c>), and the ability to add elements to the end (<c>addLast</c>). Now, we tackle the more complex operations that work at arbitrary positions within the list: <c>add(int index, T item)</c> and <c>remove(int index)</c>. Both require careful handling of the internal <c>buffer</c> array to maintain the "no gaps" contiguous storage rule, which necessitates shifting elements.
    </p>
  </introduction>

  <subsection xml:id="subsec-arraylist-dr5-shift-right-impl">
    <title>Implementing the Shift-Right Logic (Helper Method)</title>
    <p>
      First, let's implement the helper logic we planned in Step 4 for shifting elements to the <term>right</term>, which is needed for <c>add(int index, T item)</c> when inserting before the current end (<c>index &lt; size</c>).
    </p>
    <p>
      <em>Recall the Logic Plan:</em> To avoid overwriting elements before they are moved, we must loop backwards, starting from the last element to be moved (<c>size - 1</c>) down to the insertion point (<c>index</c>), copying each element one position to its right (<c>buffer[i + 1] = buffer[i]</c>).
    </p>
    <program language="java">
    // Inside the ArrayList&lt;T&gt; class...

    /**
     * Shifts elements to the right to make space for insertion at a given index.
     * Elements from buffer[index] through buffer[size-1] are moved
     * to positions buffer[index+1] through buffer[size].
     * Assumes capacity is already sufficient and index is valid for insertion.
     * @param index The index at which an element will be inserted (0 &lt;= index &lt; size).
     */
    private void shiftRight(int index) {
        // Loop backwards from the last current element down to the insertion index
        // Example: size=3, index=1. Need to move elements at 1, 2.
        // i = 2: buffer[3] = buffer[2] (Move C)
        // i = 1: buffer[2] = buffer[1] (Move B)
        for (int i = this.size - 1; i >= index; i--) {
            this.buffer[i + 1] = this.buffer[i];
        }
        // The slot at buffer[index] now contains a copy but is ready to be overwritten.
    }
    </program>
    <p>This private helper encapsulates the right-shifting logic.</p>
  </subsection>

   <subsection xml:id="subsec-arraylist-dr5-impl-add-index-revised">
        <title>Implementing <c>add(int index, T item)</c></title>
        <p>
            Now we implement the main indexed add method using our helpers (<c>growIfNeeded</c> and <c>shiftRight</c>) based on the Step 4 skeleton.
        </p>
        <program language="java">
    // Inside the ArrayList&lt;T&gt; class...

    @Override
    public void add(int index, T item) {
        // --- Implementation based on Step 4 Skeleton ---

        // 1. Check for null item
        if (item == null) {
            throw new IllegalArgumentException("Item cannot be null.");
        }

        // 2. Check index bounds for insertion (0 &lt;= index &lt;= size)
        if (index &lt; 0 || index &gt; this.size) {
            throw new IndexOutOfBoundsException("Index: " + index + ", Size: " + this.size);
        }

        // 3. Ensure capacity for one more element
        growIfNeeded(); // Use helper implemented previously

        // 4. Make space by shifting elements right (helper handles index == size case)
        shiftRight(index); // Use our shiftRight helper

        // 5. Place the new item at the specified index
        this.buffer[index] = item;

        // 6. Increment the list size
        this.size++;
    }
        </program>
        <p>
            This code directly follows our plan, handling validation, capacity, shifting (only when needed), insertion, and size update.
        </p>
   </subsection>

   <subsection xml:id="subsec-arraylist-dr5-impl-add-first-revised">
        <title>Implementing <c>addFirst(T item)</c></title>
        <p>
            Based on our Step 4 direct logic skeleton, implementing <c>addFirst</c> requires checking the item, ensuring capacity, shifting *all* existing elements right (if any), placing the new item at index 0, and incrementing the size.
        </p>
        <program language="java">
    // Inside the ArrayList&lt;T&gt; class...

    @Override
    public void addFirst(T item) {
        // --- Implementation based on Step 4 Skeleton ---
        // 1. Check for null item
        if (item == null) {
            throw new IllegalArgumentException("Item cannot be null.");
        }
        // 2. Ensure capacity
        growIfNeeded(); // Call helper
        // 3. Shift *all* existing elements right
        if (this.size &gt; 0) { // Need to check if size &gt; 0 before shifting index 0..size-1
             shiftRight(0); // Call helper
        }
        // 4. Place item at buffer[0]
        this.buffer[0] = item;
        // 5. Increment size
        this.size++;
    }
        </program>
        <p>This implementation follows the specific sequence needed for adding at the beginning: check, grow, shift, place, increment.</p>
        <p><em>(Note: The <c>addLast</c> method was implemented directly in the previous section. While it could also delegate via <c>add(size, item)</c>, having the direct implementation is also fine, especially as it avoids the unnecessary <c>if (index &lt; size)</c> check present in the general <c>add</c> method.)</em></p>
   </subsection>

   <subsection xml:id="subsec-arraylist-dr5-shift-left-impl">
    <title>Implementing the Shift-Left Logic (Helper Method)</title>
    <p>
      Now let's turn to removal. The core <c>remove(int index)</c> operation requires shifting elements to the <term>left</term> to fill the gap created by the removal, maintaining the "no gaps" rule.
    </p>
    <p>
      <term>Identifying the Need for a Helper:</term> Just like shifting right, shifting left is a distinct sub-task. We'll plan a <term>private helper method</term> <c>shiftLeft</c>.
    </p>
    <p>
      <term>Designing the Shift-Left Loop:</term> We need to move elements starting from the one *after* the removed element (<c>index + 1</c>) up to the end of the list (<c>size - 1</c>), copying each one position to its left (<c>buffer[i - 1] = buffer[i]</c> or equivalently <c>buffer[i] = buffer[i + 1]</c> in a forward loop).
    </p>
    <ul>
      <li><p><term>Approach:</term> Unlike shifting right, we <em>can</em> loop forwards here without overwriting necessary data prematurely. We want to copy the element at <c>index + 1</c> to position <c>index</c>, then copy <c>index + 2</c> to <c>index + 1</c>, and so on.</p></li>
      <li><p><term>Loop Structure:</term></p>
          <ul>
              <li><p><em>Initialization:</em> Start the loop index <c>i</c> at the destination position of the first element to move: <c>int i = index</c>.</p></li>
              <li><p><em>Condition:</em> Continue as long as <c>i</c> is less than the *last* valid index before the original end: <c>i &lt; size - 1</c>. (Because when <c>i</c> is <c>size - 2</c>, we copy from <c>size - 1</c> to <c>size - 2</c>, which is the last copy needed).</p></li>
              <li><p><em>Update:</em> Move to the next destination index: <c>i++</c>.</p></li>
              <li><p><em>Body:</em> Copy the element from the position to the right (<c>i + 1</c>) into the current position (<c>i</c>): <c>buffer[i] = buffer[i + 1];</c>.</p></li>
          </ul>
      </li>
    </ul>
     <p>Here's the implementation for the <c>shiftLeft</c> helper method:</p>
     <program language="java">
    // Inside the ArrayList&lt;T&gt; class...

    /**
     * Shifts elements to the left to fill the gap after removal at a given index.
     * Elements from buffer[index+1] through buffer[size-1] are moved
     * to positions buffer[index] through buffer[size-2].
     * @param index The index from which an element was just removed (0 &lt;= index &lt; size).
     */
    private void shiftLeft(int index) {
        // Loop from the removal index up to the second-to-last element
        // Example: size=4, index=1 (removed B). Need to move C, D.
        // i = 1: buffer[1] = buffer[2] (Move C left)
        // i = 2: buffer[2] = buffer[3] (Move D left)
        // Loop condition i &lt; size - 1 (i &lt; 3) stops it correctly.
        for (int i = index; i &lt; this.size - 1; i++) {
            this.buffer[i] = this.buffer[i + 1];
        }
        // The slot at the old end (size - 1) now contains a duplicate
        // but will be handled by the calling remove method.
    }
     </program>
   </subsection>

   <subsection xml:id="subsec-arraylist-dr5-impl-remove-index">
        <title>Implementing <c>remove(int index)</c></title>
        <p>
            With the <c>shiftLeft</c> helper planned and implemented, we can now implement the main indexed remove method based on its Step 4 skeleton.
        </p>
        <program language="java">
    // Inside the ArrayList&lt;T&gt; class...

    @Override
    public T remove(int index) {
        // --- Implementation based on Step 4 Skeleton ---

        // 1. Check index bounds (0 &lt;= index &lt; size)
        if (index &lt; 0 || index &gt;= this.size) {
            throw new IndexOutOfBoundsException("Index: " + index + ", Size: " + this.size);
        }

        // 2. Store buffer[index] to return later
        T removedItem = this.buffer[index];

        // 3. If removing element before the last one (index &lt; size - 1), shift left
        if (index &lt; this.size - 1) {
            shiftLeft(index); // Use our new helper
        }
        // If removing the last element (index == size - 1), no shifting is needed.

        // 4. Decrement size *before* nulling out the slot
        this.size--; // List is now logically shorter

        // 5. Set the now-unused last slot to null (helps Garbage Collector)
        this.buffer[this.size] = null;

        // 6. Return the stored 'removedItem'
        return removedItem;
    }
        </program>
         <p>
            This implementation validates the index, saves the item to return, calls the <c>shiftLeft</c> helper only when necessary (optimizing removal of the last element), updates the size, cleans up the unused array slot, and returns the removed item.
        </p>
   </subsection>

   <subsection xml:id="subsec-arraylist-dr5-testing-indexed-ops">
      <title>Run Tests Again!</title>
      <p>
          You've now implemented the core indexed operations <c>add(index, item)</c> and <c>remove(index)</c>, along with their shifting helpers and potentially <c>addFirst</c>. This is significant progress! Run the full test suite in VSCode again.
      </p>
      <p>
          What to look for:
      </p>
      <ul>
          <li><p>✅ <c>AddTests:</c> Most tests here, including those involving insertion at various points, should now pass.</p></li>
          <li><p>✅ <c>RemoveTests</c> &gt; <c>testRemove_ByIndex_CausesShifting</c>, <c>testRemove_ByIndex_AtBoundaries</c>: These should now pass, verifying your <c>remove(index)</c> and <c>shiftLeft</c> logic.</p></li>
           <li><p>✅ <c>AccessModifyTests:</c> Tests like <c>testGet_ValidIndex</c> and <c>testSet_ValidIndex</c> should definitely pass now, as both the setup (<c>addLast</c> or maybe <c>add(index)</c>) and the tested methods (<c>get</c>, <c>set</c>) are implemented.</p></li>
           <li><p>✅ <c>ExceptionTests:</c> More exception tests related to valid/invalid indices for <c>add</c>, <c>remove</c>, <c>get</c>, <c>set</c> should be passing.</p></li>
           <li><p>❌ <term>Still Failing:</term> Tests for <c>removeFirst</c>, <c>removeLast</c>, <c>remove(T item)</c>, <c>addAfter</c>, <c>first</c>, <c>last</c>, <c>contains</c>, <c>indexOf</c>, and <c>clear</c> are still expected to fail as those methods haven't been fully implemented yet (or rely on unimplemented methods like <c>indexOf</c>). Also, exception tests for <c>NoSuchElementException</c> will fail.</p></li>
       </ul>
       <p>
           Focus on debugging any failures in the indexed add/remove logic or the tests that should now be passing based on these implementations. Ensure edge cases (index 0, index size-1, index size) are handled correctly.
       </p>
   </subsection>

            <note><title>Code Snapshot</title><p>The state of the code after completing this section (implementing indexed add/remove and shift helpers) can be found on the <c>dr-step-5.3-indexed-impl</c> branch in the repository.</p></note>
   <p>
      Implementing the indexed add and remove methods, along with their associated shifting logic, forms the most complex part of the array list. With these in place and tested, implementing the remaining methods will often be simpler, frequently leveraging the logic we've already built.
   </p>

</section>