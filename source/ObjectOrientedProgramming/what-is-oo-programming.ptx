<section xml:id="what-is-oo-programming">
  <title>What Is  Object-Oriented  Programming?</title>
  <introduction>
    <p>
      Java is an object-oriented (OO) language, and this book emphasizes an object-oriented approach to programming. 
      To deepen our understanding and effectively apply Java's capabilities, we first need to discuss:
      <ul>
       <li><p> what an object is</p></li>
       <li><p> how objects are grouped into classes</p></li>
       <li><p> how classes are related to each other</p></li>
       <li><p> how objects use messages to interact with each other</p></li>
      </ul>
    </p>
  </introduction>
  <subsection xml:id="fig-kitchen">
    <title>Basic OOP Metaphor:
    Interacting Objects</title>
    <p>
      A Java program, and any object-oriented program,
      is a collection of interacting objects that models a collection of real-world 
      objects.
    </p>

    <figure xml:id="fig-umlmsg2">
      <caption>This UML diagram illustrates an ATM
      transaction in which a customer asks the ATM machine for their current
      balance. 
      </caption> 
      <image width="73%" source="ch-oo/atmreport-2.png"/>
    </figure>
     <p>
      For example, in the ATM transaction pictured in <xref ref="fig-umlmsg2">Figure</xref>,
      a customer uses an ATM machine to check their account balance. 
      There are three entities involved: (1) the customer, (2) the bank machine, and (3) the customer's bank account.
    </p>
    <p>
      If you were writing the Java program for the ATM machine, you would represent each of
      those entities as Java objects.  
    </p>
  </subsection>
  <subsection>
    <title>What is an Object?</title>
    <p>
      So what is an object?
      Just as in the real world, an <term>object</term> is any thing whatsoever.
      An object can be a physical thing,
      such as an <c>ATM</c>, or a mental thing,
      such as an <c>Idea</c>. It can be a natural thing,
      such as an <c>Customer</c>, or an artificial,
      human-made thing, such as a <c>BankAccount</c>. 
    </p>
    <p>
      Throughout this text,
      we will use the notation shown in <xref ref="fig-umlobj1">Figure</xref>
      to depict objects and to illustrate object-oriented concepts.
      The notation is known as the <term>Unified Modeling Language</term>,
      or <term>UML</term> for short,
      and it is a standard in the object-oriented programming community.
    </p>
    <p>
      As the diagram shows, an object is represented by a rectangle whose label consists of the object's (optional) id and its type.
      An object's <em>id</em> is the name by which it is referred to in the computer program.
    </p>
    <figure xml:id="fig-umlobj1">
      <caption>In UML, objects are represented by
       rectangles that are labeled with a two-part label of the form <em>id:Type</em>. The object's label is always underlined.
      </caption>
      <image width="73%" source="ch-oo/umlobj1-2.png"/>
    </figure>
  </subsection>
  <subsection>
    <title>Attributes and Values</title>
     <p>
    Just like real-world objects, the objects in our programs have specific attributes that define their characteristics. 
      These attributes help describe the state of an object at any given moment.
      </p>
<p>
  For example, consider an ATM object in a banking system. It might have attributes such as:
<ul>
  <li>
    <p>
      The current amount of cash available for dispensing.
    </p>
  </li>
  <li>
    <p>
      The location of the ATM.
    </p>
  </li>
  <li>
    <p>
      The status (e.g., operational or out of service).
    </p>
  </li>
</ul>
</p>

<p>
  Similarly, a Customer object could include attributes like:
<ul>
  <li>
    <p>
      Name
    </p>
  </li>
  <li>
    <p>
      Address
    </p>
  </li>
  <li>
    <p>
      Account number
    </p>
  </li>
</ul>
</p>

<p>
  These attributes not only define the object but also influence its behavior. 
  For instance, an ATM object might have methods to dispense cash, accept deposits, 
  or check balances, while a Customer object could have methods to update contact information 
  or view transaction history.
</p>
<p>
  It's also important to note that an object's attributes can themselves be objects. For example:
<ul>
  <li>
    <p>
      The cash in an ATM could be modeled as a Number object.
    </p>
  </li>
  <li>
    <p>
      The account number of a customer might also be represented as a Number object.
    </p>
  </li>
</ul>
</p>
<p>
This approach reflects how object-oriented design models systems by combining state (attributes) and behavior (methods) into reusable and scalable components.

</p>
    <p>
      Just as with real objects,
      the objects in our programs have certain characteristic <term>attributes</term>.
      For example,
      an <c>ATM</c> object would have a current amount of <c>cash</c> that it could dispense.
      A <c>Customer</c> object would have a name, address, and account number. 
      Notice that an object's attributes are themselves objects.
      The ATM's <c>cash</c> and the customer's account number are <c>Number</c> objects.
    </p>
    <p>
      <xref ref="fig-umlobj2">Figure</xref>
      shows two <c>ATM</c> objects and their respective attributes.
      As you can see,
      an object's attributes are listed in a second partition of the UML diagram.
      Notice that each attribute has a <term>value</term>.
      So the <c>lobby:ATM</c> has a $8650.0 in <c>cash</c>, while the <c>drivethru:ATM</c> has only $150.0 in <c>cash</c>.
    </p>
    <figure xml:id="fig-umlobj2">
      <caption>A second partition of an object diagram is used to display
      the object's attributes and their values.</caption>
      <image width="73%" source="ch-oo/umlobj2-2.png"/>
    </figure>
    <p>
      We sometimes refer to an object's attributes and their values as its <term>state</term>.
      For example,  the current state of the <c>lobby:ATM</c> is $8650.0 in cash. Some transactions, such
      as depositing or withdrawing money, would change the ATM's state.
    </p>
    <p>  
      Of course, this is a gross simplification of an ATM's state,
      which would also include many other attributes.
      But, hopefully, you see the point.
    </p>
  </subsection>
  <subsection>
    <title>Actions and Messages</title>
<p>
  In addition to their attributes, objects also have characteristic <term>actions</term> or behaviors. 
  Objects can perform actions or have actions performed on them. 
  In fact, programming in Java largely involves directing objects to carry out specific tasks.
</p>
<p>
  For example, an ATM object might have methods to dispense cash, accept deposits or check balances. Similarly, a Customer object could have methods to
update contact information or view transaction history.
</p>
<p>
  Consider a scenario where a customer presses the “Current Balance” button on an ATM. 
  This action instructs the ATM object to report the customer's current bank balance. 
  As shown in <xref ref="fig-umlmsg2">Figure</xref>, this process involves:

<ol>
  <li>
    <p>
      The ATM object sending a "get balance" request to the customer's account object.
    </p>
  </li>
  <li>
    <p>
      The account object responding with the balance, such as 528.52.
    </p>
  </li>
  <li>
    <p>
      The ATM object displaying this value to the customer.
    </p>
  </li>
</ol> 
</p>
<p>
  This demonstrates how the actions associated with an object allow it to send <term>messages</term> to other 
  objects and retrieve information from them. A message represents the passing of data or information 
  between objects, as illustrated by the arrows in <xref ref="fig-umlmsg2">Figure</xref>.
  </p>
<p>
  Performing an action or responding to a message can sometimes cause a change in an object's <term>state</term>. 
  For example, if the customer requests a $20 withdrawal, their bank account balance is reduced by $20.

</p>
<p>
  On the other hand, some actions—such as checking the balance—simply retrieve information without altering 
  the object's state.
</p>

    
  </subsection>
  <subsection>
    <title>What is a Class?</title>
    <p>
      Objects are organized into <term>classes</term>. Both the <c>lobby</c> and <c>driveThru</c> ATMs
      are members of the <c>ATM</c> <term>class</term> (<xref ref="fig-umlobj2">Figure</xref>). All members 
      of a given class share the same attributes and actions. We say that an object is an <term>instance</term> of a class.
    </p>
    <p>
      In an object-oriented program, a <term>class definition</term> serves as a blueprint or template 
      for the objects that the program uses. It describes the attributes and actions that characterize 
      the objects of that class.
   </p>
   <p>
      A good analogy here is to think of a class definition as a cookie cutter and its objects,
      or instances, as individual cookies.
      Just as we use the cookie cutter to stamp out cookies of a certain shape,
      in an object-oriented program,
      we use class definitions to create objects of a certain type.
    </p>
    <p>
      Writing an object-oriented program is largely a matter of designing classes and writing definitions for those classes in Java.
      Designing a class is a matter of specifying all of the attributes and behaviors that are characteristic of that type of object.
    </p>
<!--
    <p>
      For example, suppose we are writing a drawing program.
      One type of object we would need for our program is a rectangle.
      A <c>Rectangle</c> object has two fundamental attributes,
      a <c>length</c> and a <c>width</c>. Given these attributes,
      we can define characteristic rectangle actions,
      such as the ability to calculate its area and the ability to draw itself.
      Identifying an object's attributes and actions is the kind of design activity that goes into developing an object-oriented program.
    </p>
-->
    <figure xml:id="fig-umlrect">
      <caption>A UML diagram of the <c>Account</c> class.</caption>
      <image width="73%" source="ch-oo/Fig-0.9-rev.png"/>
    </figure>
    <p>
      <xref ref="fig-umlrect">Figure</xref>
      shows a UML diagram of a scaled down <c>Account</c> class for our ATM example.
      A  UML class symbol has up to three partitions. The top partition gives
      just the class's name and it is not underlined.
      The second partition lists the class's attributes and the third partition lists the class's actions.
    </p>
    <p>
      Our simplified <c>Account</c> objects have two attributes. <c>customerID</c> and <c>balance</c> and
      can perform two actions, <c>validateID</c> and <c>reportBalance()</c>.
      Note that the attributes have no values. Only the claas's objects, its instances, will have values for these attributes.
    </p>
  </subsection>
  <subsection>
    <title>Variables and Methods</title>
    <p>
      Up to this point we have been using the terms
      <term>attribute</term> and <term>action</term>
      to describe an object's features.
      We will continue to use this terminology when talking in general 
      about objects or when talking about an object or class represented by a UML diagram.
    </p>
    <p>
      However, when talking about Java code,
      the more common way to describe an object's features are to talk about its variables and methods.
      A <term>variable</term>, which corresponds to an attribute,
      is a named memory location that can store a certain type of value.
    </p>
    <p>
      For example, as <xref ref="fig-umlrect">Figure</xref>
      shows,  <c>customerID</c> and is a variable that can store whole number (<c>int</c>) values, such as 100009044 And 
      <c>balance</c> is a variable that can store decimal (<c>double</c>) values, such as 582.74. 
    </p>
    <p>
      A <term>method</term>, which corresponds to an action or a behavior,
      is a named chunk of code that can be called upon or <term>invoked</term>
      to perform a certain pre-defined set of actions.
      For example, as its name suggests,
      the <c>reportBalance()</c> method reports the customer's account balance.
    </p>
  </subsection>
<!-- **************************  MAJOR CUT ************************
  <subsection>
    <title>Instance versus Class Variables and Methods</title>
    <p>
      Variables and methods can be associated either with objects or their classes.
      An <term>instance variable</term>
      (or <term>instance method</term>)
      is a variable
      (or method)
      that belongs to an object.
      By contrast, a <term>class variable</term>
      (or <term>class method</term>)
      is a variable
      (or method)
      that is associated with the class itself.
      An example will help make this distinction clear.
    </p>
    <p>
      An instance variable will have different values for different instances.
      For example,
      an individual <c>Rectangle</c> will have different its for their <c>length</c>, <c>width</c>, <c>x</c>, and
<c>y</c> variables.
      So these are examples of instance variables.
      The
<c>calculateArea()</c> method is an example of an instance method because it uses the instance's current length and width values in its calculation.
      Similarly, the <c>draw()</c> method is an instance method,
      because it uses the object's length and width to draw the object's shape.
    </p>
    <p>
      An example of a class variable would be a variable in the <c>Rectangle</c> class that is used to keep track of how many individual
<c>Rectangle</c>s have been created.
      (Our drawing program might need this information to help manage its memory resources.)
      Suppose we name this variable <c>nRectangles</c> and suppose we add 1 to it each time a new <c>Rectangle</c> instance is created.
    </p>
    <p>
      An example of a method that is associated with the class is a special method known as a <term>constructor</term>.
      This is a method used to create an object.
      It is used to create an instance of a class.
      Calling a constructor to create an object is like pressing the cookie cutter into the cookie dough:
      the result is an individual cookie
      (object).
    </p>
    <figure xml:id="fig-rects">
      <caption>The <c>Rectangle</c> class and two of its
      instances. Note that the class variable, <c>nRectangles</c>, is
      underlined to distinguish it from <c>length</c> and <c>width</c>, the
      instance variables.</caption>
      <image width="73%" source="chptr00/rects.png"/>
    </figure>
    <p>
      <xref ref="fig-rects">Figure</xref> illustrates these concepts.
      Note that class variables are underlined in the UML diagram.
      We have modified the
<c>Rectangle</c> class to include its constructor method,
      which is named <c>Rectangle()</c>. Note that it takes four arguments,
      representing the values that we want to give as the rectangle's <term>x</term>,
      <term>y</term>, length and width respectively.
      Note also how the <c>Rectangle</c> class's <c>nRectangles</c> variable has a value of 2, representing that two <c>Rectangle</c> instances have been created.
      These are shown as members of the <c>Rectangle</c> class.
    </p>
    <p>
      It won't be obvious to you at this point,
      but <c>nRectangles</c> is a value that has to be associated with the <c>Rectangle</c> class,
      not with its instances.
      To see this let's imagine what happens when a new
<c>Rectangle</c> instance is created.
      <xref ref="fig-rectconstr">Figure</xref> illustrates the process.
      When the <c>Rectangle()</c> constructor is invoked,
      its arguments (100, 50, 25, 10) are used by the <c>Rectangle</c> class to create a <c>Rectangle</c> object located at <term>x=100</term>,
      <term>y=50</term> and with a length of 25 and width of 10.
      The constructor method also increases the value of <c>nRectangles</c> by 1 as a way of keeping count of how many objects it has created.
    </p>
    <figure xml:id="fig-rectconstr">>
      <image width="73%" source="chptr00/rectconstr.png"/>
      <caption>Constructing a <c>Rectangle</c> instance.</caption>
    </figure>
  </subsection>
***********************************************  CUT +***************
--> 
  <subsection>
    <title>Class Hierarchy and Inheritance</title>
    <p>
      How are classes related to each other?
      In Java, and in any other object-oriented language,
      classes are organized in a class hierarchy.
    </p>
    <p>
      A <term>class hierarchy</term> is like an upside-down tree.
      At the very top of the hierarchy is the most general class.
      In Java, the most general class is the <c>Object</c> class.
      The classes below <c>Object</c> in the hierarchy are known as its <term>subclasses</term>.
      Since all of the objects we use in our programs belong to some class or other,
      this is like saying that every object is an <c>Object</c>.
    </p>
    <p>
      <xref ref="fig-classhier">Figure</xref>
      illustrates the concept of a class hierarchy using some of the classes described in this section.
      Notice that the <c>Object</c> class occurs at the top of the hierarchy.
      It is the most general class.
      It has features that are common to all Java objects.
    </p>
    <p>
      As you move down the hierarchy,
      the classes become more and more specialized.
      An <c>Account</c> is an <c>Object</c> but it contains attributes <mdash/> customerID and balance <mdash/> that
      it more specialized than its parent class (<c>Object</c>). 
    </p>
    <p>
      Notice that we have added a <c>Person</c> class to the hierarchy as the <term>superclass</term> of <c>Customer</c>.
      Customers are more specialized than persons<mdash/>they have bank accounts.       
    </p>
    <figure xml:id="fig-classhier">
      <caption>A hierarchy of Java classes.</caption>
      <image width="73%" source="ch-oo/classhier.png"/>
    </figure>
    <p>
      A subclass is said to <term>inherit</term> the attributes (variables) and actions (methods) of its superclass. Thus,
      a <c>Customer</c> would inherit things like a name, address, phone number and other attributes from the <c>Person</c>
      class. The subclass is said to <term>extend</term> the superclass by adding attributes and actions to those it
      inherits. 
    </p>
    <p>
      This <term>class inheritance</term> is similar to the classification of natural things.
      A horse is a mammal. Horses inherit the characteristic of being warm blooded by virtue of 
      also being mammals. But they also have specialized attribues <mdash/>manes hooves<mdash/> that
      distinguish them from other mammals, such as cows and humans.
    </p>
<!--
    <p>
      To illustrate how inheritance works,
      lets go back to our chess program.
      There are several different types of <c>ChessPiece</c> s.
      There are <c>Pawn</c> s, and <c>Knight</c> s, and <c>Queen</c> s and <c>King</c> s.
      <xref ref="fig-chesshier">Figure</xref>
      illustrates the chess piece hierarchy.
      A pair of attributes that all chess pieces have in common is their <c>row</c> and <c>column</c> position on the chess board.
      Because all chess pieces have these attributes in common,
      they are located at the top of the <c>ChessPiece</c> hierarchy and inherited by all <c>ChessPiece</c> subclasses.
      Of course, the <c>row</c> and <c>column</c> attributes are given different values in each <c>ChessPiece</c> object.
    </p>
    <figure xml:id="fig-chesshier">
      <caption>The <c>ChessPiece</c> hierarchy.</caption>
      <image width="73%" source="chptr00/chesshier-small.png"/>
    </figure>
    <p>
      One of the actions that all chess pieces have in common is that they can <c>moveTo()</c> a given square on the chess board.
      But different types of chess pieces have different ways of moving.
      For example,
      a
       <c>Bishop</c> can only move along diagonals on the chess board,
      whereas a <c>Rook</c> can only move along a row or column on the chess board.
      So, clearly,
      we can't describe a <c>moveTo()</c> method that will work for all <c>ChessPiece</c> s.
      This is why we put the <c>moveTo()</c> method in all of the <c>ChessPiece</c> subclasses.
      The <c>ChessPiece</c> class also has a <c>moveTo()</c> method,
      but note that its name is italicized.
      This indicates that it cannot be completely defined at that level.
    </p>
    <p>
      Finally, note that in chess,
      the king has certain special attributes and actions.
      Thus only the king can be put <term>in check</term>.
      This means that the king is under attack and in danger of being captured,
      thereby ending the game.
      Similarly, only the king has the ability to castle.
      This is special move that a king can make together with one of its rooks under certain conditions.
      Thus, the reason we show the <c>inCheck</c> attribute and <c>castle()</c> action in the <c>King</c> class is because these are characteristics that particular to <c>King</c> s.
    </p>
    <p>
      In this way,
      a class hierarchy represents a <term>specialization</term>
      of classes as you move from top to bottom.
      The most general class, <c>ChessPiece</c>, is at the top of the hierarchy.
      Its attributes and methods are passed on to
      (inherited by)
      its subclasses.
      However, in addition to the attributes and methods they inherit from their superclasses,
      the subclasses define their own special attributes and methods.
      Each of the subclasses, <c>Pawn</c>, <c>Bishop</c>, and so on,
      represents some kind of specialization of the superclass.
      In this example,
      each of the subclasses have their own distinctive ways of moving.
      And the <c>King</c> subclass has unique attributes and actions (<c>inCheck</c> and <c>castle()</c>).
    </p>
-->
  </subsection>
  <subsection xml:id="summaryof-important-points">
    <title>Principles of  Object-Oriented  Design</title>
    <p>
      As we embark on learning object-oriented programming in Java, there are a 
      number of principles and practices that we will aspire towards.
      <ul>
        <li>
          <term>Divide-and-Conquer Principle.</term> Generally, we will divide solutions to problems into 
          sets of interacting objects, each with its own specialized tasks,
<!--
           program is to divide 
          the overall problem into a number of objects that will interact with each other to solve the problem. 
          Thus, an object-oriented program employs a <term>division of labor</term> much as we do in organizing 
          many of our real-world tasks. This <term>divide-and-conquer</term> approach is an important problem-solving strategy. 
-->
        </li>
        <li>
         <term>Encapsulation Principle.</term>  Each object will encapsulate the expertise, attributes and actions that 
         it needs to carry out its role in the solution.
<!--
         Once the objects are identified, the next step involves deciding, 
         for each object, what attributes it has and what actions it will take. 
         The goal here is to encapsulate within each object the expertise needed to carry 
         out its role in the program. Each object is a self-contained module with a clear 
         responsibility and the tools (attributes and actions) necessary to carry out its role. 
         Just as a dentist encapsulates the expertise needed to diagnose and treat a tooth ache, 
         a well-designed object contains the information and methods needed to perform its role. 
-->
        </li>
        <li>
         <term>Interface Principle.</term> Each object will present an interface to other
         objects that will limit the way they interact with each other.
<!--
         In order for objects to work cooperatively and 
         efficiently, we have to clarify exactly how they should interact, 
         or <term>interface</term>, with one another. An object's interface should be designed 
         to limit the way the object can be used by other objects. Think of how the 
         different interfaces presented by a digital and analog watch determine 
         how the watches are used. In a digital watch, time is displayed in discrete units, 
         and buttons are used to set the time in hours, minutes and seconds. In an 
         analog watch, the time is displayed by hands on a clock face, and time is set, 
         less precisely, by turning a small wheel.
-->
        </li>
        <li>
          <term>Information Hiding Principle.</term> Objects will be designed to hide certain information
          and implementation details from other objects.
<!--
          In order to enable objects to work together cooperatively, certain details of their 
          individual design and performance should be hidden from other objects. 
          To use the watch analogy again, in order to use a watch we needn't know 
          how its time keeping mechanism works. That level of detail is hidden from us. 
          Hiding such implementation details protects the watch's mechanism, while not limiting its usefulness.
-->
        </li>
        <li>
         <term>Generality Principle.</term> Objects will be designed as generally as possible. So that 
         rather than solving only a particular problem they can solve similar problems of the same kind.
<!--
         To make objects as generally useful as possible, we design 
         them not for a particular task but rather for a particular <term>kind</term> of task. This 
         principle underlies the use of software libraries. As we will see, Java comes 
         with an extensive library of classes that specialize in performing certain 
         kinds of input and output operations. For example, rather than having 
         to write our own method to print a message on the console, we can use a library object to handle our printing tasks.
-->
        </li>
        <li> 
         <term>Extensibility Principle.</term> Objects will be designed so that they can potentially be extended to perform
         related tasks.
<!--
         One of the strengths of the object-oriented approach is the ability to extend an object's behavior to handle new tasks. This also has its analogue in the everyday world. If a company needs sales agents to specialize in hardware orders, it would be more economical to extend the skills of its current sales agents instead of training a novice from scratch. In the same way, in the object-oriented approach, an object whose role is to input data might be specialized to input numeric data.
-->
        </li>
        <li>
          <term>Abstraction Principle.</term>  The objects we design will be 
          abstractions because they will ignore many of the 
          attributes and actions that characterize the real objects they represent. They will include only 
          on those attributes and behaviors needed to solve a particular problem.
<!--
Abstraction is the ability to focus on the important features of an object when trying to work with large amounts of information. For example, if we are trying to design a floor plan for a kitchen, we can focus on the shapes and relative sizes of the appliances and ignore attributes such as color, style, and manufacturer. The objects we design in our Java programs will be abstractions in this sense because they ignore many of the attributes that characterize the real objects and focus only on those attributes that are essential for solving a particular problem.
-->
       </li>
      </ul>
    </p>
    <p>
      Although these principles may not mean much to you now, they will become clear as we use them
      to learn how to design and write object-oriented Java programs.
    </p>
</subsection>
</section>