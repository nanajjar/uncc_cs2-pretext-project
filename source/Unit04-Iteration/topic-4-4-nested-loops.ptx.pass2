<?xml version="1.0"?>
<!-- Generated by Docutils 0.19 -->
<section>
  <title>Nested For Loops</title>
  <p xml:id="_index-0">A <term>nested loop</term> has one loop inside of another.  These are typically used for working with two dimensions such as printing stars in rows and columns as shown below.   When a loop is nested inside another loop, the inner loop runs many times inside the outer loop. In each iteration of the outer loop, the inner loop will be re-started. The inner loop must finish all of its iterations before the outer loop can continue to its next iteration.</p>
  <figure align="center" xml:id="id1">
    <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 1: Nested Loops</caption>
    <image source="Unit4-Iteration/Figures/nestedloops.png" width="350px%"/>
  </figure>
  <p><image source="../_static/codingExercise.png" width="30px%" alt="coding exercise"/> <term>Coding Exercises</term></p>
  <p>What does the following code print out? Watch the code run in the  <raw format="html" xml:space="preserve">&lt;a href="http://www.pythontutor.com/visualize.html#code=public%20class%20NestedLoops%0A%7B%0A%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%0A%20%20%20%7B%0A%20%20%20%20%20%20%20for%20%28int%20row%20%3D%201%3B%20row%20%3C%3D%203%3B%20row%2B%2B%29%0A%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20for%20%28int%20col%20%3D%201%3B%20col%20%3C%3D%205%3B%20col%2B%2B%29%0A%20%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.print%28%22*%22%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20System.out.println%28%29%3B%0A%20%20%20%20%20%20%20%7D%0A%20%20%20%7D%0A%7D&amp;cumulative=false&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false&amp;curInstr=0" target="_blank"  style="text-decoration:underline"&gt;Java visualizer&lt;/a&gt;</raw> by clicking the CodeLens button and then forward. Notice how the inner loop is started over for each row. Can you predict how many rows and columns of stars there will be?</p>
  <p><image source="../_static/exercise.png" width="35%" alt="exercise"/> <term>Check your understanding</term></p>
  <subsection xml:id="_nested-loops-with-turtles">
            <title>Nested Loops with Turtles</title>
            <p>Try nested loops with turtles to create a snowflake design!</p>
            <p><image source="../_static/codingExercise.png" width="30px%" alt="coding exercise"/> <term>Coding Exercise</term></p>
            

<exercise label="TurtleNestedLoop">
    <statement>
            <p>The turtle below is trying to draw a square many times to create a snowflake pattern. Can you change the outer loop so that the pattern completes all the way around? Try different ending values for the counter i to find the smallest number that works between 5 and 15.</p>
            <p>If the code below does not work in your browser, you can copy the code into  this <raw format="html" xml:space="preserve">&lt;a href="https://repl.it/@BerylHoffman/Java-Swing-Turtle" target="_blank"&gt;repl.it link&lt;/a&gt;</raw> (refresh page after forking and if it gets stuck) or download the files <raw format="html" xml:space="preserve">&lt;a href="https://github.com/bhoffman0/APCSA-2019/tree/master/_sources/Unit2-Using-Objects/TurtleJavaSwingCode.zip" target="_blank" style="text-decoration:underline"&gt;here&lt;/a&gt;</raw> to use in your own IDE.</p>

    </statement>
    <program xml:id="TurtleNestedLoop_editor" interactive="activecode" language="java">

        <input>
import java.util.*;
import java.awt.*;

public class TurtleDrawSnowflake
{
  public static void main(String[] args)
  {
      World world = new World(300,300);
      Turtle yertle = new Turtle(world);
      yertle.setColor(Color.blue);

       // Outer loop will do inner loop to draw a square,
       // and then turn a little each time
       // How many times should the outer loop run to complete the pattern? Try some numbers between 5 and 15.
      for (int i = 1; i &lt;= 5; i++) {

         // inner loop draws a square
         for(int sides = 1; sides &lt;= 4; sides++) {
             yertle.forward();
             yertle.turn(90);
         }
         // turn a little before drawing square again
         yertle.turn(30);
      }
      world.show(true);
  }
}
        </input>
<tests>
import static org.junit.Assert.*;
import org.junit.*;;
import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests() {
        super("TurtleDrawSnowflake");
    }

    @Test
    public void test1()
    {
        String orig = "import java.util.*;\nimport java.awt.*;\n\npublic class TurtleDrawSnowflake\n{\n  public static void main(String[] args)\n  {\n      World world = new World(300,300);\n      Turtle yertle = new Turtle(world);\n      yertle.setColor(Color.blue);\n\n      for (int i = 1; i &lt;= 5; i++) {\n\n         // inner loop draws a square\n         for(int sides = 1; sides &lt;= 4; sides++) {\n             yertle.forward();\n             yertle.turn(90);\n         }\n         // turn a little before drawing square again\n         yertle.turn(30);\n      }\n      world.show(true);\n  }\n}\n";

        boolean passed = codeChanged(orig);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
      boolean passed = false;
      String code = getCode();
      int find = code.indexOf("i &lt;=");
      if (find != -1) {
        int end = code.indexOf(";", find);
        String s = code.substring(find+5,end);
        int max = 0;
        try {
          max = Integer.parseInt(s);
        } catch (NumberFormatException e) {
             System.out.println("Couldn't parse int");        }
        passed = max &gt;= 12;
        getResults("i &lt;= ?;", "i &lt;= " + max + ";", "Iterations complete drawing", passed);
      }
      else
        getResults("i &lt;= ?;", "i &lt;= ", "Could not find number of iterations - check spacing", passed);
      assertTrue(passed);
    }
}
</tests>

    </program>
</exercise>
        </subsection>
  <subsection xml:id="_groupwork-programming-challenge-turtle-snowflakes">
            <title><image source="../_static/groupwork.png" width="35%" alt="groupwork"/> Programming Challenge : Turtle Snowflakes</title>
            
            
            <p>In the last exercise, you used nested for-loops to have the turtle draw a square repeatedly to make a snowflake. Use the Active Code window below or this <raw format="html" xml:space="preserve">&lt;a href="https://repl.it/@BerylHoffman/Java-Swing-Turtle" target="_blank"&gt;repl.it link&lt;/a&gt;</raw> to have yertle draw the following shapes using nested loops. We encourage you to work in pairs on this.</p>
            <p><ol label="1">
                <li>
                    <p>Complete the code in the active code window below to draw a snowflake of triangles. Remember that triangles have 3 sides and you will need to turn 120 degrees (external angle) 3 times to draw the triangle. Use the <term>turnAmount</term> variable for the single turn after drawing a triangle. How many times did you need to run the outer loop to go all the way around? Try changing the turnAmount variable to 40 to see how many times you need to loop with a wider distance between the triangles.</p>
                </li>
                <li>
                    <p>In the exercise above, you figured out how many times to run the outer loop to finish the snowflake. You may have noticed that the number of times the loop needs to run is related to the angle you turn before drawing the next triangle. These turns have to add up to 360 degrees to go all the way around.  Change the outer loop so that it runs the number of times needed by using a formula with the  <term>turnAmount</term> variable and 360. Can you draw a snowflake using more or less triangles than before by just changing the turnAmount value?</p>
                </li>
                <li>
                    <p>Create another variable called <term>n</term> for the number of sides in the polygon the inner loop draws. Change the angle in the inner loop to also use a formula with 360 and this new variable. Can you change your snowflake to draw squares or pentagons instead? (Note if this overwhelms the Active Code server and times out, try a larger turnAmount. (Or you can switch to using this <raw format="html" xml:space="preserve">&lt;a href="https://repl.it/@BerylHoffman/Java-Swing-Turtle" target="_blank"&gt;repl.it link&lt;/a&gt;</raw> or your own IDE).</p>
                </li>
                <li>
                    <p>Letâ€™s add some more color! Add an if/else statement that changes the <raw format="html" xml:space="preserve">&lt;a href= "https://docs.oracle.com/javase/7/docs/api/java/awt/Color.html" target="_blank"&gt;Color&lt;/a&gt;</raw> of the pen before the inner loop depending on whether the outer loop variable is odd or even. Remember that even numbers have no remainder when divided by 2.</p>
                </li>
                <li>
                    <p>Be creative and design a unique snowflake!</p>
                </li>
            </ol></p>

<exercise label="challenge4-4-Turtle-Nested-Loop-Snowflakes">
    <statement>
            <p>Use nested for-loops to have the turtle draw a snowflake of polygons. Use the variable turnAmount to turn after each shape and the variable n for the sides of the polygon.</p>
            <p>If the code below does not work in your browser, you can copy the code into  this <raw format="html" xml:space="preserve">&lt;a href="https://repl.it/@BerylHoffman/Java-Swing-Turtle" target="_blank"&gt;repl.it link&lt;/a&gt;</raw> (refresh page after forking and if it gets stuck) or download the files <raw format="html" xml:space="preserve">&lt;a href="https://github.com/bhoffman0/APCSA-2019/tree/master/_sources/Unit2-Using-Objects/TurtleJavaSwingCode.zip" target="_blank" style="text-decoration:underline"&gt;here&lt;/a&gt;</raw> to use in your own IDE.</p>

    </statement>
    <program xml:id="challenge4-4-Turtle-Nested-Loop-Snowflakes_editor" interactive="activecode" language="java">

        <input>
import java.util.*;
import java.awt.*;

public class TurtleSnowflakes
{
  public static void main(String[] args)
  {
      World world = new World(300,300);
      Turtle yertle = new Turtle(world);
      yertle.setColor(Color.blue);

      // Use this variable in the loops
      int turnAmount = 30;

      // 1. Write a for loop that runs many times
      // 2. Change it to use turnAmount to figure out how many times to run

         // 1 &amp; 2. Write an inner loop that draws a triangle (3 sides, 120 degree turns)
         // 3. Then change it to be any polygon with a variable n



         // turn turnAmount degrees before drawing the polygon again

         // 4. Add an if statement that changes the colors depending on the loop variables

      world.show(true);
  }
}
        </input>
<tests>
import static org.junit.Assert.*;
import org.junit.*;;
import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests() {
        super("TurtleSnowflakes");
    }

    @Test
    public void test1()
    {
        String orig = "import java.util.*;\nimport java.awt.*;\n\npublic class TurtleSnowflakes\n{\n  public static void main(String[] args)\n  {\n      World world = new World(300,300);\n      Turtle yertle = new Turtle(world);\n      yertle.setColor(Color.blue);\n\n      // Write a for loop that runs many times\n\n         // Write an inner loop that draws a triangle\n\n\n\n         // turn 30 degrees before drawing triangle again\n\n\n      world.show(true);\n  }\n}\n";

        boolean passed = codeChanged(orig);
        assertTrue(passed);
    }

    @Test
    public void test2() {
        String code = getCode();
        String target = "for (int * = #; * ? *; *~)";

        int num = countOccurencesRegex(code, target);

        boolean passed = num == 2;

        getResults("2", ""+num, "2 For loops (nested)", passed);
        assertTrue(passed);
    }

    @Test
    public void test3() {
         boolean passed = checkCodeContains("if statement to change colors", "if");
          assertTrue(passed);
    }

    @Test
        public void test4()
        {
            String code = getCode();
            String forwards = ".forward(";

            int count = countOccurences(code, forwards);

            boolean passed = count == 1;

            passed = getResults("1 forward(...)", "" + count  + " forward(...)", "Should only need forward() once", passed);
            assertTrue(passed);
        }

        @Test
        public void test5()
        {
            String code = getCode();
            String forwards = ".turn(";

            int count = countOccurences(code, forwards);

            boolean passed = count == 2;

            passed = getResults("2 turn(...)", "" + count  + " turn(...)", "Should only need turn(...) twice", passed);
            assertTrue(passed);
        }


        @Test
        public void test6()
        {
             boolean passed = checkCodeContains("Calculates number of iterations using turnAmount", "360/turnAmount");
             assertTrue(passed);
        }
}
</tests>

    </program>
</exercise>
        </subsection>
  <subsection xml:id="_summary">
            <title>Summary</title>
            <p><ul>
                <li>
                    <p>Nested iteration statements are iteration statements that appear in the body of another iteration statement.</p>
                </li>
                <li>
                    <p>When a loop is nested inside another loop, the inner loop must complete all its iterations before the outer loop can continue.</p>
                </li>
            </ul></p>
        </subsection>
  <exercises>
    <exercise label="lcfcnl1">
    <statement>
        <p>Can you change the code to print a rectangle with 10 rows and 8 columns of stars? You can also try replacing line 10 with this print statement to see the rows and columns: <c>System.out.print(row + "-" + col + " ");</c></p>

    </statement>
    <program xml:id="lcfcnl1_editor" interactive="activecode" language="java">

        <input>
public class NestedLoops
{

   public static void main(String[] args)
   {
       for (int row = 1; row &lt;= 3; row++)
       {
           for (int col = 1; col &lt;= 5; col++)
           {
               System.out.print("*");
           }
           System.out.println();
       }
   }
}
        </input>
<tests>
import static org.junit.Assert.*;
 import org.junit.*;;
 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
     public RunestoneTests() {
         super("NestedLoops");
     }

     @Test
     public void test1()
     {
         String orig = "public class NestedLoops\n{\n\n   public static void main(String[] args)\n   {\n       for (int row = 1; row &lt;= 3; row++)\n       {\n           for (int col = 1; col &lt;= 5; col++)\n           {\n               System.out.print(\"*\");\n           }\n           System.out.println();\n       }\n   }\n}\n";

         boolean passed = codeChanged(orig);
         assertTrue(passed);
     }

     @Test
     public void test2()
     {
       boolean passed = checkCodeContains("10 rows","row &lt;= 10")
            &amp;&amp; checkCodeContains("8 columns","col &lt;= 8");
       assertTrue(passed);
     }
 }
</tests>

    </program>
</exercise>
    <exercise label="nested1">
        <statement>

        <p>4-4-2: What does the following code print?</p>
        <program language="java"><input>
for (int i = 1; i &lt; 7; i++)
{
    for (int y = 1; y &lt;= 5; y++)
    {
        System.out.print("*");
    }
    System.out.println();
}
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>A rectangle of 7 rows with 5 stars per row.</p>
                </statement>
                <feedback>
                    <p>This would be true if i was initialized to 0.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>A rectangle of 7 rows with 4 stars per row.</p>
                </statement>
                <feedback>
                    <p>This would be true if i was initialized to 0 and the inner loop continued while <code>y &lt; 5</code>.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>A rectangle of 6 rows with 5 stars per row.</p>
                </statement>
                <feedback>
                    <p>The outer loop runs from 1 up to 7 but not including 7 so there are 6 rows and the inner loop runs 1 to 5 times including 5 so there are 5 columns.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>A rectangle of 6 rows with 4 stars per row.</p>
                </statement>
                <feedback>
                    <p>This would be true if the inner loop continued while <code>y &lt; 5</code>.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="nested2">
        <statement>

        <p>4-4-3: What does the following code print?</p>
        <program language="java"><input>
for (int i = 0; i &lt; 5; i++)
{
    for (int j = 3; j &gt;= 1; j--)
    {
        System.out.print("*");
    }
    System.out.println();
}
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>A rectangle of 4 rows with 3 star per row.</p>
                </statement>
                <feedback>
                    <p>This would be true if i was initialized to 1 or ended at 4.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>A rectangle of 5 rows with 3 stars per row.</p>
                </statement>
                <feedback>
                    <p>Yes, the outer loop runs from 0 up to 5 but not including 5 so there are 5 rows and the inner loop runs from 3 down to 1 so 3 times.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>A rectangle of 4 rows with 1 star per row.</p>
                </statement>
                <feedback>
                    <p>The inner loop runs 3 times when j is 3, 2, and then 1, so there are 3 stars per row.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>The loops have errors.</p>
                </statement>
                <feedback>
                    <p>Try the code in an Active Code window and you will see that it does run.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="ch6ex6muc" numbered="yes" adaptive="yes" indentation="show" language="python"><statement>
        <p>The main method in the following class should print 10 rows with 5 &lt;code&gt;*&lt;/code&gt; in each row.   But, the blocks have been mixed up and include one extra block that isnâ€™t needed in the solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</p>
</statement>
<blocks><block order="3">
<cline>public class Test1</cline>
<cline>{</cline>
<cline>    public static void main(String[] args)</cline>
<cline>    {</cline>
</block><block order="1">
<cline>        for (int x = 0; x &lt; 10; x++)</cline>
<cline>        {</cline>
</block><block order="9">
<choice correct="yes"><cline>            for (int y = 0; y &lt; 5; y++)</cline>
<cline>            {</cline>
</choice><choice><cline>            for (int y = 0; y &lt;= 5; y++)</cline>
<cline>            { </cline>
</choice></block><block order="8">
<cline>                System.out.print("*");</cline>
</block><block order="4">
<cline>            }</cline>
</block><block order="7">
<cline>            System.out.println();</cline>
</block><block order="6">
<cline>        }</cline>
</block><block order="5">
<cline>    }</cline>
<cline>}</cline>
</block></blocks></exercise>
  </exercises>
</section>
