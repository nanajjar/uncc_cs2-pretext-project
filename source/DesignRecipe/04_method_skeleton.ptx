<section xml:id="ch-method-skeleton">
  <title>Method Template &amp; Skeleton</title>

  <!-- ======================================
       1. Overview & Objectives
       ====================================== -->
  <subsection xml:id="overview-objectives-method-skeleton">
    <title>Overview and Objectives</title>
    <p>
      By now, you've seen how careful planning sets the stage for reliable, maintainable code.
      In the previous sections, we:
    </p>
    <ol>
      <li>Defined our data structures (<em>Data Definitions</em>)</li>
      <li>Wrote explicit <em>Method Signatures &amp; Purpose Statements</em></li>
      <li>Created <em>Examples &amp; Tests</em> to clarify behavior</li>
    </ol>
    <p> In this section, we move to Step 4 of the Design Recipe: creating a <alert>method template
      or skeleton</alert>. This step helps you outline the logical flow of your function before
      diving into final code, ensuring that each piece of your plan has a clear place and purpose. </p>
    <p> Students often jump straight to coding loops and conditionals as soon as they have a sense
      of what a function should do. But as Audrey has learned (sometimes the hard way!), tackling
      everything at once—data validation, main logic, edge cases—can quickly lead to unorganized
      functions that are difficult to debug or extend. By sketching a simple skeleton <em>first</em>,
      we keep each step of the process clear and intentional. </p>
    <objectives>
      <ul>
        <li>
          <p><em>Recognize</em> how a method skeleton clarifies your approach before full coding.</p>
        </li>
        <li>
          <p><em>Practice</em> separating the “what” (the conceptual steps) from the “how” (the
            actual code).</p>
        </li>
        <li>
          <p><em>Connect</em> skeleton steps to the tests you wrote, ensuring every required
            behavior is addressed.</p>
        </li>
        <li>
          <p><em>Reduce</em> the risk of messy or unmaintainable functions by working from a solid
            outline.</p>
        </li>
      </ul>
    </objectives>
  </subsection>

  <!-- ======================================
       2. Why Outline Before Coding?
       ====================================== -->
  <subsection xml:id="why-outline-before-coding">
    <title>Why Outline Before Coding?</title>
    <p>
      Many programmers—novices and veterans alike—sometimes try to solve everything in one go:
      they start coding loops, conditionals, and data manipulations the moment they have
      a problem statement. This approach can seem efficient initially, but it often yields
      disorganized, tangled code that's stressful to update or fix later.
    </p>
    <p> A <em>method skeleton</em> (sometimes called an outline) is a practical way to prevent that
      chaos. Rather than juggling all details in your mind, you jot down the main steps—like how to
      handle invalid inputs, how you'll traverse data, and where you'll produce your output. This
      structure helps ensure you haven't forgotten any core requirement. It's far easier to adjust a
      few comments or reorder steps in an outline than to rip apart 30 lines of half-finished code
      and guess what to fix. </p>
    <p> As Audrey once said after reworking her <c>update_rating</c> function yet again, <em>“If
      only I'd outlined it first, I'd have saved myself a lot of confusion!”</em>
    </p>
  </subsection>

  <!-- ======================================
       3. Audrey's Journey: Outlining update_rating
       ====================================== -->
  <subsection xml:id="audrey-outline-update-rating">
    <title>Audrey's Journey: Outlining <c>update_rating</c></title>
    <p> Recall Audrey's function <c>update_rating</c> for modifying a song's rating in her
      music library. In earlier sections, she discovered the hard way that mixing all her logic and
      data assumptions in one big chunk of code led to repeated mistakes. Eventually, she documented
      the function properly: </p>
    <blockquote>
      <p><alert>Goal:</alert> Update the rating for a given <c>song_title</c> in <c>library</c>.</p>
      <p>
        <alert>Preconditions:</alert>
      </p>
      <ul>
        <li><c>library</c> is a non-empty list of <c>[title, rating, play_count]</c>
          entries.</li>
        <li><c>song_title</c> is a non-empty string.</li>
        <li><c>new_rating</c> is an integer in <c>[1..5]</c>.</li>
      </ul>
      <p><alert>Returns:</alert> <c>True</c> if the song was found and updated; <c>False</c>
        otherwise.</p>
      <p><alert>Raises:</alert> <c>ValueError</c> if any inputs are invalid.</p>
    </blockquote>
    <p>
      Instead of coding it all at once, Audrey now drafts a skeleton:
    </p>
    <listing xml:id="update-rating-skeleton">
      <title>Skeleton for <c>update_rating</c></title>
      <program language="python">
        def update_rating(library: list, song_title: str, new_rating: int) -> bool:
        """
        Updates the rating for a song in the music library.
        (Full docstring details in previous sections!)
        """

        # 1. Validate inputs (library, song_title, new_rating)
        # - If invalid, raise ValueError

        # 2. Loop through the library:
        # - For each song, check if song_title matches
        # - If so, update rating, return True

        # 3. If we finish the loop with no match found, return False

        pass # We'll fill this in later
      </program>
    </listing>
    <p> A few comments and <c>pass</c> statements create a roadmap for her final
      implementation. Now, Audrey (and anyone else reading her code) can see exactly where each step
      belongs: from handling incorrect inputs to deciding when to return <c>True</c> or 
      <c>False</c>. This level of clarity makes subsequent coding (and debugging) far more
      straightforward. </p>
  </subsection>

  <!-- ======================================
       4. Typical Skeleton Patterns
       ====================================== -->
  <subsection xml:id="typical-skeleton-patterns">
    <title>Typical Skeleton Patterns</title>
    <p>
      In many programming tasks—whether in Python, Java, or another language—common patterns of
      logic often emerge. Recognizing these patterns can make drafting a skeleton almost second
      nature. Here are a few you'll frequently encounter:
    </p>

    <subsubsection xml:id="validate-and-loop">
      <title>Pattern 1: Validate → Loop → Return</title>
      <p>
        Many functions deal with a list of items, searching for a match or applying an action.
        The skeleton usually looks like:
      </p>
      <listing>
        <program language="python">
          def some_function(data: list) -> ???:
          # 1. Validate data (not None, correct format, etc.)
          # 2. Loop through data:
          # - If some condition is met, do something (maybe return or update)
          # 3. Return a final result if not found or if the loop completes
        </program>
      </listing>
      <p> Our <c>update_rating</c> function is a classic example: after validation, it loops
        for a matching title, updates if found, and returns <c>True</c>. If no match is found,
        it returns <c>False</c>. </p>
    </subsubsection>

    <subsubsection xml:id="accumulate-and-return">
      <title>Pattern 2: Accumulate &amp; Return</title>
      <p> Functions that <em>build or collect</em> new data follow a pattern of initializing an
        empty container (like a list or a numeric sum), looping, and then returning the collected
        result: </p>
      <listing>
        <program language="python">
          def compute_something(data: list) -> ???:
          # 1. Validate data
          # 2. Initialize an accumulator (e.g., an empty list or 0)
          # 3. Loop through data:
          # - If item meets a condition, add/append to the accumulator
          # 4. Return the accumulator
        </program>
      </listing>
      <p> For instance, <c>find_favorite_songs(library)</c> (which filters out songs rated 4
        or 5) would gather matching titles in a list, then return that list once the loop finishes. </p>
    </subsubsection>

    <subsubsection xml:id="multiple-decisions">
      <title>Pattern 3: Multiple Decisions</title>
      <p>
        Some functions need to handle different categories of inputs or multiple branching
        conditions.
        A skeleton might look like this:
      </p>
      <listing>
        <program language="python">
          def process_input(input_data):
          # 1. Validate input_data
          # 2. If input_data is type X, do something
          # 3. Else if input_data is type Y, do something else
          # 4. Else, handle "unexpected" case (raise an error or return a default)
          # 5. Return final result
        </program>
      </listing>
      <p>
        By enumerating each possible branch in your skeleton, you ensure you're not missing
        a scenario. If the program evolves, you can adjust or insert new steps without
        rewriting everything.
      </p>
    </subsubsection>
  </subsection>

  <!-- ======================================
       5. Connecting Skeletons to Tests
       ====================================== -->
  <subsection xml:id="connecting-skeletons-tests">
    <title>Connecting Skeletons to Tests</title>
    <p> From Section 3, you know that <em>tests</em> confirm each function's behavior under normal
      use and edge cases. Writing a skeleton helps you align your logic with those tests: </p>
    <ul>
      <li><alert>Validate Inputs:</alert> If your tests confirm that invalid inputs trigger 
      <c>ValueError</c>, your skeleton should include a “Validate inputs” step.</li>
      <li><alert>Loop Behavior:</alert> If you have a test ensuring the function finds the right
        item in a list, your skeleton's loop step must handle that scenario.</li>
      <li><alert>Return Values:</alert> If your tests check for <c>True</c> vs. <c>False</c>,
        your skeleton must reveal how and when each is returned.</li>
    </ul>
    <p>
      This tight connection between skeleton steps and test cases makes it much harder
      to “forget” a case or produce untested code paths. If there's a mismatch—like a test
      expects an early return but your skeleton has no return until the end—you can catch
      and fix it early.
    </p>
  </subsection>

  <!-- ======================================
       6. Example: Skeleton for compute_popularity
       ====================================== -->
  <subsection xml:id="example-compute-popularity">
    <title>Example: Skeleton for <c>compute_popularity</c></title>
    <p> Recall <c>compute_popularity(song)</c> from Section 2, which calculates <c>rating ×
      log(play_count + 1)</c> for a single song. Here's how its skeleton might look: </p>
    <listing>
      <program language="python">
        import math

        def compute_popularity(song: list) -> float:
        """
        Returns a popularity score based on rating and play_count.
        (See Section 2 for the full docstring.)
        """

        # 1. Validate 'song' is not None and has the form [title, rating, play_count]
        # - rating in [1..5], play_count >= 0
        # - If invalid, raise ValueError

        # 2. Calculate popularity = rating * math.log(play_count + 1)

        # 3. Return the popularity (float)

        pass
      </program>
    </listing>
    <p> Meanwhile, our tests from Section 3 might include an edge case where <c>rating = 5, play_count = 0</c> 
      (expecting <c>0</c>), a typical case for <c>rating = 5, play_count = 100</c>, and invalid inputs that raise <c>ValueError</c>. 
      Each bullet in the skeleton lines up with those tests. If we neglected to handle <c>play_count &lt; 0</c>,
      our skeleton would be missing a crucial step—and a test would (hopefully) fail. </p>
  </subsection>

  <!-- ======================================
       7. Transition to Implementation
       ====================================== -->
  <subsection xml:id="transition-to-implementation">
    <title>Transition to Implementation</title>
    <p> Once your skeleton lines up with your tests and contract, you're ready for Step 5: <alert>filling
      in the method with real code</alert>. Each comment in the outline becomes one or more lines
      of Python. If you discover new edge cases or data nuances along the way, you can still revise
      the skeleton before finishing the details. </p>
    <p>
      As you implement each skeleton step, rerun your tests to confirm you haven't accidentally
      broken something else. This incremental approach keeps your codebase stable, and each
      success gives you confidence to tackle the next piece.
    </p>
    <p>
      By the end of Step 5, you'll have a fully working, validated, and test-backed function
      that matches your data definitions, contract, and examples. That's the power of
      systematically following the Design Recipe.
    </p>
  </subsection>

  <!-- ======================================
       8. Exercises & Practice
       ====================================== -->
  <subsection xml:id="exercises-practice-skeleton">
    <title>Exercises &amp; Practice</title>

    <exercise>
      <title>1. Skeleton for <c>find_favorite_songs</c></title>
      <statement>
        <p> Recall the <c>find_favorite_songs(library)</c> function from earlier sections,
          which returns a list of titles for songs with a rating &gt;= 4. Write a short skeleton that: </p>
        <ul>
          <li>Validates <c>library</c> (must be non-empty; each entry is <c>[title, rating,
            play_count]</c>)</li>
          <li>Initializes an empty list to hold favorite titles</li>
          <li>Loops over each song, checks if <c>rating ≥ 4</c>, and appends <c>song[0]</c>
            to the result</li>
          <li>Returns the final list of “favorite” titles</li>
        </ul>
        <p>
          Don't write actual code—just the skeleton. Then, identify at least one test case for
          each step you outlined.
        </p>
      </statement>
    </exercise>

    <exercise>
      <title>2. Skeleton for <c>create_playlist</c></title>
      <statement>
        <p> Audrey wants a <c>create_playlist</c> function that filters songs by mood (either
          "chill" or "upbeat") and then sorts them by rating (highest first). Sketch a skeleton: </p>
        <ul>
          <li>Validate inputs</li>
          <li>Filter the library by the requested mood</li>
          <li>Sort the filtered list by rating in descending order</li>
          <li>Return the sorted list</li>
        </ul>
        <p>
          Again, focus only on the outline. Consider how you'd test each step—especially
          any tricky edge cases (like an empty library or an unsupported mood).
        </p>
      </statement>
    </exercise>

    <exercise>
      <title>Reflect on a Past Project</title>
      <statement>
        <p>
          Think of a time you dove straight into coding without a skeleton.
          Did you encounter a confusing bug or find yourself refactoring large chunks of code?
          How might a simple outline have helped you catch those issues sooner?
          Write a short paragraph reflecting on how a skeleton might have made that experience
          smoother.
        </p>
      </statement>
    </exercise>
  </subsection>

  <!-- ======================================
       9. Conclusion & Next Steps
       ====================================== -->
  <subsection xml:id="conclusion-next-steps-method-skeleton">
    <title>Conclusion &amp; Next Steps</title>
    <p>
      Creating a method skeleton is a small step with a big payoff. It forces you to think
      through the logic before you get lost in the details of code syntax. By clarifying each
      stage—input validation, looping or branching, return values—you make sure your function
      aligns with your data definitions, contracts, and test cases.
    </p>
    <p> In the next section (<alert>Step 5: Implementation</alert>), we'll fill in these skeletons
      with real code. You'll see how to handle special cases gracefully, deal with exceptions where
      needed, and confirm your solutions pass all the tests you drafted in Section 3. The Design
      Recipe remains your reliable guide for building code that's robust, maintainable, and a lot
      less stressful to expand in the future. </p>
    <p>
      With a solid skeleton, you're well on your way to writing code that you (and your teammates)
      will actually enjoy working with. It's one more reason to trust the Design Recipe:
      structured thinking now saves you from headaches later.
    </p>
  </subsection>

  <subsection xml:id="ch-method-skeleton-exercises">
    <title>Method Skeleton Exercises</title>

    <!-- ===============================================================
       1. PARSONS PROBLEM: Audrey's Fiasco Without a Skeleton
       =============================================================== -->
    <exercise xml:id="parsons-audrey-skeleton-fiasco" language="natural">
      <title>Parsons: Audrey's Fiasco Without a Skeleton</title>
      <statement>
        Rearrange these story beats to see how Audrey skipped creating a skeleton,
        leading to a messy, hard-to-maintain function.
      </statement>
      <blocks layout="vertical" randomize="yes">
        <block order="1">
          <choice correct="yes">
            <cline>Audrey jumps directly into coding a loop and conditionals with no outline.</cline>
          </choice>
        </block>
        <block order="2">
          <choice correct="yes">
            <cline>She realizes halfway that she needs input validation but tries to wedge it in
              after she's written most of the logic.</cline>
          </choice>
        </block>
        <block order="3">
          <choice correct="yes">
            <cline>Her function quickly grows disorganized, mixing data checks, loops, and
              return statements in random places.</cline>
          </choice>
        </block>
        <block order="4">
          <choice correct="yes">
            <cline>Small changes break existing code, because everything is tangled together
              with no clear structure.</cline>
          </choice>
        </block>
        <block order="5">
          <choice correct="yes">
            <cline>She finally concedes that a skeleton/outline first would have prevented
              the chaos.</cline>
          </choice>
        </block>
      </blocks>
    </exercise>


    <!-- ===============================================================
       2. PARSONS PROBLEM: Steps in a Skeleton
       =============================================================== -->
    <exercise xml:id="parsons-skeleton-steps" language="natural">
      <title>Parsons: Typical Steps in a Skeleton</title>
      <statement> Reorder these typical <em>method skeleton</em> steps to see how they might appear
        (e.g., validate inputs, loop/filter data, return results). </statement>
      <blocks layout="vertical" randomize="yes">
        <block order="1">
          <choice correct="yes">
            <cline># 1. Validate inputs (e.g., ensure list is not None/empty)</cline>
          </choice>
        </block>
        <block order="2">
          <choice correct="yes">
            <cline># 2. Initialize accumulators or placeholders if needed</cline>
          </choice>
        </block>
        <block order="3">
          <choice correct="yes">
            <cline># 3. Loop or iterate over the data, applying logic or checks</cline>
          </choice>
        </block>
        <block order="4">
          <choice correct="yes">
            <cline># 4. Decide early returns or update accumulators</cline>
          </choice>
        </block>
        <block order="5">
          <choice correct="yes">
            <cline># 5. Return final result (e.g., True/False or a list of filtered items)</cline>
          </choice>
        </block>
      </blocks>
    </exercise>


    <!-- ===============================================================
       3. MULTIPLE-CHOICE (Graded)
       =============================================================== -->
    <exercise xml:id="mc-why-skeleton-first">
      <title>Why Write a Skeleton First?</title>
      <statement>In this section we recommend writing a skeleton (outline) <alert>before</alert> coding
        the full function. Which answer <alert>best</alert> captures why? </statement>
      <choices randomize="yes">
        <choice correct="yes">
          <statement>
            It prevents mixing all logic (input checks, loops, return conditions) in one
            haphazard chunk, making the code easier to modify or debug.
          </statement>
          <feedback>
            Correct! A skeleton organizes each step, reducing confusion and tangling of code.
          </feedback>
        </choice>
        <choice>
          <statement>
            It ensures Python will auto-generate tests for each step.
          </statement>
          <feedback>
            Skeletons help humans plan code; Python won't create tests automatically.
          </feedback>
        </choice>
        <choice>
          <statement>
            It optimizes the function to run in constant time, regardless of inputs.
          </statement>
          <feedback>
            Skeletons are about design clarity, not guaranteeing O(1) performance.
          </feedback>
        </choice>
        <choice>
          <statement>
            It eliminates the need to define data structures or docstrings.
          </statement>
          <feedback>
            Actually, you still need data definitions and docstrings; the skeleton just guides the
            function's flow.
          </feedback>
        </choice>
      </choices>
    </exercise>


    <!-- ===============================================================
       4. TRUE/FALSE (Graded)
       =============================================================== -->
    <exercise xml:id="tf-skeleton-hides-code" type="truefalse">
      <title>Skeleton vs. Full Implementation</title>
      <statement correct="no">
        A skeleton is just a partial outline, so Python hides the real implementation code
        after you finalize the skeleton.
      </statement>
      <feedback>
        A skeleton is a planning tool for humans. Once you write the full code, it's all visible
        and not hidden by Python.
      </feedback>
    </exercise>


    <exercise xml:id="sa-ch4-skeleton">
      <title>Short Answer: Constructing a Skeleton with Previous Deliverables</title>
      <statement>
        <p> Suppose you are writing <c>remove_song(library, song_title)</c> to delete a song
          from <c>library</c>. We already have: </p>
        <blockquote>
          <p>
            <alert>Data Definition (Section 1):</alert>
          </p>
          <p> A <c>Song</c> is <c>[title, rating, play_count]</c> with <c>rating</c>
            in [1..5], <c>title</c> non-empty, and <c>play_count</c> &gt;= 0. </p>
        </blockquote>
        <blockquote>
          <p>
            <alert>Method Signature &amp; Purpose Statement (Section 2):</alert>
          </p>
          <p>
            <c>def remove_song(library: list, song_title: str) -&gt; bool:</c>
          </p>
          <ul>
            <li><em>Purpose:</em> Remove the first song with <c>title == song_title</c> from 
            <c>library</c>, returning <c>True</c> if successful or <c>False</c> if the
              song is not found. </li>
            <li><em>Precondition:</em> <c>library</c> is a list of <c>Song</c> items. 
            <c>song_title</c> is non-empty. </li>
            <li><em>Error Cases:</em> Possibly raise <c>ValueError</c> if <c>song_title</c>
              is empty. </li>
          </ul>
        </blockquote>
        <blockquote>
          <p>
            <alert>Examples &amp; Tests (Section 3):</alert>
          </p>
          <p>
            <em>We have test scenarios confirming removal of an existing song, returning <c>True</c>,
              plus tests checking an empty library or absent title (return <c>False</c>), and
              a <c>ValueError</c> if <c>song_title</c> is empty.</em>
          </p>
        </blockquote>
        <p> In <alert>Section 4</alert>, your task is to produce a <alert>method skeleton</alert>
          (outline) for <c>remove_song</c> using the <alert>Design Recipe</alert> so that your final code
          is <em>structured</em> and aligns with the above deliverables. <alert>In your answer, do
          the following:</alert>
        </p>
        <ol>
          <li><em>List each step</em> in the skeleton (e.g., "1. Validate inputs," "2. Loop over
            library," etc.).</li>
          <li>Explain <em>how each step references or handles the constraints</em> from earlier
            sections (e.g., checking <c>song_title</c> is non-empty, using the test scenarios
            from Section 3 to guide your logic). </li>
          <li><em>Do not</em> write the final code; just a well-commented or outlined structure.
            Show how you'd leave placeholders for each step. </li>
        </ol>
        <p>
          <em>Provide your skeleton outline below:</em>
        </p>
      </statement>
      <response />
      <solution>
        <p>
          <alert>Sample Skeleton Explanation:</alert>
        </p>
        <pre><c># remove_song(library, song_title) -> bool

# Step 1: Validate Inputs
#   - If song_title is empty, raise ValueError
#   - If library is None or not a list, maybe raise ValueError
#
# Step 2: Loop through each song in library
#   - Check if the current song's title == song_title
#   - If found, remove that song from library, return True
#
# Step 3: If loop ends with no match, return False
</c></pre>
        <p>
          <alert>Relating to earlier sections:</alert>
        </p>
        <ul>
          <li><em>Data Definition (Ch.1):</em> We ensure each item is a <c>Song</c> and <c>song_title</c> is valid (non-empty). </li>
          <li><em>Signature &amp; Purpose (Ch.2):</em> We plan to return <c>bool</c> and
            possibly raise <c>ValueError</c> if <c>song_title</c> is empty. </li>
          <li><em>Examples &amp; Tests (Ch.3):</em> We note the scenario for "removing an existing
            song" (expect True), "song not found" (False), and "song_title is empty" (ValueError). </li>
        </ul>
        <p>
          By drafting this outline first, we avoid mixing logic and validation, ensuring
          each piece is consistent with prior deliverables.
        </p>
      </solution>
    </exercise>
    
  </subsection>
</section>