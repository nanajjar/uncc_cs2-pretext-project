<?xml version="1.0"?>
<section xml:id="introducing-loops">
  <title>Iteration &amp; For Loops</title>

  <p>
    Iteration is a fundamental concept in programming—no matter which language you started with. 
    In Java, loops let us repeat a block of code without resorting to copy-paste. 
    In this section, we'll begin with the <em>for</em> loop, a “definite loop” that neatly packages <em>initialization</em>, <em>condition</em>, <em>body</em>, and <em>update</em> all in one place. 
    Even if you've used loops in other languages, you'll see that Java's approach is similar, with just a few syntactic details to remember.
  </p>

  <subsection xml:id="anatomy-of-for-loop">
    <title>Anatomy of a For Loop</title>
    <p>
      A Java <c>for</c> loop typically has four main parts. Let's label them clearly:
    </p>
    <ol>
      <li>
        <p><strong>Initialization</strong>: Sets up a loop variable before the loop begins. For example, <c>int i = 0</c>.</p>
      </li>
      <li>
        <p><strong>Condition</strong>: A Boolean expression checked before each iteration. If <c>true</c>, run the body; if <c>false</c>, exit the loop. For example, <c>i &lt; 10</c>.</p>
      </li>
      <li>
        <p><strong>Body</strong>: The statements that execute on each iteration. Even if there's only one statement, it's a good idea to use curly braces <c>{ }</c> so you can easily expand the loop later.</p>
      </li>
      <li>
        <p><strong>Update</strong>: Updates the loop variable at the end of each iteration (for instance, <c>i++</c>).</p>
      </li>
    </ol>
    <p>
      Putting these together, the basic syntax is:
    </p>
    <program language="java">
      <input>
for (initialization; condition; update) {
    // Loop body statements
}
      </input>
    </program>
  </subsection>

  <subsection xml:id="for-loop-example">
    <title>Example: Counting from 0 to 9</title>
    <p>
      Here's a simple example that prints the numbers from 0 through 9:
    </p>
    <program language="java" xml:id="counting-example" interactive="activecode">
      <input>
public class LoopExample {
    public static void main(String[] args) {
        for (int i = 0; i &lt; 10; i++) {
            System.out.println("i = " + i);
        }
    }
}
      </input>
      <tests>
import static org.junit.Assert.*;
import org.junit.Test;
import java.io.*;

public class RunestoneTests extends CodeTestHelper {
    @Test
    public void testCounting() throws IOException {
        String output = getMethodOutput("main");
        String expect = "i = 0\n" +
                        "i = 1\n" +
                        "i = 2\n" +
                        "i = 3\n" +
                        "i = 4\n" +
                        "i = 5\n" +
                        "i = 6\n" +
                        "i = 7\n" +
                        "i = 8\n" +
                        "i = 9\n";
        assertTrue(getResults(expect, output, "Expected output not matching", true));
    }
}
      </tests>
    </program>
    <p>
      In this loop:
    </p>
    <ul>
      <li><c>int i = 0</c> is the <em>initialization</em>.</li>
      <li><c>i &lt; 10</c> is the <em>condition</em>.</li>
      <li><c>i++</c> is the <em>update</em>.</li>
      <li>The <em>body</em> prints the current value of <c>i</c> each time.</li>
    </ul>
  </subsection>

  <subsection xml:id="common-loop-pitfalls">
    <title>Common Loop Pitfalls</title>
    <p>
      Even if your loop syntax is correct, certain pitfalls frequently trip up developers. Let's look at three:
    </p>

    <ul>
      <li>
        <p><strong>Off-by-One Errors</strong>: Make sure the loop condition exactly matches the count of iterations you want. For instance:</p>
        <program language="java">
          <input>
// Off-by-One Example:
for (int i = 0; i &lt;= 10; i++) {
    System.out.println(i);
}
          </input>
        </program>
        <p>
          If you only intended to print ten numbers (0-9), using <c>i &lt;= 10</c> actually prints eleven (0..10). Here's how the values go:
        </p>
        <pre>
i: 0 1 2 3 4 5 6 7 8 9 10  // 11 iterations total!
        </pre>
        <p>
          To fix this, change <c>i &lt;= 10</c> to <c>i &lt; 10</c>, so the loop stops at 9.
        </p>
      </li>

      <li>
        <p><strong>Infinite Loops</strong>: If the update step is missing or incorrect, the condition might never become <c>false</c>:</p>
        <program language="java">
          <input>
// Infinite Loop Example:
for (int i = 0; i &lt; 10; ) {
    System.out.println(i);
    // Oops, missing i++ or some update
}
          </input>
        </program>
        <p>
          Because <c>i</c> never changes from 0, <c>i &lt; 10</c> is always <c>true</c>, so we loop forever.
        </p>
      </li>

      <li>
        <p><strong>Syntax Mistakes</strong>: A for loop's header requires semicolons to separate the three parts, and braces <c>{ }</c> around the body if there's more than one statement. For example:</p>
        <program language="java">
          <input>
// Syntax Mistake Example:
// for (int i = 0 i &lt; 10 i++)  // missing semicolons
//     System.out.println(i)    // missing braces

// Correct form:
for (int i = 0; i &lt; 10; i++) {
    System.out.println(i);
}
          </input>
        </program>
        <p>
          A small syntax error can prevent the code from compiling or lead to subtle bugs when you add more statements later.
        </p>
      </li>
    </ul>
  </subsection>

  <subsection xml:id="exiting-early-with-break">
    <title>Exiting Early with <c>break</c></title>
    <p>
      While understanding proper loop construction helps avoid most issues, sometimes
      <em>intentional early termination</em> makes code clearer and more efficient.
      Sometimes you want to stop a loop before its condition naturally becomes
      false—perhaps when you've already found what you're looking for or encountered an invalid value. In Java, you can <em>exit a loop immediately</em>
      with the <c>break</c> statement.
    </p>
    <p>
      Let's consider an example where we're searching an array for a special key value.
      Once we find it, continuing the loop is unnecessary. Here's how we might use
      <c>break</c> to exit early:
    </p>

    <program language="java">
      <input>
// Exiting a Loop with break
public class BreakDemo {
    public static void main(String[] args) {
        int[] numbers = { 3, 8, 12, 5, 7 };
        int key = 12;
        boolean foundKey = false;

        for (int i = 0; i &lt; numbers.length; i++) {
            if (numbers[i] == key) {
                System.out.println("Key found at index " + i);
                foundKey = true;
                break;  // Exit loop immediately
            }
        }

        if (!foundKey) {
            System.out.println("Key not found!");
        }
    }
}
      </input>
    </program>

    <p>
      In this snippet:
    </p>
    <ul>
      <li><p>We loop over the array indices from <c>0</c> to <c>numbers.length - 1</c>.</p></li>
      <li><p>Whenever <c>numbers[i]</c> matches <c>key</c>, we print a message and call <c>break</c>.</p></li>
      <li><p>The <c>for</c> loop terminates <strong>immediately</strong>, skipping the rest of the iteration steps.</p></li>
    </ul>

    <p>
      <strong>Why Use break?</strong>
      <ul>
        <li>
          <p><em>Efficiency</em>: If you've accomplished your goal—like finding a matching item—there's no reason to keep iterating.</p>
        </li>
        <li>
          <p><em>Clarity</em>: Sometimes, exiting on specific conditions is clearer than writing a more complicated loop condition or control logic.</p>
        </li>
      </ul>
    </p>

    <p>
      <strong>Note</strong>: Although <c>break</c> can simplify certain tasks, overusing it may complicate code flow—especially if multiple <c>break</c> statements appear scattered around. Typically, you want your loop condition to govern when you exit, but <c>break</c> is a handy tool for those exceptions when you must bail out early.
    </p>
  </subsection>

  <subsection xml:id="interactive-exercises-loops">
    <title>Interactive Exercises: Practice with Loops</title>
    <p>
      Now that you've seen standard loop patterns, common pitfalls, and the <c>break</c> statement,
      try these exercises. You may use <c>break</c> where appropriate, but remember
      to think about the loop's overall logic and how <c>break</c> affects it.
    </p>

    <!-- =============================
         EXERCISE 1: OFF-BY-ONE
         ============================= -->
    <exercise xml:id="exercise-off-by-one" interactive="activecode">
      <statement>
        <p>
          <strong>Off-by-One Exercise.</strong> The code below intends to print exactly the first 10
          integers, 0 through 9. However, it actually prints 11 values (0 through 10). 
          <em>Study the loop boundaries</em>, and modify the loop so that it produces 10 lines of
          output, from 0 to 9 inclusive. 
        </p>
        <p>
          <em>Hint</em>:  Check how many times the loop runs if the condition is 
          <c>i &lt;= 10</c> vs <c>i &lt; 10</c>. 
          Remember to reason about the <em>final</em> integer at which the loop stops.
        </p>
      </statement>
      <program xml:id="OffByOne" language="java" interactive="activecode">
        <input>
public class OffByOne {
    public static void main(String[] args) {
        // This loop prints 0..10 (11 numbers) instead of 0..9.
        // Adjust the boundary so exactly 10 numbers are printed (0..9).

        for (int i = 0; i &lt;= 10; i++) {
            System.out.println(i);
        }
    }
}
        </input>
        <tests>
import static org.junit.Assert.*;
import org.junit.Test;
import java.io.*;

public class RunestoneTests extends CodeTestHelper {
    @Test
    public void testOffByOne() throws IOException {
        String output = getMethodOutput("main");
        // Should be exactly 10 lines: 0..9
        String expected = "";
        for(int i = 0; i &lt; 10; i++){
            expected += i + "\n";
        }
        boolean match = getResults(expected, output, "Expected 10 lines (0..9)", true);
        assertTrue(match);
    }
}
        </tests>
      </program>
    </exercise>

    <!-- =============================
         EXERCISE 2: INFINITE LOOP
         ============================= -->
    <exercise xml:id="exercise-infinite-loop" interactive="activecode">
      <statement>
        <p>
          <strong>Infinite Loop Exercise.</strong> The code below <em>never stops</em>. 
          Currently, the loop condition <c>i &lt; 5</c> remains true forever, because <c>i</c> 
          is not updated inside the loop. 
          <br/>
          <strong>Your goal</strong>: Insert an update step that ensures <c>i</c> eventually 
          reaches 5, causing the loop to end. 
        </p>
        <p>
          <em>Hint</em>: Typically, you'd increment <c>i</c>, but you might also consider 
          decrementing or adjusting the condition in a different manner. 
          Use whichever approach you prefer, so long as the loop prints 
          <c>0,1,2,3,4</c> and then stops.
        </p>
      </statement>
      <program xml:id="InfiniteLoopFix" language="java" interactive="activecode">
        <input>
public class InfiniteLoopFix {
    public static void main(String[] args) {
        // TODO: Add an update step so we eventually exit the loop
        // where's the right place to put the update?
        for (int i = 0; i &lt; 5;) {
            System.out.println(i);
        }
    }
}
        </input>
        <tests>
import static org.junit.Assert.*;
import org.junit.Test;
import java.io.*;

public class RunestoneTests extends CodeTestHelper {
    @Test
    public void testInfiniteLoopFix() throws IOException {
        String output = getMethodOutput("main");
        // We expect lines for i=0..4 (5 lines total).
        String expected = "";
        for(int x = 0; x &lt; 5; x++){
            expected += x + "\n";
        }
        boolean match = getResults(expected, output, "Expected output to be 0..4", true);
        assertTrue(match);
    }
}
        </tests>
      </program>
    </exercise>

    <!-- =============================
         EXERCISE 3: SUM OF FIRST N
         ============================= -->
    <exercise xml:id="sum-first-n" interactive="activecode">
      <statement>
        <p>
          <strong>Summation Exercise.</strong> Write a loop that calculates the sum of integers 
          from 1 up to a certain <c>n</c>. Right now, the code is missing the loop logic. 
          <strong>Your tasks</strong>:
        </p>
        <ol>
          <li>Prompt for <c>n</c> or set <c>n</c> to some integer in the code (e.g., 5 or 10).</li>
          <li>Use a for loop to accumulate the sum of all integers 
              from 1..n.</li>
          <li>Print the final sum.</li>
        </ol>
        <p>
          <em>Example</em>: If <c>n</c> is 5, output should be 15. 
          If <c>n</c> is 10, output should be 55. 
          <br/>
          <em>Hint</em>: Consider <c>int sum = 0;</c> before the loop. 
          Carefully pick your starting and ending conditions to include all needed integers.
        </p>
      </statement>
      <program xml:id="SumFirstN" language="java" interactive="activecode">
        <input>
import java.util.Scanner;

public class SumFirstN {
    public static void main(String[] args) {
        // Optionally read user input, or just pick n=5 for a test
        int n = 5;  // TODO: you could do: Scanner in = new Scanner(System.in); n = in.nextInt(); 
        int sum = 0;

        // TODO: Write a loop that adds 1..n to 'sum'

        
        System.out.println("Sum from 1.."+ n + " is: " + sum);
    }
}
        </input>
        <tests>
import static org.junit.Assert.*;
import org.junit.Test;
import java.io.*;

public class RunestoneTests extends CodeTestHelper {
    @Test
    public void testSum5() throws IOException {
        // We'll just rely on them having n=5 by default
        // Then we check if the output has "15" or something
        String output = getMethodOutput("main");
        boolean has15 = output.contains("15");
        assertTrue("Expected sum=15 for n=5. Output:\n" + output, has15);
    }

    @Test
    public void testSum10() throws IOException {
        // Possibly they didn't change code to n=10, but let's see if it runs
        // We'll just check if "55" is in output. This is not strict if they're stuck on n=5.
        // In a real environment, you'd allow them to pass arguments or read input. 
        // For demonstration, we can skip a real test. We'll just show an example approach.

        String output = getMethodOutput("main");
        // If they left it at n=5, we'll pass anyway. 
        // In practice, you'd design the test differently or explain how to test multiple values.
        assertTrue("No second test or ignoring if n=10 not set", true);
    }
}
        </tests>
      </program>
    </exercise>

    <!-- =============================
         EXERCISE 4: COUNTING NONNEGATIVES (FOR + BREAK)
         ============================= -->
    <exercise xml:id="exercise-count-nonnegative" interactive="activecode">
      <statement>
        <p>
          <strong>Counting Nonnegative Numbers:</strong> 
          Let's practice using a <c>for</c> loop with a <c>break</c> statement to count positive and zero inputs.
        </p>
        <p>
          Your task is to read integer inputs (either from a user or predefined in code) up to a maximum of 100 tries:
        </p>
        <ul>
          <li>
            <p>If a <em>negative</em> number is encountered, immediately exit the loop using <c>break</c>.</p>
          </li>
          <li>
            <p>Keep a running count of how many nonnegative integers (zero or positive) have been processed.</p>
          </li>
          <li>
            <p>Once the loop ends (either due to <c>break</c> or reaching 100 inputs), display the total count of nonnegative numbers.</p>
          </li>
        </ul>
        <p>
          <em>Example</em>: For the sequence <c>10, 0, 4, -1</c>, the loop stops at <c>-1</c>, and the count is <c>3</c>. 
          If the very first number is negative, the count should be <c>0</c>.
        </p>
      </statement>
      <program xml:id="CountNonnegatives" language="java" interactive="activecode">
        <input>
import java.util.Scanner;

public class CountNonnegatives {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int count = 0;
        
        // TODO: Let's do up to 100 inputs max: 
        // for ...

        System.out.println("Count of nonnegative numbers = " + count);
    }
}
        </input>
        <tests>
import static org.junit.Assert.*;
import org.junit.Test;
import java.io.*;

public class RunestoneTests extends CodeTestHelper {
    @Test
    public void testThreePositive() throws IOException {
        // simulate input: 10, 0, 4, -1
        String input = "10\n0\n4\n-1\n";
        String output = runWithInput(input, "main");

        boolean has3 = output.contains("3");
        assertTrue("Expected 3 in output with input 10,0,4,-1. Output:\n" + output, has3);
    }

    @Test
    public void testNoPositive() throws IOException {
        // if the user enters a negative right away
        String input = "-2\n";
        String output = runWithInput(input, "main");

        boolean has0 = output.contains("0");
        assertTrue("Expected 0 in output if first input is negative. Output:\n" + output, has0);
    }
}
        </tests>
      </program>
    </exercise>
  </subsection>

  <subsection xml:id="preview-other-loops">
    <title>Preview: Other Java Loops</title>
    <p>
      Besides the <c>for</c> loop, Java also offers <c>while</c> and <c>do-while</c>. Both use a similar idea: run the body repeatedly while a condition holds true. The <c>do-while</c> loop ensures the body runs at least once before checking the condition. We'll explore these in more detail next, but the principles are largely the same (watch for updates, watch your condition, and guard against infinite loops).
    </p>
  </subsection>

  <subsection xml:id="summary-intro-loops">
    <title>Summary</title>
    <p>
      We covered the <em>for</em> loop in Java, highlighting its four parts: initialization, condition, loop body, and update. You saw a simple example that prints numbers from 0 to 9, then explored common pitfalls—off-by-one errors, infinite loops, and syntax gotchas—and practiced them in code. Next, we'll look at <c>while</c> and <c>do-while</c>, and eventually move on to arrays (so we can loop over large sets of data) and even a custom “iterable” class. 
    </p>
  </subsection>
</section>