<?xml version="1.0"?>
<!-- Generated by Docutils 0.19 -->
<section xml:id="_object-superclass">
  <title>Object Superclass</title>
  <introduction>
    <p>The <term>Object</term> class is the superclass of all other classes in Java and a part of the built-in java.lang package. If a parent class isnâ€™t specified using the <term>extends</term> keyword, the class will inherit from the <c>Object</c> class.  What does a class inherit from the <c>Object</c> class?  The <raw format="html" xml:space="preserve"><a href="https://apcentral.collegeboard.org/pdf/ap-computer-science-a-java-quick-reference-0.pdf?course=ap-computer-science-a" target="_blank">AP CS A Java Quick Reference Sheet</a></raw> lists the two main methods that are most used, toString() and equals(Object), from the Object class at the bottom, which are covered in more detail below.</p>
    <p>
      <ul>
            <li>
                <p>String toString()</p>
            </li>
            <li>
                <p>boolean equals(Object other)</p>
            </li>
        </ul>
    </p>
  </introduction>
  <subsection xml:id="_tostring-method">
            <title>toString() method</title>
            <p>One commonly overriden Object method is toString(), which is often used to print out the attributes of an object. It is a good idea to write your own toString() method in every class. In a subclass, toString() can call the superclass toString() method using super.toString() and then add on its own attributes.</p>
            <p><image source="../_static/codingExercise.png" width="NaN%" alt="coding exercise"/> <term>Coding Exercise</term></p>
            <p>In the following code, the Person class overrides the Object toString() method and the Student class overrides the Person toString() method. They each add on their attributes.</p>

<exercise label="toStringDemo">
    <statement>
            <p>After trying the code below, complete the subclass called APStudent that extends Student with a new attribute called APscore and override the toString() method to call the superclass method and then add on the APscore. Uncomment the APStudent object in the main method to test it.</p>

    </statement>
    <program xml:id="toStringDemo_editor" interactive="activecode" language="java">

        <input>
public class Person
{
     private String name;
     public Person(String name)
     {
        this.name = name;
     }
     public String toString()
     {
        return name;
     }
     public static void main(String[] args)
     {
        Person p = new Person("Sila");
        Student s = new Student("Tully", 1001);
        System.out.println(p); //call Person toString
        System.out.println(s);  //call Student toString
        // Uncomment the code below to test the APStudent class
        /*
        APStudent ap = new APStudent("Ayanna", 1002, 5);
        System.out.println(ap);
        */
     }
  }

  class Student extends Person
  {
     private int id;
     public Student(String name, int id)
     {
        super(name);
        this.id = id;
     }
     public String toString()
     {
        return super.toString() + " " + id;
     }
  }

  class APStudent extends Student
  {
     private int score;
     public APStudent(String name, int id, int score)
     {
        super(name, id);
        this.score = score;
     }
     // Add a toString() method here that calls the super class toString

  }
  ====
  import static org.junit.Assert.*;
   import org.junit.*;
   import java.io.*;

   public class RunestoneTests extends CodeTestHelper
   {
       public RunestoneTests() {
           super("Person");
       }

       @Test
       public void test1()
       {
           String output = getMethodOutput("main");
           String expect = "Sila\nTully 1001\nAyanna 1002 5";

           boolean passed = getResults(expect, output, "Checking output from main()");
           assertTrue(passed);
       }
        @Test
       public void containsToString()
       {
         String code = getCode();
         String target = "public String toString()";

         int num = countOccurencesRegex(code, target);
         boolean passed = (num &gt;= 3);

         getResults("3", ""+num, "3 toString methods", passed);
         assertTrue(passed);
       }
   }
        </input>
<tests>


</tests>

    </program>
</exercise>
        </subsection>
  <subsection xml:id="_equals-method">
            <title>equals Method</title>
            <p>One of the important things that gets inherited from the Object superclass is the <c>equals(Object obj)</c> method.  This method is used to test if the current object and the passed object called <c>obj</c> are equal. But what does that mean?</p>
            
            
            <p xml:id="_index-0-1736740970">As seen in the code below, the <c>equals</c> method that is inherited from the <c>Object</c> class only returns true if the two objects references refer to the same object.</p>
            <p><image source="../_static/codingExercise.png" width="NaN%" alt="coding exercise"/> <term>Coding Exercise</term></p>

<exercise label="ObjEquals">
    <statement>
            <p>Try to guess what this code will print out before running it.</p>

    </statement>
    <program xml:id="ObjEquals_editor" interactive="activecode" language="java">

        <input>
public class Person
{
   private String name;

   public Person(String theName)
   {
      this.name = theName;
   }

   public static void main(String[] args)
   {
      Person p1 = new Person("Kairen");
      Person p2 = new Person("Jewel");
      Person p3 = new Person("Kairen");
      Person p4 = p3;
      System.out.println(p1.equals(p2));
      System.out.println(p2.equals(p3));
      System.out.println(p1.equals(p3));
      System.out.println(p3.equals(p4));

   }
}
        </input>
<tests>
import static org.junit.Assert.*;
  import org.junit.*;
  import java.io.*;

  public class RunestoneTests extends CodeTestHelper
  {
      public RunestoneTests() {
          super("Person");
      }

      @Test
      public void test1()
      {
          String output = getMethodOutput("main");
          String expect = "false\nfalse\nfalse\ntrue";

          boolean passed = getResults(expect, output, "Checking output from main()", true);
          assertTrue(passed);

      }
  }
</tests>

    </program>
</exercise>
            <p>The <c>equals</c> method inherited from the <c>Object</c> class only returns true when the two references point to the same object as shown in the code above and figure 1 below.</p>
            <figure align="center" xml:id="id1-1736741071"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 1: A picture from the Java Visualizer showing that only p3 and p4 refer to the same object.</caption><image source="Unit9-Inheritance/Figures/equalsEx.png" width="NaN%"/></figure>
        </subsection>
  <subsection xml:id="_overriding-the-equals-method">
            <title>Overriding the equals Method</title>
            <p>If you want to change how the inherited <c>equals</c> method works you can <term>override</term> it so that the new method is called instead of the inherited one.  The <c>String</c> class <term>overrides</term> the inherited equals method to return true when the two objects have the same characters in the same order as shown in the code below.</p>
            <p><image source="../_static/codingExercise.png" width="NaN%" alt="coding exercise"/> <term>Coding Exercise</term></p>

<exercise label="StringTest1">
    <statement>
            <p>Try to guess what this code will print out before running it.</p>

    </statement>
    <program xml:id="StringTest1_editor" interactive="activecode" language="java">

        <input>
public class StringTest
{
   public static void main(String[] args)
   {
      String s1 = "hi";
      String s2 = "Hi";
      String s3 = new String("hi");
      System.out.println(s1.equals(s2));
      System.out.println(s2.equals(s3));
      System.out.println(s1.equals(s3));
   }
}
        </input>
<tests>
import static org.junit.Assert.*;
  import org.junit.*;
  import java.io.*;

  public class RunestoneTests extends CodeTestHelper
  {
      public RunestoneTests() {
          super("StringTest");
      }

      @Test
      public void test1()
      {
          String output = getMethodOutput("main");
          String expect = "false\nfalse\ntrue";

          boolean passed = getResults(expect, output, "Checking output from main()", true);
          assertTrue(passed);

      }
  }
</tests>

    </program>
</exercise>
            <p>Any class can override the inherited <c>equals</c> method by providing a method with the same method signature (method name and parameter list) and return type.  The provided method will be called instead of the inherited one, which is why we say that the new method <term>overrides</term> the inherited method.  The <c>Person</c> class below <term>overrides</term> the inherited <c>equals</c> method.</p>
            <p><image source="../_static/codingExercise.png" width="NaN%" alt="coding exercise"/> <term>Coding Exercise</term></p>

<exercise label="OverrideEquals">
    <statement>
            <p>Try to guess what this code will print out before running it. Click on the CodeLens button to step forward through the code and watch the memory.</p>

    </statement>
    <program xml:id="OverrideEquals_editor" interactive="activecode" language="java">

        <input>
public class Person
{
   private String name;

   public Person(String theName)
   {
      this.name = theName;
   }

   /** Overriden equals method that checks if names are equal
       in this Person object and an the other Object.
       */
   public boolean equals(Object other)
   {
      // Type cast other to a Person
      Person otherPerson = (Person) other;
      // Check if names are equal
      return this.name.equals(otherPerson.name);
   }

   public static void main(String[] args)
   {
      Person p1 = new Person("Gabe");
      Person p2 = new Person("Gus");
      Person p3 = new Person("Gabe");
      Person p4 = p3;
      System.out.println(p1.equals(p2));
      System.out.println(p2.equals(p3));
      System.out.println(p1.equals(p3));
      System.out.println(p3.equals(p4));
   }
}
        </input>
<tests>
import static org.junit.Assert.*;
  import org.junit.*;
  import java.io.*;

  public class RunestoneTests extends CodeTestHelper
  {
      public RunestoneTests() {
          super("Person");
      }

      @Test
      public void test1()
      {
          String output = getMethodOutput("main");
          String expect = "false\nfalse\ntrue\ntrue";

          boolean passed = getResults(expect, output, "Checking output from main()", true);
          assertTrue(passed);

      }
  }
</tests>

    </program>
</exercise>
            <figure align="center" xml:id="id2-1736741088"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 2: A picture from the Java Visualizer showing the object references and objects.</caption><image source="Unit9-Inheritance/Figures/overrideEquals.png" width="NaN%"/></figure>
            <p>You can step through this code in the Java Visualizer by clicking on the following link: <url href="http://cscircles.cemc.uwaterloo.ca/java_visualize/#code=public+class+Person%0A%7B%0A++++++private+String+name%3B%0A++++++%0A++++++public+Person(String+theName)%0A++++++%7B%0A+++++++++this.name+%3D+theName%3B%0A++++++%7D%0A++++++%0A++++++public+boolean+equals(Object+other)%0A++++++%7B%0A+++++++++Person+otherPerson+%3D+(Person)+other%3B%0A+++++++++return+this.name.equals(otherPerson.name)%3B%0A++++++%7D%0A++++++%0A++++++public+static+void+main(String%5B%5D+args)%0A++++++%7B%0A+++++++++Person+p1+%3D+new+Person(%22Gabe%22)%3B%0A+++++++++Person+p2+%3D+new+Person(%22Gus%22)%3B%0A+++++++++Person+p3+%3D+new+Person(%22Gabe%22)%3B%0A+++++++++Person+p4+%3D+p3%3B%0A+++++++++System.out.println(p1.equals(p2))%3B%0A+++++++++System.out.println(p2.equals(p3))%3B%0A+++++++++System.out.println(p1.equals(p3))%3B%0A+++++++++System.out.println(p3.equals(p4))%3B%0A+++++++++%0A++++++%7D%0A%7D&amp;mode=display&amp;curInstr=23" visual="http://cscircles.cemc.uwaterloo.ca/java_visualize/#code=public+class+Person%0A%7B%0A++++++private+String+name%3B%0A++++++%0A++++++public+Person(String+theName)%0A++++++%7B%0A+++++++++this.name+%3D+theName%3B%0A++++++%7D%0A++++++%0A++++++public+boolean+equals(Object+other)%0A++++++%7B%0A+++++++++Person+otherPerson+%3D+(Person)+other%3B%0A+++++++++return+this.name.equals(otherPerson.name)%3B%0A++++++%7D%0A++++++%0A++++++public+static+void+main(String%5B%5D+args)%0A++++++%7B%0A+++++++++Person+p1+%3D+new+Person(%22Gabe%22)%3B%0A+++++++++Person+p2+%3D+new+Person(%22Gus%22)%3B%0A+++++++++Person+p3+%3D+new+Person(%22Gabe%22)%3B%0A+++++++++Person+p4+%3D+p3%3B%0A+++++++++System.out.println(p1.equals(p2))%3B%0A+++++++++System.out.println(p2.equals(p3))%3B%0A+++++++++System.out.println(p1.equals(p3))%3B%0A+++++++++System.out.println(p3.equals(p4))%3B%0A+++++++++%0A++++++%7D%0A%7D&amp;mode=display&amp;curInstr=23">OverrideEquals Ex</url>.</p>
            <p>To write your own equals method, you must:</p>
            <p><ol marker="1">
                <li>
                    <p>Use the <c>public boolean equals(Object other)</c> method signature</p>
                </li>
                <li>
                    <p>Type cast other to your Classname</p>
                </li>
                <li>
                    <p>Return whether this objectâ€™s attribute(s) equals the other objectâ€™s attribute(s) with == for primitive types like int and double, or equals for reference types like String or another class.</p>
                </li>
            </ol></p>
            <program language="java"><input>
public boolean equals(Object other)
{
   // Type cast other to your Classname
   Classname otherObj = (Classname) other;
   // Check if attributes are equal
   return (this.attribute == otherObj.attribute);
   // or this.attribute.equals(otherObj.attribute) if attribute a String
}
</input></program>
            <p>If you need to check multiple attributes, for example a name and an address for Person objects, you can use &amp;&amp; to combine tests.</p>
            <program language="java"><input>
return (this.attribute1 == otherObj.attribute1) &amp;&amp;
       this.attribute2.equals(otherObj.attribute2)
</input></program>
            <p>If you are writing an equals method for a subclass, you can call the superclass equals using the <term>super</term> keyword to check the attributes in the superclass and then check the attributes in the subclass.</p>
            <program language="java"><input>
return super.equals(otherObj) &amp;&amp;
       (this.attribute == otherObj.attribute)
</input></program>
        </subsection>
  <subsection xml:id="_groupwork-programming-challenge-savings-account">
            <title><image source="../_static/groupwork.png" width="NaN%" alt="groupwork"/> Programming Challenge : Savings Account</title>
            <p>In the following code, a bank account class contains the account holderâ€™s name and the money balance in the account.</p>
            <p>Work in pairs to write the following code and test each part before moving on to the next step:</p>
            <p><ol marker="1">
                <li>
                    <p>Write a subclass called SavingsAccount that extends Account and  adds an interest rate variable.</p>
                </li>
                <li>
                    <p>Write a constructor with 3 arguments (name, balance, interest rate) for the SavingsAccount class that uses the super constructor.</p>
                </li>
                <li>
                    <p>Write a toString() method for SavingsAccount that returns a call to the super toString() method and the interest rate.</p>
                </li>
                <li>
                    <p>Write an equals method for SavingsAccount that calls the superclass equals method and checks that the interest rates are equal.</p>
                </li>
            </ol></p>

<exercise label="challenge-9-7-savingsaccount">
    <statement>
            <p>Complete the subclass SavingsAccount below which inherits from Account and adds an interest rate variable. Write a constructor with 3 arguments, a toString, and an equals method for it. Uncomment the code in main to test your new class and methods.</p>

    </statement>
    <program xml:id="challenge-9-7-savingsaccount_editor" interactive="activecode" language="java">

        <input>
public class Account
{
    private String name;
    private double balance;

    public Account(String name, double balance)
    {
       this.name = name;
       this.balance = balance;
    }

    public String toString() {
     return name + ", " + balance;
    }

    public boolean equals(Object other)
    {
       Account otherAccount = (Account) other;
       return (this.balance == otherAccount.balance) &amp;&amp;
                     this.name.equals(otherAccount.name);
    }

    public static void main(String[] args)
    {
        Account acct1 = new Account("Armani Smith",1500);
                System.out.println(acct1);
        // Uncomment this code to test SavingsAccount
        /*
        SavingsAccount acct2 = new SavingsAccount("Dakota Jones",1500,4.5);
        SavingsAccount acct3 = new SavingsAccount("Dakota Jones",1500,4.5);
                System.out.println(acct2);
                System.out.println(acct2.equals(acct3));
        */
    }
}
/* Write the SavingsAccount class which inherits from Account
   and has an interest rate and a constructor, toString, and
   equals methods.
*/
class SavingsAccount
{

}
        </input>
<tests>
import static org.junit.Assert.*;
  import org.junit.*;;
  import java.io.*;

  public class RunestoneTests extends CodeTestHelper
  {
      public RunestoneTests() {
          super("Account");
      }

      @Test
      public void test1()
      {
          String output = getMethodOutput("main");
          String expect = "Armani Smith, 1500.0\nDakota Jones, 1500.0, 4.5\ntrue";

          boolean passed = getResults(expect, output, "Checking output from main()");
          assertTrue(passed);
      }

      @Test
      public void test3()
      {
          String target = "public String toString()";

          String code = getCode();
          int index = code.indexOf("class SavingsAccount");
          code = code.substring(index);
          boolean passed = code.contains(target);

          getResults("true", ""+passed, "Checking that code contains toString() in SavingsAccount", passed);
          assertTrue(passed);
      }

      @Test
      public void test30()
      {
          String target = "super.toString()";

          String code = getCode();
          int index = code.indexOf("class SavingsAccount");
          code = code.substring(index);

          boolean passed = code.contains(target);

          getResults("true", ""+passed, "Checking that code contains call to super.toString() in SavingsAccount", passed);
          assertTrue(passed);
      }
      @Test
      public void containsExtends()
          {
             String target = "SavingsAccount extends Account";
             boolean passed = checkCodeContains(target);
             assertTrue(passed);
          }

      @Test
      public void test31()
      {
          String target = "public boolean equals(Object";

          String code = getCode();
          int index = code.indexOf("class SavingsAccount");
          code = code.substring(index);

          boolean passed = code.contains(target);

          getResults("true", ""+passed, "Checking that code contains equals method in SavingsAccount", passed);
          assertTrue(passed);
      }

      @Test
      public void test32()
      {
          String target = "super.equals(";

          String code = getCode();
          int index = code.indexOf("class SavingsAccount");
          code = code.substring(index);

          boolean passed = code.contains(target);

          getResults("true", ""+passed, "Checking that code contains call to super.equals() in SavingsAccount", passed);
          assertTrue(passed);

      }
  }
</tests>

    </program>
</exercise>
        </subsection>
  <subsection xml:id="_summary-1736741036">
            <title>Summary</title>
            <p><ul>
                <li>
                    <p>The Object class is the superclass of all other classes in Java and a part of the built-in java.lang package.</p>
                </li>
                <li>
                    <p>The following Object class methods and constructors, including what they do and when they are used, are part of the Java Quick Reference:</p>
                    <p><ul>
                        <li>
                            <p>String toString()</p>
                        </li>
                        <li>
                            <p>boolean equals(Object other)</p>
                        </li>
                    </ul></p>
                </li>
                <li>
                    <p>Subclasses of Object often override the equals and toString methods with class-specific implementations.</p>
                </li>
            </ul></p>
        </subsection>
</section>
