<?xml version="1.0"?>
<!-- Generated by Docutils 0.19 -->
<section xml:id="_nested-loops-for-2d-arrays-day-1">
  <title>Nested Loops for 2D Arrays (Day 1)</title>
  <introduction>
    <p>In this lesson, you will learn how to use nested loops to traverse a 2D Array.</p>
  </introduction>
  <subsection xml:id="_getting-the-number-of-rows-and-columns">
            <title>Getting the Number of Rows and Columns</title>
            
            
            <p xml:id="_index-0-1736736815">Arrays know their length (how many elements they can store).  The length is a public read-only field so you can use <em>dot-notation</em> to access the field (<c>arrayName.length</c>). The length of the outer array is the number of rows and the length of one of the inner arrays is the number of columns.</p>
            <program language="java"><input>
ticketInfo.length // returns the number of rows
ticketInfo[0].length // returns the number of columns
</input></program>
            <note>
                <p>Note that length is a field and not a method, so you don’t add parentheses after length.  However, if you use parentheses after length during the exam, you won’t lose any points. Since for the AP CS A exam all two-dimensional arrays are rectangular arrays (arrays that have the same number of columns in each row) you can just use the length of the first inner array as the number of columns as shown by <c>ticketInfo[0].length</c>.</p>
            </note>
            <p><image source="../_static/exercise.png" width="NaN%" alt="exercise"/> <term>Check your understanding</term></p>

    <exercise label="qa2ldb_2">
        <statement>

            <p>8-2-1: How many rows does <c>a</c> have if it is created as follows <c>int[][] a = { {2, 4, 6, 8}, {1, 2, 3, 4}};</c>?</p>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>2</p>
                </statement>
                <feedback>
                    <p>The size of outer list is the number of rows.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>4</p>
                </statement>
                <feedback>
                    <p>The size of the inner list is the number of columns.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>8</p>
                </statement>
                <feedback>
                    <p>This is the total number of items in the array.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="qa2ldb_3">
        <statement>

            <p>8-2-2: Which of the following would I use to get the value in the third row and second column from a 2D array called <c>nums</c>?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>nums[3][2]</p>
                </statement>
                <feedback>
                    <p>This would be true if array indices started with 1 but they start with 0.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>nums[2][3]</p>
                </statement>
                <feedback>
                    <p>This would be true if array indicies started with 1 and the column was specified first.  However, array indices start at 0 and the row is given first in row-major order.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>nums[2][1]</p>
                </statement>
                <feedback>
                    <p>Array indices start with 0 so the third row has an index of 2 and the second column has an index of 1.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>nums[1][2]</p>
                </statement>
                <feedback>
                    <p>This would be true if the column index was first, but in row-major order the row index is first.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
        </subsection>
  <subsection xml:id="_looping-through-a-2d-array">
            <title>Looping Through a 2D Array</title>
            
            
            <p xml:id="_index-1-1736736824">Since you can find out the number of rows and columns in a 2D array you can use a <term>nested for loop</term> (one loop inside of another loop) to loop/traverse through all of the elements of a 2D array.</p>
            <program language="java"><input>
int[][] array = { {1,2,3},{4,5,6}};
for (int row = 0; row &lt; array.length; row++)
{
    for (int col = 0; col &lt; array[0].length; col++)
    {
         System.out.println( array[row][col] );
    }
 }
</input></program>
            <p><image source="../_static/codingExercise.png" width="NaN%" alt="coding exercise"/> <term>Coding Exercise</term></p>

<exercise label="lcgetAverage">
    <statement>
            <p>What does the following code do? Add another row of numbers to the matrix. Will the loops traverse this row too? Note that an array can be passed in as an argument to a method.</p>

    </statement>
    <program xml:id="lcgetAverage_editor" interactive="activecode" language="java">

        <input>
public class Test1
{

   public static double getAverage(int[][] a)
   {
      double total = 0;
      int value = 0;
      for (int row = 0; row &lt; a.length; row++)
      {
         for (int col = 0; col &lt; a[0].length; col++)
         {
            value = a[row][col];
            total = total + value;
         }
      }
      return total / (a.length * a[0].length);
   }

   public static void main(String[] args)
   {
      int[][] matrix = { {1,2,3},{4,5,6}};
      System.out.println(getAverage(matrix));
   }
}
        </input>
<tests>
import static org.junit.Assert.*;
 import org.junit.*;;
 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {

     @Test
     public void test1()
     {
         String output = getMethodOutput("main");
         String expected = "3.5";

         boolean passed = !output.contains(expected);

         passed = getResults("true", ""+passed, "Average has changed");
         assertTrue(passed);
     }

     @Test
     public void test2()
     {
         String code = getCode();
         String expected = "int[][] matrix = { {1,2,3},{4,5,6}};";

         boolean passed = !code.replaceAll(" ","").contains(expected.replaceAll(" ",""));

         passed = getResults("true", ""+passed, "Matrix has been changed");
         assertTrue(passed);
     }
 }
</tests>

    </program>
</exercise>
            <p>Some key things to notice about this code are:</p>
            <p><ul>
                <li>
                    <p><c>total</c> is declared to be a double so that the result will be a double.  If <c>total</c> was declared to be an <c>int</c> then the result would be an integer and the values after the decimal point would be thrown away.</p>
                </li>
                <li>
                    <p>The array is passed in as an argument to the method.</p>
                </li>
                <li>
                    <p>The number of rows is <c>a.length</c></p>
                </li>
                <li>
                    <p>The number of columns is <c>a[0].length</c></p>
                </li>
                <li>
                    <p>The number of times this loop executes is the number of rows times the number of columns.</p>
                </li>
            </ul></p>
            <p><image source="../_static/exercise.png" width="NaN%" alt="exercise"/> <term>Mixed up programs</term></p>
<exercise label="9_largest" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
            <p>The following has the correct code to find the largest value in a 2D array. Drag the blocks from the left into the correct order on the right and indent them as well. Check your solution by clicking on the Check button.  You will be told if any of the blocks are in the wrong order or have the wrong indention.</p>
</statement>
<blocks>
    <block order="5">
    <cline>public static int getLargest(int[][] arr)  {</cline>
    </block><block order="1">
    <cline> int largest = arr[0][0];</cline>
    <cline> int current = 0;</cline>
    <cline> for (int r = 0; r &lt; arr.length; r++)  {</cline>
    <cline> </cline>
    </block><block order="8">
    <cline>   for (int c = 0; c &lt; arr[0].length; c++)  {</cline>
    <cline> </cline>
    </block><block order="7">
    <cline>     current = arr[r][c];</cline>
    <cline>     if (current &gt; largest)  {</cline>
    <cline> </cline>
    </block><block order="2">
    <cline>       largest = current;</cline>
    <cline> </cline>
    </block><block order="3">
    <cline>     } // end if</cline>
    <cline> </cline>
    </block><block order="6">
    <cline>   } // end column loop</cline>
    <cline> </cline>
    </block><block order="9">
    <cline> } // end row loop</cline>
    <cline> return largest;</cline>
    </block><block order="4">
    <cline>} // end method</cline>
    </block>
</blocks></exercise>
<p>You can step through this code using the Java Visualizer by clicking on the following <raw format="html" xml:space="preserve"><a href= "http://cscircles.cemc.uwaterloo.ca/java_visualize/#code=public+class+Test+%7B%0A+++%0A+++public+static+int+getLargest(int%5B%5D%5B%5D+arr)++%7B%0A++++int+largest+%3D+arr%5B0%5D%5B0%5D%3B%0A++++for+(int+row+%3D+0%3B+row+%3C+arr.length%3B+row%2B%2B)++%7B%0A++++++for+(int+col+%3D+0%3B+col+%3C+arr%5B0%5D.length%3B+col%2B%2B)++%7B%0A++++++++if+(arr%5Brow%5D%5Bcol%5D+%3E+largest)++%7B%0A++++++++++largest+%3D+arr%5Brow%5D%5Bcol%5D%3B%0A++++++++%7D+//+end+if%0A++++++%7D+//+end+column+loop%0A++++%7D+//+end+row+loop%0A++++return+largest%3B%0A+++%7D+//+end+method%0A+++%0A+++public+static+void+main(String%5B%5D+args)+%7B%0A++++++int%5B%5D%5B%5D+testArray+%3D+%7B%7B-32,+-6,+-3%7D,+%7B-392,+-93,+-2%7D%7D%3B%0A++++++System.out.println(getLargest(testArray))%3B%0A+++%7D%0A%7D&amp;mode=display&amp;curInstr=40" style="text-decoration:underline" target="_blank" >Java Visualizer</a></raw>.</p>
            
            <p>Most nested loops with 2D Arrays use “row-major order” where the outer loop goes through each row. However, you can write nested loops that traverse in “column-major order” like below.</p>
            <p><image source="../_static/codingExercise.png" width="NaN%" alt="coding exercise"/> <term>Coding Exercise</term></p>

<exercise label="ColumnMajorTraversal">
    <statement>
            <p>What will the following code print out? Try to guess before you run it.</p>

    </statement>
    <program xml:id="ColumnMajorTraversal_editor" interactive="activecode" language="java">

        <input>
public class ColumnMajorTraversal
{
  public static void main(String[] args)
   {
     int[][] array = { {1,2,3},{4,5,6}};
     for (int col = 0; col &lt; array[0].length; col++)
     {
         for (int row = 0; row &lt; array.length; row++)
         {
             System.out.println( array[row][col] );
         }
     }
   }
}
        </input>
<tests>
import static org.junit.Assert.*;
 import org.junit.*;;
 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
     @Test
     public void test1()
     {
         String output = getMethodOutput("main");
         String expected = "1\n4\n2\n5\n3\n6";

         boolean passed = getResults(expected, output, "main()", true);
         assertTrue(passed);
     }
 }
</tests>

    </program>
</exercise>
            <p>This lesson is continued on the next page.</p>
        </subsection>
</section>
