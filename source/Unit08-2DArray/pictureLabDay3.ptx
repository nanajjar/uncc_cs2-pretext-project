<?xml version="1.0"?>
<!-- Generated by Docutils 0.19 -->
<section>
  <title>Picture Lab Day 3: Exploring a Picture (not complete)</title>
  <p>In this lesson (which is not complete), we will cover the basics of image navigation. Images all start at a (0,0) point but unlike the origin in geometry, this point is in the upper right corner rather than the bottom left.
            We will be using an image called lion.jpg which should appear on the page. A JPEG file is one that follows an intentional standard for storing picture data using lossy compression. Lossy compression
            means that the amount of data that is stored is much smaller than the available data, but the data that is omitted to reach this smaller size, will not be missed.</p>
  <p>To make this activity run on your browser, it has been modified slightly from the original picture lab. We have provided an active code section with the lion.jpg file and a main method with one helper function. This gives you some freedom to run tests as you see fit.
            Write what you feel will help you answer the multiple choice questions. For example, if asked what color is at the center of the image, you could have a print statement access the center of the image and print out the RGB values.</p>
  <DataFileNode line="12" runestone_options="{'image': 'true', 'fromfile': '../../_static/metalLion.jpg', 'hide': None, 'subchapter': 'pictureLabDay3', 'chapter': 'Unit08-2DArray', 'basecourse': 'csawesome', 'optional': '', 'optclass': '', 'divid': 'metalLion.jpg', 'qnumber': '9-11-1', 'imtype': 'jpg', 'rows': 20, 'filecontent': '', 'hidden': 'data-hidden', 'edit': 'false', 'question_label': '8.8.1.1'}" source="/home/hat/Development/school/runestone-csawesome/csawesome2ptx/_sources/Unit08-2DArray/pictureLabDay3.rst">
        </DataFileNode>
  <DataFileNode line="239" runestone_options="{'hide': None, 'subchapter': 'pictureLabDay3', 'chapter': 'Unit08-2DArray', 'basecourse': 'csawesome', 'optional': '', 'optclass': '', 'divid': 'pictureClasses1.jar', 'qnumber': '9-11-10', 'cols': 65, 'rows': 20, 'filecontent': 'import java.awt.Image;\nimport java.awt.image.BufferedImage;\n\n/**\n * Interface to describe a digital picture.  A digital picture can have an\n * associated file name.  It can have a title.  It has pixels\n * associated with it and you can get and set the pixels.  You\n * can get an Image from a picture or a BufferedImage.  You can load\n * it from a file name or image.  You can show a picture.  You can\n * explore a picture.  You can create a new image for it.\n *\n * @author Barb Ericson ericson@cc.gatech.edu\n */\npublic interface DigitalPicture\n{\n  public String getFileName(); // get the file name that the picture came from\n  public String getTitle(); // get the title of the picture\n  public void setTitle(String title); // set the title of the picture\n  public int getWidth(); // get the width of the picture in pixels\n  public int getHeight(); // get the height of the picture in pixels\n  public Image getImage(); // get the image from the picture\n  public BufferedImage getBufferedImage(); // get the buffered image\n  public int getBasicPixel(int x, int y); // get the pixel information as an int\n  public void setBasicPixel(int x, int y, int rgb); // set the pixel information\n  public Pixel getPixel(int x, int y); // get the pixel information as an object\n  public Pixel[] getPixels(); // get all pixels in row-major order\n  public Pixel[][] getPixels2D(); // get 2-D array of pixels in row-major order\n  public void load(Image image); // load the image into the picture\n  public boolean load(String fileName); // load the picture from a file\n  public void show(); // show the picture\n  public boolean write(String fileName); // write out a file\n}\n\nimport java.awt.Color;\n\n/**\n * Class that references a pixel in a picture. Pixel\n * stands for picture element where picture is\n * abbreviated pix.  A pixel has a column (x) and\n * row (y) location in a picture.  A pixel knows how\n * to get and set the red, green, blue, and alpha\n * values in the picture.  A pixel also knows how to get\n * and set the color using a Color object.\n *\n * @author Barb Ericson ericson@cc.gatech.edu\n */\npublic class Pixel\n{\n\n  ////////////////////////// fields ///////////////////////////////////\n\n  /** the digital picture this pixel belongs to */\n  private DigitalPicture picture;\n\n  /** the x (column) location of this pixel in the picture; (0,0) is top left */\n  private int x;\n\n  /** the y (row) location of this pixel in the picture; (0,0) is top left */\n  private int y;\n\n  ////////////////////// constructors /////////////////////////////////\n\n  /**\n   * A constructor that takes the x and y location for the pixel and\n   * the picture the pixel is coming from\n   * @param picture the picture that the pixel is in\n   * @param x the x location of the pixel in the picture\n   * @param y the y location of the pixel in the picture\n   */\n  public Pixel(DigitalPicture picture, int x, int y)\n  {\n    // set the picture\n    this.picture = picture;\n\n    // set the x location\n    this.x = x;\n\n    // set the y location\n    this.y = y;\n\n  }\n\n  ///////////////////////// methods //////////////////////////////\n\n  /**\n   * Method to get the x location of this pixel.\n   * @return the x location of the pixel in the picture\n   */\n  public int getX() { return x; }\n\n  /**\n   * Method to get the y location of this pixel.\n   * @return the y location of the pixel in the picture\n   */\n  public int getY() { return y; }\n\n  /**\n   * Method to get the row (y value)\n   * @return the row (y value) of the pixel in the picture\n   */\n  public int getRow() { return y; }\n\n  /**\n   * Method to get the column (x value)\n   * @return the column (x value) of the pixel\n   */\n  public int getCol() { return x; }\n\n  /**\n   * Method to get the amount of alpha (transparency) at this pixel.\n   * It will be from 0-255.\n   * @return the amount of alpha (transparency)\n   */\n  public int getAlpha() {\n\n    /* get the value at the location from the picture as a 32 bit int\n     * with alpha, red, green, blue each taking 8 bits from left to right\n     */\n    int value = picture.getBasicPixel(x,y);\n\n    // get the alpha value (starts at 25 so shift right 24)\n    // then and it with all 1\'s for the first 8 bits to keep\n    // end up with from 0 to 255\n    int alpha = (value &gt;&gt; 24) &amp; 0xff;\n\n    return alpha;\n  }\n\n  /**\n   * Method to get the amount of red at this pixel.  It will be\n   * from 0-255 with 0 being no red and 255 being as much red as\n   * you can have.\n   * @return the amount of red from 0 for none to 255 for max\n   */\n  public int getRed() {\n\n    /* get the value at the location from the picture as a 32 bit int\n     * with alpha, red, green, blue each taking 8 bits from left to right\n     */\n    int value = picture.getBasicPixel(x,y);\n\n    // get the red value (starts at 17 so shift right 16)\n    // then AND it with all 1\'s for the first 8 bits to\n    // end up with a resulting value from 0 to 255\n    int red = (value &gt;&gt; 16) &amp; 0xff;\n\n    return red;\n  }\n\n  /**\n   * Method to get the red value from a pixel represented as an int\n   * @param value the color value as an int\n   * @return the amount of red\n   */\n  public static int getRed(int value)\n  {\n    int red = (value &gt;&gt; 16) &amp; 0xff;\n    return red;\n  }\n\n  /**\n   * Method to get the amount of green at this pixel.  It will be\n   * from 0-255 with 0 being no green and 255 being as much green as\n   * you can have.\n   * @return the amount of green from 0 for none to 255 for max\n   */\n  public int getGreen() {\n\n    /* get the value at the location from the picture as a 32 bit int\n     * with alpha, red, green, blue each taking 8 bits from left to right\n     */\n    int value = picture.getBasicPixel(x,y);\n\n    // get the green value (starts at 9 so shift right 8)\n    int green = (value &gt;&gt;  8) &amp; 0xff;\n\n    return green;\n  }\n\n  /**\n   * Method to get the green value from a pixel represented as an int\n   * @param value the color value as an int\n   * @return the amount of green\n   */\n  public static int getGreen(int value)\n  {\n    int green = (value &gt;&gt; 8) &amp; 0xff;\n    return green;\n  }\n\n  /**\n   * Method to get the amount of blue at this pixel.  It will be\n   * from 0-255 with 0 being no blue and 255 being as much blue as\n   * you can have.\n   * @return the amount of blue from 0 for none to 255 for max\n   */\n  public int getBlue() {\n\n    /* get the value at the location from the picture as a 32 bit int\n     * with alpha, red, green, blue each taking 8 bits from left to right\n     */\n    int value = picture.getBasicPixel(x,y);\n\n    // get the blue value (starts at 0 so no shift required)\n    int blue = value &amp; 0xff;\n\n    return blue;\n  }\n\n  /**\n   * Method to get the blue value from a pixel represented as an int\n   * @param value the color value as an int\n   * @return the amount of blue\n   */\n  public static int getBlue(int value)\n  {\n    int blue = value &amp; 0xff;\n    return blue;\n  }\n\n  /**\n   * Method to get a color object that represents the color at this pixel.\n   * @return a color object that represents the pixel color\n   */\n  public Color getColor()\n  {\n     /* get the value at the location from the picture as a 32 bit int\n     * with alpha, red, green, blue each taking 8 bits from left to right\n     */\n    int value = picture.getBasicPixel(x,y);\n\n    // get the red value (starts at 17 so shift right 16)\n    // then AND it with all 1\'s for the first 8 bits to\n    // end up with a resulting value from 0 to 255\n    int red = (value &gt;&gt; 16) &amp; 0xff;\n\n    // get the green value (starts at 9 so shift right 8)\n    int green = (value &gt;&gt;  8) &amp; 0xff;\n\n    // get the blue value (starts at 0 so no shift required)\n    int blue = value &amp; 0xff;\n\n    return new Color(red,green,blue);\n  }\n\n  /**\n   * Method to set the pixel color to the passed in color object.\n   * @param newColor the new color to use\n   */\n  public void setColor(Color newColor)\n  {\n    // set the red, green, and blue values\n    int red = newColor.getRed();\n    int green = newColor.getGreen();\n    int blue = newColor.getBlue();\n\n    // update the associated picture\n    updatePicture(this.getAlpha(),red,green,blue);\n  }\n\n  /**\n   * Method to update the picture based on the passed color\n   * values for this pixel\n   * @param alpha the alpha (transparency) at this pixel\n   * @param red the red value for the color at this pixel\n   * @param green the green value for the color at this pixel\n   * @param blue the blue value for the color at this pixel\n   */\n  public void updatePicture(int alpha, int red, int green, int blue)\n  {\n    // create a 32 bit int with alpha, red, green blue from left to right\n    int value = (alpha &lt;&lt; 24) + (red &lt;&lt; 16) + (green &lt;&lt; 8) + blue;\n\n    // update the picture with the int value\n    picture.setBasicPixel(x,y,value);\n  }\n\n  /**\n   * Method to correct a color value to be within 0 to 255\n   * @param the value to use\n   * @return a value within 0 to 255\n   */\n  private static int correctValue(int value)\n  {\n    if (value &lt; 0)\n      value = 0;\n    if (value &gt; 255)\n      value = 255;\n    return value;\n  }\n\n  /**\n   * Method to set the red to a new red value\n   * @param value the new value to use\n   */\n  public void setRed(int value)\n  {\n    // set the red value to the corrected value\n    int red = correctValue(value);\n\n    // update the pixel value in the picture\n    updatePicture(getAlpha(), red, getGreen(), getBlue());\n  }\n\n  /**\n   * Method to set the green to a new green value\n   * @param value the value to use\n   */\n  public void setGreen(int value)\n  {\n    // set the green value to the corrected value\n    int green = correctValue(value);\n\n    // update the pixel value in the picture\n    updatePicture(getAlpha(), getRed(), green, getBlue());\n  }\n\n  /**\n   * Method to set the blue to a new blue value\n   * @param value the new value to use\n   */\n  public void setBlue(int value)\n  {\n    // set the blue value to the corrected value\n    int blue = correctValue(value);\n\n    // update the pixel value in the picture\n    updatePicture(getAlpha(), getRed(), getGreen(), blue);\n  }\n\n   /**\n   * Method to set the alpha (transparency) to a new alpha value\n   * @param value the new value to use\n   */\n  public void setAlpha(int value)\n  {\n    // make sure that the alpha is from 0 to 255\n    int alpha = correctValue(value);\n\n    // update the associated picture\n    updatePicture(alpha, getRed(), getGreen(), getBlue());\n  }\n\n  /**\n  * Method to get the distance between this pixel\'s color and the passed color\n  * @param testColor the color to compare to\n  * @return the distance between this pixel\'s color and the passed color\n  */\n public double colorDistance(Color testColor)\n {\n   double redDistance = this.getRed() - testColor.getRed();\n   double greenDistance = this.getGreen() - testColor.getGreen();\n   double blueDistance = this.getBlue() - testColor.getBlue();\n   double distance = Math.sqrt(redDistance * redDistance +\n                               greenDistance * greenDistance +\n                               blueDistance * blueDistance);\n   return distance;\n }\n\n /**\n  * Method to compute the color distances between two color objects\n  * @param color1 a color object\n  * @param color2 a color object\n  * @return the distance between the two colors\n  */\n public static double colorDistance(Color color1,Color color2)\n {\n   double redDistance = color1.getRed() - color2.getRed();\n   double greenDistance = color1.getGreen() - color2.getGreen();\n   double blueDistance = color1.getBlue() - color2.getBlue();\n   double distance = Math.sqrt(redDistance * redDistance +\n                               greenDistance * greenDistance +\n                               blueDistance * blueDistance);\n   return distance;\n }\n\n /**\n  * Method to get the average of the colors of this pixel\n  * @return the average of the red, green, and blue values\n  */\n public double getAverage()\n {\n   double average = (getRed() + getGreen() + getBlue()) / 3.0;\n   return average;\n }\n\n  /**\n   * Method to return a string with information about this pixel\n   * @return a string with information about this pixel\n   */\n  public String toString()\n  {\n    return &quot;Pixel row=&quot; + getRow() +\n      &quot; col=&quot; + getCol() +\n      &quot; red=&quot; + getRed() +\n      &quot; green=&quot; + getGreen() +\n      &quot; blue=&quot; + getBlue();\n  }\n\n}\n\nimport javax.imageio.ImageIO;\nimport java.awt.image.BufferedImage;\nimport javax.swing.ImageIcon;\nimport java.awt.*;\nimport java.io.*;\nimport java.awt.geom.*;\n\nimport java.io.ByteArrayOutputStream;\n//import javax.xml.bind.DatatypeConverter;\nimport java.util.Base64;\n\nimport java.util.Scanner;\n\n/**\n * A class that represents a simple picture.  A simple picture may have\n * an associated file name and a title.  A simple picture has pixels,\n * width, and height.  A simple picture uses a BufferedImage to\n * hold the pixels. You can also explore a simple picture.\n *\n * @author Barb Ericson ericson@cc.gatech.edu\n */\npublic class SimplePicture implements DigitalPicture\n{\n\n  /////////////////////// Fields /////////////////////////\n\n  /**\n   * the file name associated with the simple picture\n   */\n  private String fileName;\n\n  /**\n   * the path name for the file\n   */\n  private String pathName;\n\n  /**\n   * the title of the simple picture\n   */\n  private String title;\n\n  /**\n   * buffered image to hold pixels for the simple picture\n   */\n  private BufferedImage bufferedImage;\n\n  /**\n   * extension for this file (jpg or bmp)\n   */\n  private String extension;\n\n\n /////////////////////// Constructors /////////////////////////\n\n /**\n  * A Constructor that takes no arguments.  It creates a picture with\n  * a width of 200 and a height of 100 that is all white.\n  * A no-argument constructor must be given in order for a class to\n  * be able to be subclassed.  By default all subclasses will implicitly\n  * call this in their parent\'s no-argument constructor unless a\n  * different call to super() is explicitly made as the first line\n  * of code in a constructor.\n  */\n public SimplePicture()\n {this(200,100);}\n\n /**\n  * A Constructor that takes a file name and uses the file to create\n  * a picture\n  * @param fileName the file name to use in creating the picture\n  */\n public SimplePicture(String fileName)\n {\n\n   // load the picture into the buffered image\n   load(fileName);\n\n }\n\n /**\n  * A constructor that takes the width and height desired for a picture and\n  * creates a buffered image of that size.  This constructor doesn\'t\n  * show the picture.  The pixels will all be white.\n  * @param width the desired width\n  * @param height the desired height\n  */\n public  SimplePicture(int width, int height)\n {\n   bufferedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n   title = &quot;None&quot;;\n   fileName = &quot;None&quot;;\n   extension = &quot;jpg&quot;;\n   setAllPixelsToAColor(Color.white);\n }\n\n /**\n  * A constructor that takes the width and height desired for a picture and\n  * creates a buffered image of that size.  It also takes the\n  * color to use for the background of the picture.\n  * @param width the desired width\n  * @param height the desired height\n  * @param theColor the background color for the picture\n  */\n public  SimplePicture(int width, int height, Color theColor)\n {\n   this(width,height);\n   setAllPixelsToAColor(theColor);\n }\n\n /**\n  * A Constructor that takes a picture to copy information from\n  * @param copyPicture the picture to copy from\n  */\n public SimplePicture(SimplePicture copyPicture)\n {\n   if (copyPicture.fileName != null)\n   {\n      this.fileName = new String(copyPicture.fileName);\n      this.extension = copyPicture.extension;\n   }\n   if (copyPicture.title != null)\n      this.title = new String(copyPicture.title);\n   if (copyPicture.bufferedImage != null)\n   {\n     this.bufferedImage = new BufferedImage(copyPicture.getWidth(),  copyPicture.getHeight(), BufferedImage.TYPE_INT_RGB);\n     this.copyPicture(copyPicture);\n   }\n }\n\n /**\n  * A constructor that takes a buffered image\n  * @param image the buffered image\n  */\n public SimplePicture(BufferedImage image)\n {\n   this.bufferedImage = image;\n   title = &quot;None&quot;;\n   fileName = &quot;None&quot;;\n   extension = &quot;jpg&quot;;\n }\n\n ////////////////////////// Methods //////////////////////////////////\n\n /**\n  * Method to get the extension for this picture\n  * @return the extension (jpg, bmp, giff, etc)\n  */\n public String getExtension() { return extension; }\n\n /**\n  * Method that will copy all of the passed source picture into\n  * the current picture object\n  * @param sourcePicture  the picture object to copy\n  */\n public void copyPicture(SimplePicture sourcePicture)\n {\n   Pixel sourcePixel = null;\n   Pixel targetPixel = null;\n\n   // loop through the columns\n   for (int sourceX = 0, targetX = 0;\n        sourceX &lt; sourcePicture.getWidth() &amp;&amp;\n        targetX &lt; this.getWidth();\n        sourceX++, targetX++)\n   {\n     // loop through the rows\n     for (int sourceY = 0, targetY = 0;\n          sourceY &lt; sourcePicture.getHeight() &amp;&amp;\n          targetY &lt; this.getHeight();\n          sourceY++, targetY++)\n     {\n       sourcePixel = sourcePicture.getPixel(sourceX,sourceY);\n       targetPixel = this.getPixel(targetX,targetY);\n       targetPixel.setColor(sourcePixel.getColor());\n     }\n   }\n\n }\n\n /**\n  * Method to set the color in the picture to the passed color\n  * @param color the color to set to\n  */\n public void setAllPixelsToAColor(Color color)\n {\n   // loop through all x\n   for (int x = 0; x &lt; this.getWidth(); x++)\n   {\n     // loop through all y\n     for (int y = 0; y &lt; this.getHeight(); y++)\n     {\n       getPixel(x,y).setColor(color);\n     }\n   }\n }\n\n /**\n  * Method to get the buffered image\n  * @return the buffered image\n  */\n public BufferedImage getBufferedImage()\n {\n    return bufferedImage;\n }\n\n /**\n  * Method to get a graphics object for this picture to use to draw on\n  * @return a graphics object to use for drawing\n  */\n public Graphics getGraphics()\n {\n   return bufferedImage.getGraphics();\n }\n\n /**\n  * Method to get a Graphics2D object for this picture which can\n  * be used to do 2D drawing on the picture\n  */\n public Graphics2D createGraphics()\n {\n   return bufferedImage.createGraphics();\n }\n\n /**\n  * Method to get the file name associated with the picture\n  * @return  the file name associated with the picture\n  */\n public String getFileName() { return fileName; }\n\n /**\n  * Method to set the file name\n  * @param name the full pathname of the file\n  */\n public void setFileName(String name)\n {\n   fileName = name;\n }\n\n /**\n  * Method to get the title of the picture\n  * @return the title of the picture\n  */\n public String getTitle()\n { return title; }\n\n /**\n  * Method to set the title for the picture\n  * @param title the title to use for the picture\n  */\n public void setTitle(String title)\n {\n   this.title = title;\n }\n\n /**\n  * Method to get the width of the picture in pixels\n  * @return the width of the picture in pixels\n  */\n public int getWidth() { return bufferedImage.getWidth(); }\n\n /**\n  * Method to get the height of the picture in pixels\n  * @return  the height of the picture in pixels\n  */\n public int getHeight() { return bufferedImage.getHeight(); }\n\n /**\n  * Method to get an image from the picture\n  * @return  the buffered image since it is an image\n  */\n public Image getImage()\n {\n   return bufferedImage;\n }\n\n /**\n  * Method to return the pixel value as an int for the given x and y location\n  * @param x the x coordinate of the pixel\n  * @param y the y coordinate of the pixel\n  * @return the pixel value as an integer (alpha, red, green, blue)\n  */\n public int getBasicPixel(int x, int y)\n {\n    return bufferedImage.getRGB(x,y);\n }\n\n /**\n  * Method to set the value of a pixel in the picture from an int\n  * @param x the x coordinate of the pixel\n  * @param y the y coordinate of the pixel\n  * @param rgb the new rgb value of the pixel (alpha, red, green, blue)\n  */\n public void setBasicPixel(int x, int y, int rgb)\n {\n   bufferedImage.setRGB(x,y,rgb);\n }\n\n /**\n  * Method to get a pixel object for the given x and y location\n  * @param x  the x location of the pixel in the picture\n  * @param y  the y location of the pixel in the picture\n  * @return a Pixel object for this location\n  */\n public Pixel getPixel(int x, int y)\n {\n   // create the pixel object for this picture and the given x and y location\n   Pixel pixel = new Pixel(this,x,y);\n   return pixel;\n }\n\n /**\n  * Method to get a one-dimensional array of Pixels for this simple picture\n  * @return a one-dimensional array of Pixel objects starting with y=0\n  * to y=height-1 and x=0 to x=width-1.\n  */\n public Pixel[] getPixels()\n {\n   int width = getWidth();\n   int height = getHeight();\n   Pixel[] pixelArray = new Pixel[width * height];\n\n   // loop through height rows from top to bottom\n   for (int row = 0; row &lt; height; row++)\n     for (int col = 0; col &lt; width; col++)\n       pixelArray[row * width + col] = new Pixel(this,col,row);\n\n   return pixelArray;\n }\n\n /**\n  * Method to get a two-dimensional array of Pixels for this simple picture\n  * @return a two-dimensional array of Pixel objects in row-major order.\n  */\n public Pixel[][] getPixels2D()\n {\n   int width = getWidth();\n   int height = getHeight();\n   Pixel[][] pixelArray = new Pixel[height][width];\n\n   // loop through height rows from top to bottom\n   for (int row = 0; row &lt; height; row++)\n     for (int col = 0; col &lt; width; col++)\n       pixelArray[row][col] = new Pixel(this,col,row);\n\n   return pixelArray;\n }\n\n /**\n  * Method to load the buffered image with the passed image\n  * @param image  the image to use\n  */\n public void load(Image image)\n {\n   // get a graphics context to use to draw on the buffered image\n   Graphics2D graphics2d = bufferedImage.createGraphics();\n\n   // draw the image on the buffered image starting at 0,0\n   graphics2d.drawImage(image,0,0,null);\n\n   // show the new image\n   show();\n }\n\n /**\n  * Method to show the picture in a picture frame\n  */\n public void show()\n {\n     try {\n         ByteArrayOutputStream output = new ByteArrayOutputStream();\n         ImageIO.write(this.bufferedImage, &quot;png&quot;, output);\n         String result = Base64.getEncoder().encodeToString(output.toByteArray());\n         //BH: using Base64 instead of DatatypeConverter.printBase64Binary(output.toByteArray());\n         System.out.println(&quot;&amp;lt;img src=\\\'data:image/&quot; + this.extension + &quot;;base64,&quot; + result + &quot;\\\'/&gt;&quot;);\n     } catch (IOException e) {\n         System.out.println(&quot;Errors occured in image conversion&quot;);\n     }\n }\n\n /**\n  * Method to open a picture explorer on a copy (in memory) of this\n  * simple picture\n  */\n /*\n public void explore()\n {\n   // create a copy of the current picture and explore it\n   new PictureExplorer(new SimplePicture(this));\n }\n */\n\n /**\n  * Method to load the picture from the passed file name\n  * @param fileName the file name to use to load the picture from\n  * @throws IOException if the picture isn\'t found\n  */\n public void loadOrFail(String fileName) throws IOException\n {\n    // set the current picture\'s file name\n   this.fileName = fileName;\n\n   // set the extension\n   int posDot = fileName.lastIndexOf(\'.\');\n   if (posDot &gt;= 0)\n     this.extension = fileName.substring(posDot + 1);\n\n    // get file location\n    String[] paths = fileName.split(&quot;/&quot;);\n    this.pathName = &quot;&quot;;\n    if(paths.length != 1) {\n        for(int i = 0; i &lt; paths.length - 1; i++) {\n            this.pathName = this.pathName + paths[i] + &quot;/&quot;;\n        }\n    }\n   // if the current title is null use the file name\n   if (title == null)\n     title = fileName;\n\n   File file = new File(this.fileName);\n\n\n   if (!file.canRead())\n   {\n     throw new IOException(this.fileName +\n                         &quot; could not be opened. Check that you specified the path&quot;);\n   }\n   this.bufferedImage = ImageIO.read(file);\n\n\n }\n\n /**\n  * Method to read the contents of the picture from a filename\n  * without throwing errors\n  * @param fileName the name of the file to write the picture to\n  * @return true if success else false\n  */\n public boolean load(String fileName)\n {\n     try {\n         this.loadOrFail(fileName);\n         return true;\n\n     } catch (Exception ex) {\n         System.out.println(&quot;There was an error trying to open &quot; + fileName);\n         bufferedImage = new BufferedImage(600,200,\n                                           BufferedImage.TYPE_INT_RGB);\n         addMessage(&quot;Couldn\'t load &quot; + fileName,5,100);\n         return false;\n     }\n\n }\n\n /**\n  * Method to load the picture from the passed file name\n  * this just calls load(fileName) and is for name compatibility\n  * @param fileName the file name to use to load the picture from\n  * @return true if success else false\n  */\n public boolean loadImage(String fileName)\n {\n     return load(fileName);\n }\n\n /**\n  * Method to draw a message as a string on the buffered image\n  * @param message the message to draw on the buffered image\n  * @param xPos  the x coordinate of the leftmost point of the string\n  * @param yPos  the y coordinate of the bottom of the string\n  */\n public void addMessage(String message, int xPos, int yPos)\n {\n   // get a graphics context to use to draw on the buffered image\n   Graphics2D graphics2d = bufferedImage.createGraphics();\n\n   // set the color to white\n   graphics2d.setPaint(Color.white);\n\n   // set the font to Helvetica bold style and size 16\n   graphics2d.setFont(new Font(&quot;Helvetica&quot;,Font.BOLD,16));\n\n   // draw the message\n   graphics2d.drawString(message,xPos,yPos);\n\n }\n\n /**\n  * Method to draw a string at the given location on the picture\n  * @param text the text to draw\n  * @param xPos the left x for the text\n  * @param yPos the top y for the text\n  */\n public void drawString(String text, int xPos, int yPos)\n {\n   addMessage(text,xPos,yPos);\n }\n\n /**\n   * Method to create a new picture by scaling the current\n   * picture by the given x and y factors\n   * @param xFactor the amount to scale in x\n   * @param yFactor the amount to scale in y\n   * @return the resulting picture\n   */\n  public Picture scale(double xFactor, double yFactor)\n  {\n    // set up the scale transform\n    AffineTransform scaleTransform = new AffineTransform();\n    scaleTransform.scale(xFactor,yFactor);\n\n    // create a new picture object that is the right size\n    Picture result = new Picture((int) (getHeight() * yFactor),\n                                 (int) (getWidth() * xFactor));\n\n    // get the graphics 2d object to draw on the result\n    Graphics graphics = result.getGraphics();\n    Graphics2D g2 = (Graphics2D) graphics;\n\n    // draw the current image onto the result image scaled\n    g2.drawImage(this.getImage(),scaleTransform,null);\n\n    return result;\n  }\n\n  /**\n   * Method to create a new picture of the passed width.\n   * The aspect ratio of the width and height will stay\n   * the same.\n   * @param width the desired width\n   * @return the resulting picture\n   */\n  public Picture getPictureWithWidth(int width)\n  {\n    // set up the scale transform\n    double xFactor = (double) width / this.getWidth();\n    Picture result = scale(xFactor,xFactor);\n    return result;\n  }\n\n  /**\n   * Method to create a new picture of the passed height.\n   * The aspect ratio of the width and height will stay\n   * the same.\n   * @param height the desired height\n   * @return the resulting picture\n   */\n  public Picture getPictureWithHeight(int height)\n  {\n    // set up the scale transform\n    double yFactor = (double) height / this.getHeight();\n    Picture result = scale(yFactor,yFactor);\n    return result;\n  }\n\n /**\n  * Method to load a picture from a file name and show it in a picture frame\n  * @param fileName the file name to load the picture from\n  * @return true if success else false\n  */\n public boolean loadPictureAndShowIt(String fileName)\n {\n   boolean result = true;  // the default is that it worked\n\n   // try to load the picture into the buffered image from the file name\n   result = load(fileName);\n\n   // show the picture in a picture frame\n   show();\n\n   return result;\n }\n\n /**\n  * Method to write the contents of the picture to a file with\n  * the passed name\n  * @param fileName the name of the file to write the picture to\n  */\n public void writeOrFail(String fileName) throws IOException\n {\n   String extension = this.extension; // the default is current\n\n   // create the file object\n   File file = new File(this.pathName + fileName);\n   //File fileLoc = file.getParentFile(); // directory name\n\n   // if there is no parent directory use the current media dir\n   //if (fileLoc == null)\n   //{\n     //fileName = FileChooser.getMediaPath(fileName);\n     //file = new File(fileName);\n     //fileLoc = file.getParentFile();\n   //}\n\n   // check that you can write to the directory\n   //if (!fileLoc.canWrite()) {\n    //    throw new IOException(fileName +\n    //    &quot; could not be opened. Check to see if you can write to the directory.&quot;);\n   //}\n\n   // get the extension\n   int posDot = fileName.indexOf(\'.\');\n   if (posDot &gt;= 0)\n       extension = fileName.substring(posDot + 1);\n\n   // write the contents of the buffered image to the file\n   ImageIO.write(bufferedImage, extension, file);\n\n }\n\n /**\n  * Method to write the contents of the picture to a file with\n  * the passed name without throwing errors\n  * @param fileName the name of the file to write the picture to\n  * @return true if success else false\n  */\n public boolean write(String fileName)\n {\n     try {\n         this.writeOrFail(fileName);\n         return true;\n     } catch (Exception ex) {\n         System.out.println(&quot;There was an error trying to write &quot; + fileName);\n         ex.printStackTrace();\n         return false;\n     }\n\n }\n\n  /**\n   * Method to get the coordinates of the enclosing rectangle after this\n   * transformation is applied to the current picture\n   * @return the enclosing rectangle\n   */\n  public Rectangle2D getTransformEnclosingRect(AffineTransform trans)\n  {\n    int width = getWidth();\n    int height = getHeight();\n    double maxX = width - 1;\n    double maxY = height - 1;\n    double minX, minY;\n    Point2D.Double p1 = new Point2D.Double(0,0);\n    Point2D.Double p2 = new Point2D.Double(maxX,0);\n    Point2D.Double p3 = new Point2D.Double(maxX,maxY);\n    Point2D.Double p4 = new Point2D.Double(0,maxY);\n    Point2D.Double result = new Point2D.Double(0,0);\n    Rectangle2D.Double rect = null;\n\n    // get the new points and min x and y and max x and y\n    trans.deltaTransform(p1,result);\n    minX = result.getX();\n    maxX = result.getX();\n    minY = result.getY();\n    maxY = result.getY();\n    trans.deltaTransform(p2,result);\n    minX = Math.min(minX,result.getX());\n    maxX = Math.max(maxX,result.getX());\n    minY = Math.min(minY,result.getY());\n    maxY = Math.max(maxY,result.getY());\n    trans.deltaTransform(p3,result);\n    minX = Math.min(minX,result.getX());\n    maxX = Math.max(maxX,result.getX());\n    minY = Math.min(minY,result.getY());\n    maxY = Math.max(maxY,result.getY());\n    trans.deltaTransform(p4,result);\n    minX = Math.min(minX,result.getX());\n    maxX = Math.max(maxX,result.getX());\n    minY = Math.min(minY,result.getY());\n    maxY = Math.max(maxY,result.getY());\n\n    // create the bounding rectangle to return\n    rect = new Rectangle2D.Double(minX,minY,maxX - minX + 1, maxY - minY + 1);\n    return rect;\n  }\n\n  /**\n   * Method to get the coordinates of the enclosing rectangle after this\n   * transformation is applied to the current picture\n   * @return the enclosing rectangle\n   */\n  public Rectangle2D getTranslationEnclosingRect(AffineTransform trans)\n  {\n    return getTransformEnclosingRect(trans);\n  }\n\n /**\n  * Method to return a string with information about this picture\n  * @return a string with information about the picture\n  */\n public String toString()\n {\n   String output = &quot;Simple Picture, filename &quot; + fileName +\n     &quot; height &quot; + getHeight() + &quot; width &quot; + getWidth();\n   return output;\n }\n\n} // end of SimplePicture class\n', 'hidden': 'data-hidden', 'edit': 'false', 'question_label': '8.8.1.10'}" source="/home/hat/Development/school/runestone-csawesome/csawesome2ptx/_sources/Unit08-2DArray/pictureLabDay3.rst">
        </DataFileNode>
  <exercises>
    <exercise label="challenge-8-8-picture">
    <statement>
        <p>Look at the zeroBlue() method. Try changing the bounds of its loops and look at the results of the code. What does this tell you about the indexing of an image?</p>

    </statement>
    <program xml:id="challenge-8-8-picture_editor" interactive="activecode" language="java">

        <input>
import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;
import java.util.List;

/**
 * A class that represents a picture.  This class inherits from
 * SimplePicture and allows the student to add functionality to
 * the Picture class.
 *
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture
{
  ///////////////////// constructors //////////////////////////////////

  /**
   * Constructor that takes no arguments
   */
  public Picture ()
  {
    /* not needed but use it to show students the implicit call to super()
     * child constructors always call a parent constructor
     */
    super();
  }

  /**
   * Constructor that takes a file name and creates the picture
   * @param fileName the name of the file to create the picture from
   */
  public Picture(String fileName)
  {
    // let the parent class handle this fileName
    super(fileName);
  }

  /**
   * Constructor that takes the height and width
   * @param height the height of the desired picture
   * @param width the width of the desired picture
   */
  public Picture(int height, int width)
  {
    // let the parent class handle this width and height
    super(width,height);
  }

  /**
   * Constructor that takes a picture and creates a
   * copy of that picture
   * @param copyPicture the picture to copy
   */
  public Picture(Picture copyPicture)
  {
    // let the parent class do the copy
    super(copyPicture);
  }

  /**
   * Constructor that takes a buffered image
   * @param image the buffered image to use
   */
  public Picture(BufferedImage image)
  {
    super(image);
  }
  ////////////////////// methods ///////////////////////////////////////

  /**
   * Method to return a string with information about this picture.
   * @return a string with information about the picture such as fileName,
   * height and width.
   */
  public String toString()
  {
    String output = "Picture, filename " + getFileName() +
      " height " + getHeight()
      + " width " + getWidth();
    return output;

  }

  /**
    zeroBlue() method sets the blue values at all pixels to zero
 */
  public void zeroBlue()
  {
    Pixel[][] pixels = this.getPixels2D();

    for (int i = 20; i &lt; pixels.length; i++) {
      for (int j = 20; j &lt; pixels[0].length; j++) {
          pixels[i][j].setBlue(0);
      }
    }
  }


 /* Add new methods here if needed.
 */

  /* Main method for exploring
   */
  public static void main(String[] args)
  {
    Picture lion = new Picture("metalLion.jpg");
    lion.show();
    lion.zeroBlue();
    lion.show();

  }
}
        </input>
<tests>


</tests>

    </program>
</exercise>
    <exercise label="picture-day3-0a">
        <statement>

        <p>9-11-3: What is the row index for the top left corner of the picture?</p>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>0</p>
                </statement>
                <feedback>
                    <p>Correct</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>180</p>
                </statement>
                <feedback>
                    <p>Try running some more tests.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>240</p>
                </statement>
                <feedback>
                    <p>Try running some more tests.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>90</p>
                </statement>
                <feedback>
                    <p>Try running some more tests.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="picture-day3-1a">
        <statement>

        <p>9-11-4: What is the column index for the top left corner of the picture?</p>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>0</p>
                </statement>
                <feedback>
                    <p>Correct</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>180</p>
                </statement>
                <feedback>
                    <p>Try running some more tests.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>240</p>
                </statement>
                <feedback>
                    <p>Try running some more tests.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>90</p>
                </statement>
                <feedback>
                    <p>Try running some more tests.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="picture-day3-2a">
        <statement>

        <p>9-11-5: What is the right most column index?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>60</p>
                </statement>
                <feedback>
                    <p>Try running some more tests.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>180</p>
                </statement>
                <feedback>
                    <p>Correct</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>320</p>
                </statement>
                <feedback>
                    <p>Try running some more tests.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>90</p>
                </statement>
                <feedback>
                    <p>Try running some more tests.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="picture-day3-3a">
        <statement>

        <p>9-11-6: What is the bottom most row index?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>180</p>
                </statement>
                <feedback>
                    <p>Try running some more tests.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>0</p>
                </statement>
                <feedback>
                    <p>Try running some more tests.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>90</p>
                </statement>
                <feedback>
                    <p>Try running some more tests.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>240</p>
                </statement>
                <feedback>
                    <p>Correct</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="picture-day3-4a">
        <statement>

        <p>9-11-7: Does the row index increase from left to right or top to bottom?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>The row increases starting at the left and ending at the right.</p>
                </statement>
                <feedback>
                    <p>Try running some more tests.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>The row increases starting at the right and ending at the left.</p>
                </statement>
                <feedback>
                    <p>Try running some more tests.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>The row increases starting at the top and ending at the bottom.</p>
                </statement>
                <feedback>
                    <p>Correct.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>The row increases starting at the bottom and ending at the top.</p>
                </statement>
                <feedback>
                    <p>Try running some more tests.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="picture-day3-5a">
        <statement>

        <p>9-11-8: Does the column index increase from left to right or top to bottom?</p>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>The column increases starting at the left and ending at the right.</p>
                </statement>
                <feedback>
                    <p>Correct</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>The column increases starting at the right and ending at the left.</p>
                </statement>
                <feedback>
                    <p>Try running some more tests.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>The column increases starting at the top and ending at the bottom.</p>
                </statement>
                <feedback>
                    <p>Try running some more tests.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>The column increases starting at the bottom and ending at the top.</p>
                </statement>
                <feedback>
                    <p>Try running some more tests.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="picture-day3-6a">
        <statement>

        <p>9-11-9: What is pixelation?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>This is when data is lost in the resizing of an image.</p>
                </statement>
                <feedback>
                    <p>try again.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>The intentional decreasing of resolution by merging adjacent pixels.</p>
                </statement>
                <feedback>
                    <p>try again.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>When an image is magnified to the point where the pixels look like small squares.</p>
                </statement>
                <feedback>
                    <p>Correct</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>The modification of individual pixels similar to what was practiced in 8.2.6</p>
                </statement>
                <feedback>
                    <p>try again.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
  </exercises>
</section>
