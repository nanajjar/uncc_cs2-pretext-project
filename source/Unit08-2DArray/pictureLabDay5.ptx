<?xml version="1.0"?>
<!-- Generated by Docutils 0.19 -->
<section>
  <introduction>
    <title>Picture Lab Day 5: Modifying a Picture (not complete)</title>
    <p>You will write methods in the <c>Picture</c> class that modify digital pictures.
            The <c>Picture</c> class inherits from the <c>SimplePicture</c> class and the <c>SimplePicture</c> class implements the <c>DigitalPicture</c> interface as shown in the Unified Modeling Language (UML) class diagram in the figure .</p>
    <figure align="center" xml:id="id1-1736736972">
    <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 1: A UML Class diagram</caption>
    <image source="Unit08-2DArray/Figures/UML.png" width="NaN%"/>
  </figure>
    <p>A UML class diagram shows classes and the relationships between the classes. Each class is shown in a box with the class name at the top.
            The middle area shows attributes (instance or class variables) and the bottom area shows methods. The open triangle points to the class that the connected class inherits from.
            The straight line links show associations between classes. Association is also called a “has-a” relationship. The numbers at the end of the association links give the number of objects associated with an object at the other end.</p>
    <p>For example, in Figure 5 it shows that one <c>Pixel</c> object has one <c>Color</c> object associated with it and that a <c>Color</c> object can have zero to many <c>Pixel</c> objects associated with it.
            You may notice that the UML class diagram doesn’t look exactly like Java code. UML isn’t language specific.</p>
  </introduction>
  <subsection xml:id="_exercises">
            <title>Exercises</title>

    <exercise label="picture-day5-1b">
        <statement>

            <p>9-11-8: Given an array A = { 2  4  6 }, {1  3  5} how would A be stored in a 1D array in column-major order?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>[1, 2, 3, 4, 5, 6]</p>
                </statement>
                <feedback>
                    <p>This answer has stored the columns, but they need to be stored from the lowest index to the highest.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>[2, 1, 4, 3, 6, 5]</p>
                </statement>
                <feedback>
                    <p>Correct</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>[2, 4, 6, 1, 3, 5]</p>
                </statement>
                <feedback>
                    <p>We need to store this array in column-major order. The columns of the array are aligned vertically.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>[1, 3, 5, 2, 4, 6]</p>
                </statement>
                <feedback>
                    <p>We need to store this array in column-major order. The columns of the array are aligned vertically.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
        </subsection>
  <exercises>
    <exercise label="picture-day5-0a">
        <statement>

        <p>9-11-1: Open <c>Picture.java</c> and look for the method <c>getPixels2D</c>. Is it there?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>Yes</p>
                </statement>
                <feedback>
                    <p>This about where ``getPixels2D`` originally comes from. Is this linked to ``Picture.java``?</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>No</p>
                </statement>
                <feedback>
                    <p>Correct, this class inherits from ``SimplePicture``</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="picture-day5-1">
        <statement>

        <p>9-11-2: Open <c>SimplePicture.java</c> and look for the method <c>getPixels2D</c>. Is it there?</p>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>Yes</p>
                </statement>
                <feedback>
                    <p>Yes, ``SimplePicture`` implements the interface ``DigitalPicture`` and provides the method bodies for all the methods defined in ``DigitalPicture``.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>No</p>
                </statement>
                <feedback>
                    <p>This about where ``getPixels2D`` originally comes from. How is this linked to ``SimplePicture.java``?</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="picture-day5-1a">
        <statement>

        <dl>
            <li>
                <title>9-11-3: Does the following code compile?</title>
                
                    <p>DigitalPicture p = new DigitalPicture();</p>
                
            </li>
        </dl>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>yes, because ``DigitalPicture`` is a class; an object of this type can be created.</p>
                </statement>
                <feedback>
                    <p>Classes can be created</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>yes, because ``DigitalPicture`` is an interface; an object of this type can be created.</p>
                </statement>
                <feedback>
                    <p>Interfaces cannot be created</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>no, because ``DigitalPicture`` is an interface; an object of this type cannot be created.</p>
                </statement>
                <feedback>
                    <p>Correct!</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>no, because ``DigitalPicture`` is a class; an object of this type cannot be created.</p>
                </statement>
                <feedback>
                    <p>Classes can be created</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="picture-day5-2a">
        <statement>

        <dl>
            <li>
                <title>9-11-4: Assuming that a no-argument constructor exists for SimplePicture, would the following code compile?</title>
                
                    <p>DigitalPicture p = new SimplePicture();</p>
                
            </li>
        </dl>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>yes, because ``SimplePicture`` has an "is a" relationship with ``DigitalPicture``</p>
                </statement>
                <feedback>
                    <p>!TODO</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>yes, because the compiler implicitly casts ``SimplePicture`` at compile time.</p>
                </statement>
                <feedback>
                    <p>!TODO</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>no, because the two data types do not match.</p>
                </statement>
                <feedback>
                    <p>!TODO</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>no, because the base datatype is an interface, which cannot be created.</p>
                </statement>
                <feedback>
                    <p>!TODO</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="picture-day5-3a">
        <statement>

        <dl>
            <li>
                <title>9-11-5: Assuming that a no-argument constructor exists for Picture, compile?</title>
                
                    <p>DigitalPicture p = new Picture();</p>
                
            </li>
        </dl>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>yes, bcs</p>
                </statement>
                <feedback>
                    <p>!TODO</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>yes, bcs</p>
                </statement>
                <feedback>
                    <p>!TODO</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>no, bcs</p>
                </statement>
                <feedback>
                    <p>!TODO</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>no, bcs</p>
                </statement>
                <feedback>
                    <p>!TODO</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="picture-day5-4a">
        <statement>

        <dl>
            <li>
                <title>9-11-6: Assuming that a no-argument constructor exists for Picture, does the following code compile?</title>
                
                    <p>SimplePicture p = new Picture();</p>
                
            </li>
        </dl>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>yes, bcs</p>
                </statement>
                <feedback>
                    <p>!TODO</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>yes, bcs</p>
                </statement>
                <feedback>
                    <p>!TODO</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>no, bcs</p>
                </statement>
                <feedback>
                    <p>!TODO</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>no, bcs</p>
                </statement>
                <feedback>
                    <p>!TODO</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="picture-day5-5a">
        <statement>

        <dl>
            <li>
                <title>9-11-7: Assuming that a no-argument constructor exists for SimplePicture, does the following code compile?</title>
                
                    <p>Picture p = new SimplePicture();</p>
                
            </li>
        </dl>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>yes, bcs</p>
                </statement>
                <feedback>
                    <p>!TODO</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>yes, bcs</p>
                </statement>
                <feedback>
                    <p>!TODO</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>no, bcs</p>
                </statement>
                <feedback>
                    <p>!TODO</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>no, bcs</p>
                </statement>
                <feedback>
                    <p>!TODO</p>
                </feedback>
            </choice>
</choices>

    </exercise>
  </exercises>
</section>
