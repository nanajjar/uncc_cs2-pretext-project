<?xml version="1.0"?>
<!-- Generated by Docutils 0.19 -->
<section>
  <title>Enhanced For-Each Loop for 2D Arrays (Day 2)</title>
  <introduction>
    <p xml:id="_index-0-1736736814">Since 2D arrays are really arrays of arrays you can also use a nested enhanced for-each loop to loop through all elements in an array.  We loop through each of the inner arrays and loop through all the values in each inner array. Notice the type of the outer loop array variable – it is an array that will hold each row!</p>
    <p>In this case the <c>for (int[] colArray : a)</c> means to loop through each element of the outer array which will set colArray to the current column array.  Then you can loop through the value in the column array.</p>
  </introduction>
  <subsection xml:id="_d-array-algorithms">
            <title>2D Array Algorithms</title>
            <p>All of the array algorithms can be applied to 2D arrays too. For example, counting and searching algorithms work very similarly. The following code adds all of the values in a given row.</p>
            <p><image source="../_static/codingExercise.png" width="NaN%" alt="coding exercise"/> <term>Coding Exercise</term></p>

<exercise label="lca2dloopPart">
    <statement>
            <p>What will the following code print out? Can you complete the  method called <c>getTotalForCol</c> that gets the total for a column? To do this, you must loop through the rows. The array’s length will tell you how many rows you have since it is an array of arrays, while the length of the array’s first element will tell you how many columns.</p>

    </statement>
    <program xml:id="lca2dloopPart_editor" interactive="activecode" language="java">

        <input>
public class Total
{

   public static int getTotalForRow(int row, int[][] a)
   {
      int total = 0;
      for (int col = 0; col &lt; a[0].length; col++)
      {
         total = total + a[row][col];
      }
      return total;
   }

   // Complete the method getTotalForCol below
   public static int getTotalForCol(int col, int[][] a)
   {
       int total = 0;
       // Add a loop here to total a column col


       return total;
   }

   public static void main(String[] args)
   {
      int[][] matrix = {  {1,2,3},{4,5,6}};
      System.out.println(getTotalForRow(0,matrix));
      System.out.println(getTotalForCol(0,matrix));
   }
}
        </input>
<tests>
import static org.junit.Assert.*;
 import org.junit.*;;
 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
      public RunestoneTests() {
         super("Total");
     }
     @Test
     public void testMain() throws IOException
     {
         String output = getMethodOutput("main");
         String expect = "6\n5";
         boolean passed = getResults(expect, output, "Expected output from main");
         assertTrue(passed);
     }
     @Test
         public void test2()
         {
             int[][] array = { {1,4,8},{6,7,9} };
             int value = 0;
             Object[] args = {value, array};


             String output = getMethodOutput("getTotalForCol", args);
             String expect = "7";

             boolean passed = getResults(expect, output, "Testing getTotalForCol(0, { {1, 4,8},{6, 7, 9} })");
             assertTrue(passed);
         }
 }
</tests>

    </program>
</exercise>
            
            
            <p xml:id="_index-1-1736736822">You can loop through just part of a 2D array. You can change the starting value and ending value to loop through a subset of a 2D array.</p>

<exercise label="lca2dloopPart2">
    <statement>
            <p>Looping through just part of a 2D array.</p>

    </statement>
    <program xml:id="lca2dloopPart2_editor" interactive="activecode" language="java">

        <input>
public class Count
{
   public static int countValues(int value, int[][] a,
                              int rowStart, int rowEnd,
                              int colStart, int colEnd)
   {
      int count = 0;
      for (int row = rowStart; row &lt;= rowEnd; row++)
      {
         for (int col = colStart; col &lt;= colEnd; col++)
         {
            if (a[row][col] == value)
               count++;
         }
      }
      return count;
   }

   public static void main(String[] args)
   {
      int[][] matrix = {  {3,2,3},{4,3,6},{8,9,3},{10,3,3}};
      System.out.println(countValues(3,matrix,0,2,0,2));
   }
}
        </input>
<tests>
import static org.junit.Assert.*;
 import org.junit.*;;
 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
     @Test
     public void testMain() throws IOException
     {
         String output = getMethodOutput("main");
         String expect = "4";
         boolean passed = getResults(expect, output, "Expected output from main", true);
         assertTrue(passed);
     }
 }
</tests>

    </program>
</exercise>
            <p>Here is a linear search algorithm where we access each row and then apply a linear search on it to find an element.</p>
            <p><image source="../_static/codingExercise.png" width="NaN%" alt="coding exercise"/> <term>Coding Exercise</term></p>

<exercise label="linearSearch2DArrays">
    <statement>
            <p>What will the following code print? Can you change the code to work for a String 2D array instead of an int array? Note that the indices row and col will still be ints.</p>

    </statement>
    <program xml:id="linearSearch2DArrays_editor" interactive="activecode" language="java">

        <input>
public class Search
{
   public static boolean search(int[][] array, int value)
   {
      boolean found = false;
      for (int row = 0; row &lt; array.length; row++)
      {
         for (int col = 0; col &lt; array[0].length; col++)
         {
            if (array[row][col] == value)
                found = true;
         }
      }
      return found;
   }

   public static void main(String[] args)
   {
      int[][] matrix = { {3,2,3},{4,3,6},{8,9,3},{10,3,3} };
      System.out.println(search(matrix,10));
      System.out.println(search(matrix,11));

     // Comment out the code above, and try these:
     // String[][] matrix2 = { {"a","b","c"},{"d","e","f"} };
     // System.out.println(search(matrix2, "b"));

   }
}
        </input>
<tests>
import static org.junit.Assert.*;
 import org.junit.*;;
 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
     public RunestoneTests() {
         super("Search");
     }

     @Test
         public void test2()
         {
             String[][] array = { {"a","b","c"},{"d","e","f"},{"g","h","i"},{"j","k","l"} };
             String value = "b";
             Object[] args = {array, value};


             String output = getMethodOutput("search", args);
             String expect = "true";

             boolean passed = getResults(expect, output, "Testing search({ {\"a\",\"b\",\"c\"},{\"d\",\"e\",\"f\"},{\"g\",\"h\",\"i\"},{\"j\",\"k\",\"l\" } }, \"b\")");
             assertTrue(passed);
         }
 }
</tests>

    </program>
</exercise>
        </subsection>
  <subsection xml:id="_groupwork-programming-challenge-picture-lab">
            <title><image source="../_static/groupwork.png" width="NaN%" alt="groupwork"/> Programming Challenge : Picture Lab</title>
            
            
            
            
            
            
            <figure align="left" xml:id="index-4"><image source="../_static/arch.jpg" width="NaN%"/></figure>
            
            
            
            
            <p>Photographs and images are made up of a 2D array of <term>pixels</term> which are tiny picture elements that color in the image.  The color of a pixel is  represented using the RGB (Red, Green, Blue) color
                model, which stores values for red, green, and blue, each ranging from 0 to 255. You can make any color by mixing these values! Try the <raw format="html" xml:space="preserve"><a href= "https://www.rapidtables.com/web/color/RGB_Color.html" style="text-decoration:underline" target="_blank">RGB Color Mixer</a></raw> to experiment. Can you make black? Can you make white? Can you make purple?</p>
            <p>Scroll down to the bottom of the following code and take a look at the zeroBlue() method. Run the code and watch what it does. It uses nested loops to visit each pixel in a photo which has a color with red, green, and blue values, and it sets all the blue values to 0.</p>
            <p>Now, write a similar method called keepOnlyBlue() that visits every pixel and sets the red and green values to zero but does not change the blue ones. Then, write a method called switchColors() that swaps the red pixels with green pixels or blue pixels to change the colors around. You will need to use the getRed(), getGreen(), getBlue() to get the RGB values of the pixel and then swap them around by using the setRed, setGreen, setBlue methods and giving them different color values from the get methods as arguments.</p>
        <p>You can test the methods in the active code below or in this <raw format="html" xml:space="preserve"><a href= "https://repl.it/@BerylHoffman/Picture-Lab" style="text-decoration:underline" target="_blank"> Repl.it Swing project</a></raw> or this <raw format="html" xml:space="preserve"><a href= "https://repl.it/@jds7184/PictureLab" style="text-decoration:underline" target="_blank" >alternative Repl.it project</a></raw> by teacher Jason Stark from LA (click output.jpg to see the result) or your own IDE to see what it does.</p>
            <!-- ummmmm. i removed a 30KiB DataFileNode tag -->

<exercise label="challenge-8-2-picture">
    <statement>
            <p>Picture Lab: 1) write a method called keepOnlyBlue() that keeps only the blue values by setting the red and green values to zero. Uncomment the code in main to test it. 2) write a method called switchColors() that replaces red values (using p.setRed) with green or blue values (using p.getGreen(), etc.) to change the colors around. Uncomment the code in main to test it.</p>

    </statement>
    <program xml:id="challenge-8-2-picture_editor" interactive="activecode" language="java">

        <input>
import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;
import java.util.List;

/**
 * A class that represents a picture.  This class inherits from
 * SimplePicture and allows the student to add functionality to
 * the Picture class.
 *
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture
{
  ///////////////////// constructors //////////////////////////////////

  /**
   * Constructor that takes no arguments
   */
  public Picture ()
  {
    /* not needed but use it to show students the implicit call to super()
     * child constructors always call a parent constructor
     */
    super();
  }

  /**
   * Constructor that takes a file name and creates the picture
   * @param fileName the name of the file to create the picture from
   */
  public Picture(String fileName)
  {
    // let the parent class handle this fileName
    super(fileName);
  }

  /**
   * Constructor that takes the height and width
   * @param height the height of the desired picture
   * @param width the width of the desired picture
   */
  public Picture(int height, int width)
  {
    // let the parent class handle this width and height
    super(width,height);
  }

  /**
   * Constructor that takes a picture and creates a
   * copy of that picture
   * @param copyPicture the picture to copy
   */
  public Picture(Picture copyPicture)
  {
    // let the parent class do the copy
    super(copyPicture);
  }

  /**
   * Constructor that takes a buffered image
   * @param image the buffered image to use
   */
  public Picture(BufferedImage image)
  {
    super(image);
  }
  ////////////////////// methods ///////////////////////////////////////

  /**
   * Method to return a string with information about this picture.
   * @return a string with information about the picture such as fileName,
   * height and width.
   */
  public String toString()
  {
    String output = "Picture, filename " + getFileName() +
      " height " + getHeight()
      + " width " + getWidth();
    return output;

  }

  /**
    zeroBlue() method sets the blue values at all pixels to zero
 */
  public void zeroBlue()
  {
    Pixel[][] pixels = this.getPixels2D();

    for (Pixel[] rowArray : pixels)
     {
       for (Pixel p: rowArray)
       {
              p.setBlue(0);
       }
    }
  }


 /* Add new methods here.
    keepOnlyBlue() method sets the blue values at all pixels to zero.
    switchColors() method swaps the color values of pixels.
 */

  /* Main method for testing
   */
  public static void main(String[] args)
  {
    Picture arch = new Picture("arch.jpg");
    arch.show();
    arch.zeroBlue();
    arch.show();

    //Uncomment the follow code to test your keepOnlyBlue method.
    /*
    Picture arch2 = new Picture("arch.jpg");
    System.out.println("Keep only blue: ");
    arch2.keepOnlyBlue();// using new method
    arch2.show();
    */
    System.out.println();

    //Uncomment the follow code to test your swithColors method.
    /*
    Picture arch3 = new Picture("arch.jpg");
    System.out.println("Switch colors: ");
    arch3.switchColors();// using new method
    arch3.show();
    */
  }
}
        </input>
<tests>
import static org.junit.Assert.*;
 import org.junit.*;
 import java.io.*;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Arrays;

 public class RunestoneTests extends CodeTestHelper
 {
   @Test
   public void test1()
   {
     String target = "public void keepOnlyBlue()";
     boolean passed = checkCodeContains("keepOnlyBlue() method",target);
     assertTrue(passed);
   }

   @Test
   public void test2()
   {
     String target = ".setGreen(0);";
     boolean passed = checkCodeContains("keepOnlyBlue() setting green pixels to the number 0",target);
     assertTrue(passed);
   }

   @Test
     public void test3()
     {
        String target = "for";
        String code = getCode();
        int index = code.indexOf("public void keepOnlyBlue()");
        boolean passed = false;
        if (index &gt; 0) {
         code = code.substring(index, index + 200);
         int num = countOccurences(code, target);
         passed = num == 2;
        }
        getResults("true", ""+passed, "Checking that keepOnlyBlue() contains 2 for loops", passed);
        assertTrue(passed);
     }
     @Test
    public void testSwitch1()
    {
     String target = "public void switchColors()";
     boolean passed = checkCodeContains("switchColors() method",target);
     assertTrue(passed);
    }

    @Test
    public void testSwitch2()
    {
     String target = ".getGreen()";
     boolean passed = checkCodeContains("switchColors() uses getGreen()",target);
     assertTrue(passed);
    }
  }
</tests>

    </program>
</exercise>
        <p>Here are some more exercises from the <raw format="html" xml:space="preserve"><a href= "https://secure-media.collegeboard.org/digitalServices/pdf/ap/picture-lab-studentguide.pdf" style="text-decoration:underline" target="_blank"> Picture Lab</a></raw>:</p>
            <p><ul>
                <li>
                    <p>Write a negate method to negate all the pixels in a picture. To negate a picture, set the red value to 255 minus the current red value, the green value to 255 minus the current green value and the blue value to 255 minus the current blue value.</p>
                </li>
                <li>
                    <p>Write the grayscale method to turn the picture into shades of gray. Set the red, green, and blue values to the average of the current red, green, and blue values (add all three values and divide by 3).</p>
                </li>
            </ul></p>
        <p>You can continue on with the <raw format="html" xml:space="preserve"><a href= "https://secure-media.collegeboard.org/digitalServices/pdf/ap/picture-lab-studentguide.pdf" style="text-decoration:underline" target="_blank"> Picture Lab</a></raw> to mirror images and create collages and detect edges as the first step in recognizing objects in images.</p>
        </subsection>
  <subsection xml:id="_summary-1736736933">
            <title>Summary</title>
            <p><ul>
                <li>
                    <p>We can loop through 2D arrays using nested for loops or nested enhanced for each loops.</p>
                </li>
                <li>
                    <p>The outer loop for a 2D array usually traverses the rows, while the inner loop traverses the columns in a single row.</p>
                </li>
                <li>
                    <p>The 2D array’s length gives the number of rows. A row’s length array[0].length gives the number of columns.</p>
                </li>
                <li>
                    <p>Nested iteration statements can be written to traverse the 2D array in “row-major order” or “column-major order.”</p>
                </li>
                <li>
                    <p>In an enhanced for each loop, the variable of the outer loop must be the type of each row, which is a 1D array. The inner enhanced for loop variable must be the same type as the elements stored in the array.</p>
                </li>
                <li>
                    <p>All standard 1D array algorithms can be applied to 2D array objects.</p>
                </li>
                <li>
                    <p>When applying sequential/linear search algorithms to 2D arrays, each row must be accessed then sequential/linear search applied to each row of a 2D array.</p>
                </li>
            </ul></p>
            <!-- ummmmm. i removed a 30KiB DataFileNode tag -->
        </subsection>
  <subsection xml:id="_d-arrays-and-loops-game">
            <title>2D Arrays and Loops Game</title>
            
            <p>Try the game below to practice loops with 2D arrays. Click on <term>Arrays</term> and then check <term>2D</term> and check <term>Loops</term> and then click on the elements of the * array that would be printed out by the given code. If you’re stuck, check on Labels to see the indices. We encourage you to work in pairs and see how high a score you can get.</p>
            <raw format="html" xml:space="preserve"><iframe height="700px" width="100%" style="margin-left:10%;max-width:80%" src="https://csa-games.netlify.app/"></iframe></raw>
        </subsection>
  <exercises>
    <exercise label="getAvgForEach">
    <statement>
        <p>Nested enhanced for loops demo.</p>

    </statement>
    <program xml:id="getAvgForEach_editor" interactive="activecode" language="java">

        <input>
public class Average
{

   public static double getAvg(int[][] a)
   {
      double total = 0;
      for (int[] innerArray : a)
      {
         for (int val : innerArray)
         {
            total = total + val;
         }
      }
      return total / (a.length * a[0].length);
   }

   public static void main(String[] args)
   {
      int[][] theArray = {  {80, 90, 70}, {20, 80, 75}};
      System.out.println(getAvg(theArray));
   }
}
        </input>
<tests>
import static org.junit.Assert.*;
 import org.junit.*;;
 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
     @Test
     public void testMain() throws IOException
     {
         String output = getMethodOutput("main");
         String expect = "69.16666666666667";
         boolean passed = getResults(expect, output, "Expected output from main", true);
         assertTrue(passed);
     }
 }
</tests>

    </program>
</exercise>
  </exercises>
</section>
