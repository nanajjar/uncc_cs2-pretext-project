<?xml version="1.0"?>
<!-- Generated by Docutils 0.19 -->
<section xml:id="_traversing-arraylists-with-loops">
  <title>Traversing ArrayLists with Loops</title>
  <introduction>
    <p>While loops, for loops, and enhanced for each loops can all be used to traverse an ArrayList just like an array.</p>
  </introduction>
  <subsection xml:id="_enhanced-for-each-loop">
            <title>Enhanced For Each Loop</title>
            
            
            <p xml:id="_index-0-1736734298">You can use a enhanced for-each loop to traverse through all of the items in a list, just like you do with an array as shown in the main method below.</p>
            <p> <term>Practice</term></p>

<exercise label="listForEachLoop">
    <statement>
            <p>What does the following code do? Guess before you run it. Then, add another enhanced for each loop that computes the product of all the elements in myList by multiplying them. Print out the product after the new loop.</p>

    </statement>
    <program xml:id="listForEachLoop_editor" interactive="activecode" language="java">

        <input>
import java.util.*;  // import all classes in this package.
public class Test1
{
    public static void main(String[] args)
    {
        ArrayList&lt;Integer&gt; myList = new ArrayList&lt;Integer&gt;();
        myList.add(50);
        myList.add(30);
        myList.add(20);
        int total = 0;
        for (Integer value: myList)
        {
             total += value;
        }
        System.out.println("Sum of all elements: " + total);

        // Write a for-each loop that computes the product
        // of all the elements in myList and print out the product.

    }
}
        </input>
<tests>
import static org.junit.Assert.*;
 import org.junit.*;;
 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
     @Test
     public void testExpected() throws IOException
     {
         String output = getMethodOutput("main");
         String expect = "100";
         boolean passed = output.contains(expect);
         getResults(expect, output, "Prints out sum", passed);
         assertTrue(passed);
     }
       @Test
     public void testProduct() throws IOException
     {
         String output = getMethodOutput("main");
         String expect = "30000";
         boolean passed = output.contains(expect);
         getResults(expect, output, "Prints out product", passed);
         assertTrue(passed);
     }
     @Test
     public void countForLoops()
     {
         String code = removeSpaces(getCode());
         int count = countOccurences(code,"for(Integer");
         boolean passed = count &gt;= 2;
         getResults("2", count+"", "Number of for each loops", passed);
         assertTrue(passed);
     }
 }
</tests>

    </program>
</exercise>
        </subsection>
  <subsection xml:id="_for-loop">
            <title>For Loop</title>
            <p>You can also use a      <c>while</c> or <c>for</c> loop to process list elements using the index. The ArrayList index starts at 0 just like arrays, but instead of using the square brackets [] to access elements, you  use the <c>get(index)</c> to get the value at the index and <c>set(index,value)</c> to set the element at an index to a new value.
                If you try to use an index that is outside of the range of 0 to the number of elements − 1 in an ArrayList, your code will throw an <term>ArrayIndexOutOfBoundsException</term>, just like in arrays.</p>

<exercise label="listForLoop">
    <statement>
            <p>The following code will throw an ArrayIndexOutOfBoundsException. Can you fix it?</p>

    </statement>
    <program xml:id="listForLoop_editor" interactive="activecode" language="java">

        <input>
import java.util.*;
public class TestForLoop
{
    public static void main(String[] args)
    {
        ArrayList&lt;Integer&gt; myList = new ArrayList&lt;Integer&gt;();
        myList.add(50);
        myList.add(30);
        myList.add(20);
        int total = 0;
        for (int i=0; i &lt;= myList.size(); i++)
        {
            total = total + myList.get(i);
        }
        System.out.println(total);
    }
}
        </input>
<tests>
import static org.junit.Assert.*;
 import org.junit.*;;
 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
     @Test
     public void testMain() throws IOException
     {
         String output = getMethodOutput("main");
         String expect = "100";
         boolean passed = getResults(expect, output, "Expected output from main");
         assertTrue(passed);
     }
     @Test
     public void fixedCode()
     {
       boolean passed = checkCodeContains("fixed test in loop", "i &lt; myList.size()");
       assertTrue(passed);
     }
 }
</tests>

    </program>
</exercise>
        </subsection>
  <subsection xml:id="_while-loop">
            <title>While Loop</title>
            <p>The example below demonstrates a while loop and an object-oriented approach where the list is a field of the current object and you use an object method rather than a class (static) method to loop through the list.</p>

<exercise label="listForEachLoopObj">
    <statement>
            <p>The following code removes a name from a list. Set the found variable to the appropriate true or false values at line 13 and line 20 to make the code work.</p>

    </statement>
    <program xml:id="listForEachLoopObj_editor" interactive="activecode" language="java">

        <input>
import java.util.*;
public class ListWorker
{
   private ArrayList&lt;String&gt; nameList;

   public ListWorker(ArrayList&lt;String&gt; theNames)
   {
       nameList = theNames;
   }

   public boolean removeName(String name)
   {
       boolean found =   // true or false?
       int index = 0;
       while (index &lt; nameList.size())
       {
           if (name.equals(nameList.get(index)))
           {
               nameList.remove(index);
               found =    // true or false?
           }
           else index++;
       }
       return found;
    }

    public static void main(String[] args)
    {
        ArrayList&lt;String&gt; myList = new ArrayList&lt;String&gt;();
        myList.add("Amun");
        myList.add("Ethan");
        myList.add("Donnie");
        myList.add("Ethan");
        ListWorker listWorker = new ListWorker(myList);
        System.out.println(listWorker.nameList);
        listWorker.removeName("Ethan");
        System.out.println("After removing Ethan: "
                  + listWorker.nameList);
    }
}
        </input>
<tests>
import static org.junit.Assert.*;
 import org.junit.*;;
 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
     @Test
     public void testMain() throws IOException
     {
         String output = getMethodOutput("main");
         String expect = "[Amun, Ethan, Donnie, Ethan]\nAfter removing Ethan: [Amun, Donnie]";
         boolean passed = getResults(expect, output, "Expected output from main");
         assertTrue(passed);
     }
 }
</tests>

    </program>
</exercise>
            <p>Be careful when you remove items from a list as you loop through it.  Remember that removing an item from a list will shift the remaining items to the left.   Notice that the method above only increments the current index if an item was not removed from the list.  If you increment the index in all cases you will miss checking some of the elements since the rest of the items shift left when you remove one.</p>
            <p>Do not use the enhanced for each loop if you want to add or remove elements when traversing a list because it will throw a <term>ConcurrentModificationException</term> error. Since for each loops do not use an index, you cannot do this special case of incrementing only if it is changed. So if you are going to add or remove items or you need the index, use a regular for-loop or a while loop.</p>

    <exercise label="qloopList_1">
        <statement>

            <p>7-3-4: Assume that <c>nums</c> has been created as an <c>ArrayList</c> object and it initially contains the following <c>Integer</c> values [0, 0, 4, 2, 5, 0, 3, 0]. What will <c>nums</c> contain as a result of executing <c>numQuest</c>?</p>
            <program language="java"><input>
ArrayList&lt;Integer&gt; list1 = new ArrayList&lt;Integer&gt;();
private ArrayList&lt;Integer&gt; nums;

// precondition: nums.size() &gt; 0;
// nums contains Integer objects
public void numQuest()
{
   int k = 0;
   Integer zero = new Integer(0);
   while (k &lt; nums.size())
   {
      if (nums.get(k).equals(zero))
         nums.remove(k);
      k++;
   }
}
</input></program>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>[0, 4, 2, 5, 3]</p>
                </statement>
                <feedback>
                    <p>Incrementing the index each time through the loop will miss when there are two zeros in a row.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>[3, 5, 2, 4, 0, 0, 0, 0]</p>
                </statement>
                <feedback>
                    <p>This would be true if the code moved the zeros to the end, but that is not what it does.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>[0, 0, 0, 0, 4, 2, 5, 3]</p>
                </statement>
                <feedback>
                    <p>This would be true if the code moved the zeros to the font, but that is not what it does.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>[4, 2, 5, 3]</p>
                </statement>
                <feedback>
                    <p>This would be correct if <code>k</code> was only incremented when an item was not removed from the list.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
            <p>You can step through the code above by clicking on the following <url href="http://cscircles.cemc.uwaterloo.ca/java_visualize/#code=import+java.util.*%3B%0A%0A%0Apublic+class+ListWorker+%7B%0A%0A+++private+List%3CInteger%3E+nums%3B%0A+++%0A+++public+ListWorker(List%3CInteger%3E+theNums)%0A+++%7B%0A++++++nums+%3D+theNums%3B%0A+++%7D%0A%0A+++//+precondition%3A+nums.size()+%3E+0%3B%0A+++//+nums+contains+Integer+objects%0A+++public+void+numQuest()%0A+++%7B%0A++++++int+k+%3D+0%3B%0A++++++Integer+zero+%3D+new+Integer(0)%3B%0A++++++while+(k+%3C+nums.size())%0A++++++%7B%0A+++++++++if+(nums.get(k).equals(zero))%0A++++++++++++nums.remove(k)%3B%0A+++++++++k%2B%2B%3B%0A++++++%7D%0A+++%7D%0A+++%0A+++public+static+void+main(String%5B%5D+args)+%7B%0A++++++List%3CInteger%3E+numList+%3D+new+ArrayList%3CInteger%3E()%3B%0A++++++numList.add(0)%3B%0A++++++numList.add(0)%3B%0A++++++numList.add(4)%3B%0A++++++numList.add(2)%3B%0A++++++numList.add(5)%3B%0A++++++numList.add(0)%3B%0A++++++numList.add(3)%3B%0A++++++numList.add(0)%3B%0A++++++System.out.println(numList)%3B%0A++++++ListWorker+listW+%3D+new+ListWorker(numList)%3B%0A++++++listW.numQuest()%3B%0A++++++System.out.println(numList)%3B%0A+++++%0A+++%7D%0A%7D&amp;mode=display&amp;curInstr=11" visual="http://cscircles.cemc.uwaterloo.ca/java_visualize/#code=import+java.util.*%3B%0A%0A%0Apublic+class+ListWorker+%7B%0A%0A+++private+List%3CInteger%3E+nums%3B%0A+++%0A+++public+ListWorker(List%3CInteger%3E+theNums)%0A+++%7B%0A++++++nums+%3D+theNums%3B%0A+++%7D%0A%0A+++//+precondition%3A+nums.size()+%3E+0%3B%0A+++//+nums+contains+Integer+objects%0A+++public+void+numQuest()%0A+++%7B%0A++++++int+k+%3D+0%3B%0A++++++Integer+zero+%3D+new+Integer(0)%3B%0A++++++while+(k+%3C+nums.size())%0A++++++%7B%0A+++++++++if+(nums.get(k).equals(zero))%0A++++++++++++nums.remove(k)%3B%0A+++++++++k%2B%2B%3B%0A++++++%7D%0A+++%7D%0A+++%0A+++public+static+void+main(String%5B%5D+args)+%7B%0A++++++List%3CInteger%3E+numList+%3D+new+ArrayList%3CInteger%3E()%3B%0A++++++numList.add(0)%3B%0A++++++numList.add(0)%3B%0A++++++numList.add(4)%3B%0A++++++numList.add(2)%3B%0A++++++numList.add(5)%3B%0A++++++numList.add(0)%3B%0A++++++numList.add(3)%3B%0A++++++numList.add(0)%3B%0A++++++System.out.println(numList)%3B%0A++++++ListWorker+listW+%3D+new+ListWorker(numList)%3B%0A++++++listW.numQuest()%3B%0A++++++System.out.println(numList)%3B%0A+++++%0A+++%7D%0A%7D&amp;mode=display&amp;curInstr=11">Example</url>.</p>
<exercise label="list_1" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
            <p>The following has the correct code for the method <code>getScore</code> plus at least one extra unneeded code statement.  This method will calculate and return the score for a word game.  The code should loop through all of the elements in <code>wordList</code> and if the length of the current word is 3 it should add one to the <code>score</code>, if the length of the word is 4 it should add 2 to the <code>score</code>, and if the length is greater than 4 it should add 3 to the <code>score</code>.  The method should return the <code>score</code>.  Drag the needed blocks from the left into the correct order on the right. Check your solution by clicking on the Check button.  You will be told if any of the blocks are in the wrong order or if you need to remove one or more blocks.  There is one extra block that is not needed in a correct solution.</p>
</statement>
<blocks><block order="3">
<cline>public static int getScore(List&lt;String&gt; wordList)</cline>
<cline>{</cline>
</block><block order="2">
<cline>  int score = 0;</cline>
<cline>  for (String word : wordList)</cline>
<cline>  {</cline>
</block><block order="6">
<cline>    if (word.length() == 3)</cline>
</block><block order="1">
<cline>    {</cline>
<cline>      score++;</cline>
<cline>    }</cline>
</block><block order="4">
<cline>    else if (word.length() == 4)</cline>
<cline>    {</cline>
<cline>      score = score + 2;</cline>
<cline>    }</cline>
</block><block order="5">
<cline>    else if (word.length() &gt; 4)</cline>
<cline>    {</cline>
<cline>      score = score + 3;</cline>
<cline>    }</cline>
</block><block order="9">
<cline>  } // end for</cline>
</block><block order="8">
<cline>  return score;</cline>
<cline>} // end method</cline>
</block><block order="7" correct="no">
<cline>if (word.length == 3) </cline>
</block></blocks></exercise><exercise label="list_2" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
            <p>The following has the correct code for a method called <code>insertInOrder</code> plus at least one extra unneeded code statement. This method should add the passed <code>name</code> in alphabetic order to a private list field called <code>nameList</code>.  Drag the needed blocks from the left into the correct order on the right. Check your solution by clicking on the Check button.  You will be told if any of the blocks are in the wrong order or if you need to remove one or more blocks.  There is one extra block that is not needed in a correct solution.</p>
</statement>
<blocks><block order="3">
<cline>public void insertInOrder(String name)</cline>
<cline>{</cline>
</block><block order="5">
<cline>  int index = 0;</cline>
</block><block order="6">
<cline>  while (index &lt; nameList.size() &amp;&amp;</cline>
<cline>         nameList.get(index).compareTo(name) &lt; 0)</cline>
<cline>  {</cline>
</block><block order="8">
<cline>    index++;</cline>
</block><block order="7">
<cline>  } // end while</cline>
</block><block order="4">
<cline>  nameList.add(index,name);</cline>
</block><block order="2">
<cline>} // end method</cline>
</block><block order="1" correct="no">
<cline>nameList.add(name); </cline>
</block></blocks></exercise>        </subsection>
  

<exercise label="StudentList">
    <statement>
        <p>You can put any kind of Objects into an ArrayList. For example, here is an ArrayList of Students. 
        Although the print statement works here, you may want a nicer printout.</p>

            <p>Add a for each loop that prints out each student and then a new line.</p>

    </statement>
    <program xml:id="StudentList_editor" interactive="activecode" language="java">

        <input>
import java.util.*;

public class StudentList
{
   // main method for testing
   public static void main(String[] args)
   {
       ArrayList&lt;Student&gt; roster = new ArrayList&lt;Student&gt;();
       roster.add(new Student("Skyler", "skyler@sky.com", 123456));
       roster.add(new Student("Ayanna", "ayanna@gmail.com", 789012));
       // Replace this with a for each loop that prints out each student on a separate line
       System.out.println(roster);
   }
 }

class Student
{
   private String name;
   private String email;
   private int id;

   public Student(String initName, String initEmail, int initId)
   {
      name = initName;
      email = initEmail;
      id = initId;
   }

   // toString() method
   public String toString()
   {
     return id + ": " + name + ", " + email;
   }
}
        </input>
<tests>
import static org.junit.Assert.*;
  import org.junit.*;;
  import java.io.*;

  public class RunestoneTests extends CodeTestHelper
  {
      @Test
      public void testMain() throws IOException
      {
          String output = getMethodOutput("main");
          String expect = "123456: Skyler, skyler@sky.com\n789012: Ayanna, ayanna@gmail.com";
          boolean passed = getResults(expect, output, "Expected output from main");
          assertTrue(passed);
      }
       @Test
      public void loopCode()
      {
        boolean passed = checkCodeContains("for loop", "for");
        assertTrue(passed);
      }
  }
</tests>

    </program>
</exercise>
  
  <subsection xml:id="_summary-1736734502">
            <title>Summary</title>
            <p><ul>
                <li>
                    <p>ArrayLists can be traversed with an enhanced for each loop, or a while or for loop using an index.</p>
                </li>
                <li>
                    <p>Deleting elements during a traversal of an ArrayList requires using special techniques to avoid skipping elements, since remove moves all the elements down.</p>
                </li>
                <li>
                    <p>Since the indices for an ArrayList start at 0 and end at the number of elements − 1, accessing an index value outside of this range will result in an ArrayIndexOutOfBoundsException being thrown.</p>
                </li>
                <li>
                    <p>Changing the size of an ArrayList while traversing it using an enhanced for loop can result in a ConcurrentModificationException being thrown. Therefore, when using an enhanced for loop to traverse an ArrayList, you should not add or remove elements.</p>
                </li>
            </ul></p>
        </subsection>
</section>
