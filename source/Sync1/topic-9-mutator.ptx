<?xml version="1.0"?>
<!-- Generated by Docutils 0.19 -->
<section xml:id="mutator-methods">
    <title>Mutator Methods</title>
    <p>Corresponding to each get method, programmers also provide a public <term>set method</term> to change the value of a private instance variable in a class. These are called <term>mutator methods</term> (or settters or set or modifier methods). They are <term>void methods</term> meaning that they do not return a value, but they do take a <term>parameter</term>, the new value for the instance variable. Here are some examples of how to write a set method for an instance variable:</p>
    <program language="java">
    <input>
class ExampleTemplate {

    //Instance variable declaration
    private typeOfVar varName;

    // Mutator (setter) method template
    public void setVarName(typeOfVar newValue)
    {
       varName = newValue;
    }
}
</input>
  </program>
    <p>Here's an example of the Student class with a mutator method called setName():</p>
    <program language="java">
    <input>
class Student {

   //Instance variable name
   private String name;

   /** setName sets name to newName
    *  @param newName                */
   public void setName(String newName)
   {
      name = newName;
   }

   public static void main(String[] args)
   {
      // To call a set method, use objectName.setVar(newValue)
      Student s = new Student();
      s.setName("Ayanna");
   }
  }
</input>
  </program>
    <p>Notice the difference between set (mutator) and get (accessor) methods in the following figure. Getters return an instance variable's value and have the same return type as this variable and no parameters. Setters have a void return type and take a new value as a parameter to change the value of the instance variable.</p>
    <figure align="center" xml:id="id1-35">
    <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 1: Comparison of set and get methods</caption>
    <image source="ch-sync/get-set-comparison.png" width="NaN%"/>
  </figure>
      <p>Mutator methods do not have to have a name with “set” in it, although most do. They can be any methods that change the value of an instance variable or a static variable in the class, as can be seen in the AP Practice questions below.</p>
  <subsection xml:id="_summary-33">
            <title>Summary</title>
            <p><ul>
                <li>
                    <p>A void method does not return a value. Its header contains the keyword void before the method name.</p>
                </li>
                <li>
                    <p>A <term>mutator method</term> is often a void method that changes the values of instance variables or static variables.</p>
                </li>
            </ul></p>
        </subsection>
  <subsection xml:id="_ap-practice-11">
            <title>Practice</title>

    <exercise label="AP5-5-1">
        <statement>

            <p>Consider the following class definition.</p>
            <program language="java"><input>
public class Liquid
{
    private int currentTemp;

    public Liquid(int temp)
    {
        currentTemp = temp;
    }

    public void resetTemp()
    {
        currentTemp = newTemp;
    }
}
</input></program>
            <p>Which of the following best identifies the reason the class does not compile?</p>
</statement><choices><choice><statement id="AP5-5-1_opt_a">            <p>The constructor header does not have a return type.</p>
</statement><feedback id="AP5-5-1_opt_a">
            <p>The constructor should not have a return type.</p>
</feedback></choice><choice><statement id="AP5-5-1_opt_b">            <p>The resetTemp method is missing a return type.</p>
</statement><feedback id="AP5-5-1_opt_b">
            <p>Mutator methods usually have a void return type.</p>
</feedback></choice><choice><statement id="AP5-5-1_opt_c">            <p>The constructor should not have a parameter.</p>
</statement><feedback id="AP5-5-1_opt_c">
            <p>Constructors can have parameters.</p>
</feedback></choice><choice correct="yes"><statement id="AP5-5-1_opt_d">            <p>The resetTemp method should have a parameter.</p>
</statement><feedback id="AP5-5-1_opt_d">
            <p>Correct! The resetTemp method should have a parameter for the newTemp value to set the currentTemp.</p>
</feedback></choice><choice><statement id="AP5-5-1_opt_e">            <p>The instance variable currentTemp should be public instead of private.</p>
</statement><feedback id="AP5-5-1_opt_e">
            <p>Instance variables should be private variables.</p>
</feedback></choice></choices>
    </exercise>

    <exercise label="AP5-5-2">
        <statement>

            <p>In the Party class below, the addPeople method is intended to increase the value of the instance variable numOfPeople by the value of the parameter additionalPeople. The method does not work as intended.</p>
            <program language="java"><input>
public class Party
{
    private int numOfPeople;

    public Party(int n)
    {
        numOfPeople = n;
    }

    public int addPeople(int additionalPeople) // Line 10
    {
        numOfPeople += additionalPeople; // Line 12
    }
}
</input></program>
            <p>Which of the following changes should be made so that the class definition compiles without error and the method addPeople works as intended?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>Replace line 12 with numOfPeople = additionalPeople;</p>
                </statement>
                <feedback>
                    <p>This method should add additionalPeople to numOfPeople.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Replace line 12 with return additionalPeople;</p>
                </statement>
                <feedback>
                    <p>This method should add additionalPeople to numOfPeople.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Replace line 12 with additionalPeople += 3;</p>
                </statement>
                <feedback>
                    <p>This method should add additionalPeople to numOfPeople.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Replace line 10 with public addPeople (int additionalPeople)</p>
                </statement>
                <feedback>
                    <p>Mutator methods should have a void return type.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>Replace line 10 with public void addPeople(int additionalPeople)</p>
                </statement>
                <feedback>
                    <p>Mutator methods should have a void return type.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="StudentObjExample2">
    <statement>
        <p>Fix the main method to include a call to the appropriate set method.</p>

    </statement>
    <program xml:id="StudentObjExample2_editor" interactive="activecode" language="java">

        <input>
public class TesterClass
{
   // main method for testing
   public static void main(String[] args)
   {
      Student s1 = new Student("Skyler", "skyler@sky.com", 123456);
      System.out.println(s1);
      s1.setName("Skyler 2");
      // Main doesn't have access to email, use set method!
      s1.email = "skyler2@gmail.com";
      System.out.println(s1);
   }
 }

class Student
{
   private String name;
   private String email;
   private int id;

   public Student(String initName, String initEmail, int initId)
   {
      name = initName;
      email = initEmail;
      id = initId;
   }
   // mutator methods - setters
   public void setName(String newName)
   {
     name = newName;
   }
   public void setEmail(String newEmail)
   {
     email = newEmail;
   }
   public void setId(int newId)
   {
     id = newId;
   }
   // accessor methods - getters
   public String getName()
   {
      return name;
   }
   public String getEmail()
   {
      return email;
   }
   public int getId()
   {
      return id;
   }
   public String toString() {
      return id + ": " + name + ", " + email;
   }
}
        </input>
<tests>
import static org.junit.Assert.*;
  import org.junit.*;

  import java.io.*;

  public class RunestoneTests extends CodeTestHelper
  {
      public RunestoneTests()
      {
          super("TesterClass");
      }

      @Test
      public void test1()
      {
          String target = "s1.setEmail(\"skyler2@gmail.com\");";
          boolean passed = checkCodeContains("call to setEmail()", target);
          assertTrue(passed);
      }

      @Test
      public void testMain()
      {
          String output = getMethodOutput("main");
          String expect = "123456: Skyler, skyler@sky.com\n123456: Skyler 2, skyler2@gmail.com";

          boolean passed = getResults(expect, output, "Checking main()", true);
          assertTrue(passed);
      }
  }
</tests>

    </program>
</exercise>
    <exercise label="setSignature">
        <statement>

        <p>Consider the class Party which keeps track of the number of people at the party.</p>
        <program language="java"><input>
public class Party
{
    //number of people at the party
    private int numOfPeople;

    /* Missing header of set method */
    {
        numOfPeople = people;
    }
}
</input></program>
        <p>Which of the following method signatures could replace the missing header for the set method in the code above so that the method will work as intended?</p>
</statement><choices><choice><statement id="setSignature_opt_a">        <p>public int getNum(int people)</p>
</statement><feedback id="setSignature_opt_a">
        <p>The set method should not have a return value and is usually named set, not get.</p>
</feedback></choice><choice><statement id="setSignature_opt_b">        <p>public int setNum()</p>
</statement><feedback id="setSignature_opt_b">
        <p>The set method should not have a return value and needs a parameter.</p>
</feedback></choice><choice><statement id="setSignature_opt_c">        <p>public int setNum(int people)</p>
</statement><feedback id="setSignature_opt_c">
        <p>The set method should not have a return value.</p>
</feedback></choice><choice correct="yes"><statement id="setSignature_opt_d">        <p>public void setNum(int people)</p>
</statement><feedback id="setSignature_opt_d">
        <p>Yes, the set method should take a parameter called people and have a void return value. The name of the set method is usually set followed by the full instance variable name, but it does not have to be an exact match.</p>
</feedback></choice><choice><statement id="setSignature_opt_e">        <p>public int setNumOfPeople(int p)</p>
</statement><feedback id="setSignature_opt_e">
        <p>The parameter of this set method should be called people in order to match the code in the method body.</p>
</feedback></choice></choices>
    </exercise>
    <exercise label="AccessorMutator">
    <statement><p>Drag the definition from the left and drop it on the correct word on the right.  Click the "Check Me" button to see if you are correct.</p></statement>
    <feedback><p>Review the vocabulary.</p></feedback>
<matches><match order="1"><premise>gets and returns the value of an instance variable</premise><response>accessor method</response></match><match order="2"><premise>sets the instance variable to a value in its parameter</premise><response>mutator method</response></match><match order="3"><premise>initializes the instance variables to values</premise><response>constructor</response></match><match order="4"><premise>accessible from outside the class</premise><response>public</response></match><match order="5"><premise>accessible only inside the class</premise><response>private</response></match></matches></exercise>
        </subsection>


</section>
