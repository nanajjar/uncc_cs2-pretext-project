<?xml version="1.0"?>
<!-- Generated by Docutils 0.19 -->
<section>
  <title>Calling Methods Without Parameters</title>
  <introduction>
    <p><term>Methods</term> are a set of instructions that define behaviors for all objects of a class. 
    For example, in the <c>Player</c> class, methods like <c>heal()</c> and <c>attack()</c> give <c>Player</c> objects the ability to heal and attack.</p>
    <p>To use an object's method, you must use the object name and the dot (.) operator followed by the method name, 
    for example, <c>p1.heal();</c> calls <c>p1</c>'s <c>heal</c> method. 
    These are called <term>object methods</term> or <term>non-static methods</term>. 
    
    An object method <em>must</em> be called on an object of the class that the method is defined in.  
    Object methods work with the <term>attributes</term> of the object, 
    such as the direction the turtle is heading or its position.</p>
    <p>Every method call is followed by parentheses. The parentheses <c>()</c> after method names are there in 
    case you need to give the method parameters (data) to do its job, which we will see in the next lesson. 
    You must always include the parentheses after the method name.</p>
    <note>
            <p>object.method(); is used to call an object's method.</p>
        </note>
   
  </introduction>
  <subsection xml:id="_procedural-abstraction">
            <title>Procedural Abstraction</title>
            <p><term>Procedural abstraction</term> allows a programmer to use a method and not worry about the details of how it exactly works. 
            For example, we know that if we hit the brakes, the car will stop, and we can still use the brakes even if we don't really know how they work.</p>
            <p>In addition to writing your own methods, you should be able to use methods already written for you and figure out what they do. 
            When we use methods for a class in a library, we can look up the <term>method signature</term> (or <term>method header</term>), 
            which is the method name followed by a parameter list, in its documentation. 
            For example, here is a <c>Student</c> class with a method signature <c>public void print()</c> which has an empty parameter list with no parameters. 
            Methods are defined after the instance variables (attributes) and constructors in a class.</p>
           
            <figure align="center" xml:id="id2-1736653341"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 1: A Student class showing instance variables, constructors, and methods.</caption><image source="ch-sync/StudentClass.png" width="80%" alt="A Student class showing instance variables, constructors, and methods"/></figure>


          
            <p>The Java <raw format="html" xml:space="preserve"><a href="http://www.pythontutor.com/java.html#code=public%20class%20Song%20%7B%0A%20%20%0A%20%20%20%20public%20void%20print%28%29%20%7B%0A%20%20%20%20%20%20%20%20System.out.println%28%22Old%20MacDonald%20had%20a%20farm%22%29%3B%0A%20%20%20%20%20%20%20%20chorus%28%29%3B%0A%20%20%20%20%20%20%20%20System.out.print%28%22And%20on%20that%20farm%20he%20had%20a%20%22%29%3B%0A%20%20%20%20%20%20%20%20animal%28%29%3B%0A%20%20%20%20%20%20%20%20chorus%28%29%3B%0A%20%20%20%20%7D%0A%20%20%20%20public%20void%20chorus%28%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20System.out.println%28%22E-I-E-I-O%22%29%3B%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20public%20void%20animal%28%29%20%7B%0A%20%20%20%20%20%20%20System.out.println%28%22duck%22%29%3B%0A%20%20%20%20%7D%0A%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%20%7B%0A%20%20%20%20%20%20%20Song%20s%20%3D%20new%20Song%28%29%3B%0A%20%20%20%20%20%20%20s.print%28%29%3B%0A%20%20%20%20%7D%0A%7D&amp;cumulative=false&amp;curInstr=1&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false" target="_blank" style="text-decoration:underline">visualization</a></raw> below shows how a song can be divided up into methods. Click on the next button below the code to step through the code. Execution in Java always begins in the <c>main</c> method in the current class. Then, the flow of control skips from method to method as they are called.  The Song's print method calls the chorus() and animal() methods to help it print out the whole song.</p>
            <p>When you call the chorus() method, it skips to the chorus code, executes and prints out the chorus, and then returns back to the method that called it.</p>

<program xml:id="songviz1" interactive="codelens" language="java">
    <input>
public class Song
{
  public void print()
  {
    System.out.println("Old MacDonald had a farm");
    chorus();
    System.out.print("And on that farm he had a ");
    animal();
    chorus();
  }

  public void chorus()
  {
    System.out.println("E-I-E-I-O");
  }

  public void animal()
  {
    System.out.println("duck");
  }

  public static void main(String[] args)
  {
    Song s = new Song();
    s.print();
  }
}
    </input>
</program>
            <p>Methods inside the same class can call each other using just <c>methodName()</c>, but to call non-static methods in another class or from a main method, you must first create an object of that class and then call its methods using <c>object.methodName()</c>.</p>
            <figure align="center" xml:id="id2-1736653340"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 2: Calling non-static methods from main() or from other methods inside the same class.</caption><image source="ch-sync/calling-methods.png" width="NaN%" alt="Calling Methods"/></figure>

   
            
            <p>Try this <raw format="html" xml:space="preserve"><a href="http://www.pythontutor.com/visualize.html#code=public%20class%20Song%20%7B%0A%20%20%0A%20%20%20%20%20%20%20%20public%20void%20print%28%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20System.out.print%28%22I%20like%20to%20%22%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20eat%28%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20eat%28%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20eat%28%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20fruit%28%29%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20public%20void%20fruit%28%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20System.out.println%28%22apples%20and%20bananas!%22%29%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20public%20void%20eat%28%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20System.out.print%28%22eat%20%22%29%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20Song%20s%20%3D%20new%20Song%28%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20s.print%28%29%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D&amp;cumulative=false&amp;curInstr=1&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false" target="_blank" style="text-decoration:underline">visualization</a></raw> to see this code in action.</p>
            <note>
                <p>method(); is used to call a method within the same class, but object.method(); is necessary if you are calling the method from the main method or from a different class.</p>
            </note>
            <p>Before you call a method from <c>main</c> or from outside of the current class, you must make sure that you have created and initialized an object. Remember that if you just declare an object reference without setting it to refer to a new object the value will be <c>null</c> meaning that it doesn't reference an object. If you call a method on a variable whose value is <c>null</c>, you will get a <term>NullPointerException</term> error, where a <term>pointer</term> is another name for a reference.</p>
        </subsection>

  <subsection xml:id="_summary-1736653187">
            <title>Summary</title>
            <p><ul>
                <li>
                    <p><term>Methods</term> are a set of instructions that define the behaviors for all objects of the class.</p>
                </li>
                <li>
                    <p>Use <term>dot notation</term> to execute an object's method.  This is the object's name followed by the dot (.) operator followed by the method name and parentheses: <term>object.method();</term></p>
                </li>
                <li>
                    <p>A <term>method signature</term> is the method name followed by the parameter list which gives the type and name for each parameter. Note that methods do not have to take any parameters, but you still need the parentheses after the method name.</p>
                </li>
                <li>
                    <p><term>Procedural abstraction</term> allows a programmer to use a method by knowing in general what it does without knowing what lines of code execute. This is how we can drive a car without knowing how the brakes work.</p>
                </li>
                <li>
                    <p>A <term>method</term> or <term>constructor</term> call interrupts the sequential execution of statements, causing the program to first execute the statements in the method or constructor before continuing. Once the last statement in the method or constructor has executed or a return statement is executed, the flow of control is returned to the point immediately following the method or constructor call.</p>
                </li>
                <li>
                    <p>A <term>NullPointerException</term> will happen if you try to call an object method on an object variable whose value is <c>null</c>.  This usually means that you forgot to create the object using the <c>new</c> operator followed by the class name and parentheses.</p>
                </li>
                <li>
                    <p>An <term>object method</term> or <term>non-static method</term> is one that must be called on an object of a class.  It usually works with the object's attributes.</p>
                </li>
                <li>
                    <p>A <term>static method</term> or <term>class method</term> method is one that doesn't need to be called on an object of a class.</p>
                </li>
            </ul></p>
        </subsection>
  <subsection xml:id="_ap-practice-1736653032">
            <title>Practice</title>

            <exercise label="student_methods">
    <statement><p>Click on the method headers (signatures) in the following class. Do not click on the constructors.</p></statement>
<feedback><p>Methods follow the constructors. The method header is the first line of a method.</p></feedback>
<areas>
<cline><area correct="no">public class Student {</area></cline>
<cline/>
<cline>    <area correct="no">private String name;</area></cline>
<cline>    <area correct="no">private String email;</area></cline>
<cline/>
<cline>    <area correct="no">public Student(String initName, String intEmail) </area></cline>
<cline>    <area correct="no">{</area></cline>
<cline>        <area correct="no">name = initName;</area></cline>
<cline>        <area correct="no">email = initEmail;</area></cline>
<cline>     <area correct="no">}</area></cline>
<cline/>
<cline>     <area correct="yes">public String getName() </area></cline>
<cline>     <area correct="no">{</area></cline>
<cline>        <area correct="no">return name;</area></cline>
<cline>     <area correct="no">}</area></cline>
<cline/>
<cline>     <area correct="yes">public void print() </area></cline>
<cline>     <area correct="no">{</area></cline>
<cline>        <area correct="no">System.out.println(name + ":" + email);</area></cline>
<cline>     <area correct="no">}</area></cline>
<cline><area correct="no">}</area></cline>
</areas></exercise>  

 <exercise label="songMethods">
        <statement>

            <p>What does the following code print out?</p>
            <program language="java"><input>
  public class Song
  {
    public void print()
    {
        System.out.print("I like to ");
        eat();
        eat();
        eat();
        fruit();
    }

    public void fruit()
    {
        System.out.println("apples and bananas!");
    }

    public void eat()
    {
       System.out.print("eat ");
    }

    public static void main(String[] args)
    {
       Song s = new Song();
       s.print();
    }
}
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>I like to eat eat eat.</p>
                </statement>
                <feedback>
                    <p>Try tracing through the print method and see what happens when it calls the other methods.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>I like to eat eat eat fruit.</p>
                </statement>
                <feedback>
                    <p>There is a fruit() method but it does not print out the word fruit.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>I like to apples and bananas eat.</p>
                </statement>
                <feedback>
                    <p>The order things are printed out depends on the order in which they are called from the print method.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>I like to eat eat eat apples and bananas!</p>
                </statement>
                <feedback>
                    <p>Yes, the print method calls the eat method 3 times and then the fruit method to print this.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Nothing, it does not compile.</p>
                </statement>
                <feedback>
                    <p>Try the code in an active code window to see that it does work.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="AP2-3-1">
        <statement>

            <p>Consider the following class definition.</p>
            <program language="java"><input>
public class Party
{
    private int numInvited;
    private boolean partyCancelled;

    public Party()
    {
        numInvited = 1;
        partyCancelled = false;
    }

    public void inviteFriend()
    {
        numInvited++;
    }

    public void cancelParty()
    {
        partyCancelled = true;
    }
}
</input></program>
            <p>Assume that a Party object called myParty has been properly declared and initialized in a class other than Party.  Which of the following statements are valid?</p>
</statement><choices><choice correct="yes"><statement id="AP2-3-1_opt_a">            <p>myParty.cancelParty();</p>
</statement><feedback id="AP2-3-1_opt_a">
            <p>Correct!</p>
</feedback></choice><choice><statement id="AP2-3-1_opt_b">            <p>myParty.inviteFriend(2);</p>
</statement><feedback id="AP2-3-1_opt_b">
            <p>The method inviteFriend() does not have any parameters.</p>
</feedback></choice><choice><statement id="AP2-3-1_opt_c">            <p>myParty.endParty();</p>
</statement><feedback id="AP2-3-1_opt_c">
            <p>There is no endParty() method in the class Party.</p>
</feedback></choice><choice><statement id="AP2-3-1_opt_d">            <p>myParty.numInvited();</p>
</statement><feedback id="AP2-3-1_opt_d">
            <p>There is no numInvited() method in the class Party. It is an instance variable.</p>
</feedback></choice><choice><statement id="AP2-3-1_opt_e">            <p>System.out.println( myParty.cancelParty() );</p>
</statement><feedback id="AP2-3-1_opt_e">
            <p>This would cause an error because the void method cancelParty() does not return a String that could be printed.</p>
</feedback></choice></choices>
    </exercise>

    <exercise label="AP2-3-2">
        <statement>

            <p>Consider the following class definition.</p>
            <program language="java"><input>
public class Cat
{
    public void meow()
    {
        System.out.print("Meow ");
    }

    public void purr()
    {
        System.out.print("purr");
    }

    public void welcomeHome()
    {
        purr();
        meow();
    }
    /* Constructors not shown */
}
</input></program>
            <p>Which of the following code segments, if located in a method in a class other than Cat, will cause the message “Meow purr” to be printed?</p>
</statement><choices><choice><statement id="AP2-3-2_opt_a">            <program language="java"><input>
Cat a = new Cat();
Cat.meow();
Cat.purr();
</input></program>
</statement><feedback id="AP2-3-2_opt_a">
            <p>You must use the object a, not the class name Cat, to call these methods.</p>
</feedback></choice><choice><statement id="AP2-3-2_opt_b">            <program language="java"><input>
Cat a = new Cat();
a.welcomeHome();
</input></program>
</statement><feedback id="AP2-3-2_opt_b">
            <p>This would print “purrMeow “</p>
</feedback></choice><choice correct="yes"><statement id="AP2-3-2_opt_c">            <program language="java"><input>
Cat a = new Cat();
a.meow();
a.purr();
</input></program>
</statement><feedback id="AP2-3-2_opt_c">
            <p>Correct!</p>
</feedback></choice><choice><statement id="AP2-3-2_opt_d">            <program language="java"><input>
Cat a = new Cat().welcomeHome();
</input></program>
</statement><feedback id="AP2-3-2_opt_d">
            <p>This would cause a syntax error.</p>
</feedback></choice><choice><statement id="AP2-3-2_opt_e">            <program language="java"><input>
Cat a = new Cat();
a.meow();
</input></program>
</statement><feedback id="AP2-3-2_opt_e">
            <p>This would just print “Meow “.</p>
</feedback></choice></choices>
    </exercise>
        </subsection>
    <exercise label="2_3_Draw7" numbered="yes" adaptive="yes" indentation="show" language="python"><statement>
        <p>
            The following Java code defines a Player class with movement methods, 
            allowing the player to move up and left based on its current direction. 
            However, the code blocks are out of order. Your task is to rearrange the code blocks so that the player:
            <ol>
                <li>
                    <p>
                        Moves up first.

                    </p>
                </li>
                <li>
                    <p>
                        Turns left.
                    </p>
                </li>
                <li>
                    <p>
Moves left afterward.
                    </p>
                </li>
            </ol>

The player starts at position (0,0) and is initially facing up. Once the blocks are correctly arranged, 
the final position should be (-10, 10), and the player should be facing left.
        Click on the “Check Me” button to check your solution.</p>

            
            <program language="java"><input>

public class Player {
    private int x, y;
    private String direction; // Possible values: "up", "down", "left", "right"

    public Player() {
        this.x = 0;
        this.y = 0;
        this.direction = "up"; // Default direction
    }

    public Player(int x, int y) {
        this.x = x;
        this.y = y;
        this.direction = "up"; // Default direction
    }

    public void forward(int distance) {
        y += distance;
    
    }

    public void turnLeft() {
        direction = "left";
    }

    public void turnRight() {
        direction = "right";
    }

    public void faceUp() {
        direction = "up";
    }

    public void faceDown() {
        direction = "down";
    }

    public int[] getPosition() {
        return new int[]{x, y};
    }

    public void printStatus() {
        System.out.println("Player Position: (" + x + ", " + y + ")");
        System.out.println("Facing: " + direction);
    }
}    

</input>
</program>
</statement>
<blocks><block order="1">
<cline>public class PlayGame</cline>
<cline>{</cline>
</block><block order="2">
<cline>    public static void main(String[] args)</cline>
<cline>    {</cline>
</block><block order="3">
<cline>        Player player1 = new Player(0, 0);</cline>
</block><block order="4">
<cline>        player1.forward(10);</cline>
</block><block order="5">
<cline>        player1.turnLeft();</cline>
<cline>        player1.forward(10);</cline>
</block><block order="6">
<cline>        player1.printStatus();</cline>
</block><block order="7">
<cline>    } // end main</cline>
</block><block order="8">
<cline>} // end class</cline>
</block></blocks></exercise>

</section>
