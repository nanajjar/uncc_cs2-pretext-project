<?xml version="1.0"?>
<!-- Generated by Docutils 0.19 -->
<section>
  <title>Calling Methods With Parameters</title>
  <introduction>
    <p>In the previous section, we used simple <term>methods</term> like forward() and turnRight() to make the player move around. 
    You may have noticed that forward() always moves the same distance (10 pixels), and turnRight() and turnLeft() always turn at right angles (90 degrees). 
    This is a little limiting. What if we wanted the player to move 100 pixels? or move diagnoally? 
   This requires different distance length and smaller/larger angles. 
   We can add complex methods in the Player class that let you specify the number of pixels to move forward or the number of degrees to turn.

These values that you can give to methods to help them do their job are called <term>arguments</term> or <term>parameters</term>.</p>
    <p>The parentheses () after method names are there in case you need to give the method <term>actual parameters</term> or <term>arguments</term> (some data) to do its job. For example, we can give the argument 100 in forward(100) to make the player go forward 100 pixels or the argument 30 in turn(30) to make the player turn 30 degrees instead of 90 degrees.</p>
    <note>
            <p>object.method(arguments); is used to call an object's method and give it some arguments (actual parameters) to do its job.</p>
        </note>
    <p>Although some people use the words parameters and arguments interchangeably, there is a subtle difference. 
    When you create your own method, the variables you define for it are called <term>formal parameters</term>. 
    When you call the method to do its job, you give or pass in <term>arguments</term> or <term>actual parameters</term> 
    to it that are then saved in the parameter variables. So, in the definition of the forward method, it has a parameter variable called distance, and in the call to forward(100), the argument is the value 100 which will get saved in the parameter variable pixels. You will learn to write your own methods in Unit 5. In this unit, you will learn to call methods that are already written for you.</p>
    <program language="java">
    <input>
// Method call
player1.forward(100); // argument is 100

// Method definition written for you
public void forward(int distance) // parameter distance
...
</input>
  </program>

  </introduction>
  <subsection xml:id="_tracing-methods">
            <title>Tracing Methods</title>
            <p>You will not write your own methods until Unit 5, but you should be able to trace and interpret method calls like below.</p>
            <p>Here is another version of the Old MacDonald Song with a more powerful abstraction. The method verse has 2 parameters for the animal and the noise it makes, so that it can be used for any animal.
                Use the Code Lens button or this <raw format="html" xml:space="preserve"><a href="http://www.pythontutor.com/java.html#code=public%20class%20Song%20%0A%7B%0A%20%20%0A%20%20%20%20public%20void%20verse%28String%20animal,%20String%20noise%29%20%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20System.out.println%28%22Old%20MacDonald%20had%20a%20farm%22%29%3B%0A%20%20%20%20%20%20%20%20chorus%28%29%3B%0A%20%20%20%20%20%20%20%20System.out.println%28%22And%20on%20that%20farm%20he%20had%20a%20%22%20%2B%20animal%29%3B%0A%20%20%20%20%20%20%20%20chorus%28%29%3B%0A%20%20%20%20%20%20%20%20System.out.println%28%22With%20a%20%22%20%2B%20noise%20%2B%20%22%20%22%20%2B%20noise%20%2B%20%22%20here,%22%29%3B%0A%20%20%20%20%20%20%20%20System.out.println%28%22And%20a%20%22%20%2B%20noise%20%2B%20%22%20%22%20%2B%20noise%20%2B%20%22%20there,%22%29%3B%0A%20%20%20%20%20%20%20%20System.out.println%28%22Old%20MacDonald%20had%20a%20farm%22%29%3B%0A%20%20%20%20%20%20%20%20chorus%28%29%3B%0A%20%20%20%20%7D%0A%20%20%20%20public%20void%20chorus%28%29%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20System.out.println%28%22E-I-E-I-O%22%29%3B%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%20%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20Song%20s%20%3D%20new%20Song%28%29%3B%0A%20%20%20%20%20%20%20s.verse%28%22cow%22,%20%22moo%22%29%3B%0A%20%20%20%20%20%20%20s.verse%28%22duck%22,%22quack%22%29%3B%0A%20%20%20%20%7D%0A%7D&amp;cumulative=false&amp;curInstr=1&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false" target="_blank" style="text-decoration:underline">Java visualizer</a></raw> to step through the code.</p>
            

</subsection>
 <subsection xml:id="_ap-practice-1736653030">
            <title>Practice</title>
<exercise label="SongFarm">
    <statement>
            <p>Add another verse in main that calls the method verse with a different animal and noise.</p>

    </statement>
    <program xml:id="SongFarm_editor" interactive="activecode" language="java">

        <input>
public class Song
{

    public void verse(String animal, String noise)
    {
        System.out.println("Old MacDonald had a farm");
        chorus();
        System.out.println("And on that farm he had a " + animal);
        chorus();
        System.out.println("With a " + noise + " " + noise + " here,");
        System.out.println("And a " + noise + " " + noise + " there,");
        System.out.println("Old MacDonald had a farm");
        chorus();
    }
    public void chorus()
    {
        System.out.println("E-I-E-I-O");
    }

    public static void main(String[] args)
    {
       Song s = new Song();
       s.verse("cow", "moo");
       s.verse("duck","quack");
    }
}
        </input>
<tests>
import static org.junit.Assert.*;
import org.junit.*;;
import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public String expected = "Old MacDonald had a farm\nE-I-E-I-O\nAnd on that farm he had a cow\nE-I-E-I-O\nWith a moo moo here,\nAnd a moo moo there,\nOld MacDonald had a farm\nE-I-E-I-O\nOld MacDonald had a farm\nE-I-E-I-O\nAnd on that farm he had a duck\nE-I-E-I-O\nWith a quack quack here,\nAnd a quack quack there,\nOld MacDonald had a farm\nE-I-E-I-O";

    public RunestoneTests() {
        super("Song");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");

        boolean passed = output.contains(expected);

        passed = getResults(expected, output, "Still have the old output", passed);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String output = getMethodOutput("main");

        boolean passed = output.contains(expected) &amp;&amp; !output.equals(expected);

        passed = getResults(expected, output, "Verse added", passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String code = getCode();
        int numVerses = countOccurences(code, "verse(");
        boolean passed = numVerses &gt;= 4;
        // + 1 because of verse method definition
        passed = getResults("3 or more", ""+numVerses, "Number of verses", passed);
        assertTrue(passed);
    }
}
</tests>

    </program>
</exercise>
    <exercise label="traceMethods">
        <statement>

            <p>2-4-6: What does the following code print out?</p>
            <program language="java"><input>
public class MethodTrace
{
  public void square(int x)
  {
      System.out.print(x*x);
  }
  public void divide(int x, int y)
  {
      System.out.println(x/y);
  }
  public static void main(String[] args) {
      MethodTrace traceObj = new MethodTrace();
      traceObj.square(5);
      System.out.print(" and ");
      traceObj.divide(4,2);
  }
 }
</input></program>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>25 and 2</p>
                </statement>
                <feedback>
                    <p>Correct.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>25 and .5</p>
                </statement>
                <feedback>
                    <p>The order of the arguments to the divide(x,y) method will divide x by y and return an int result.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>2 25</p>
                </statement>
                <feedback>
                    <p>The square(x) method is called before the divide(x,y) method.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>25 2</p>
                </statement>
                <feedback>
                    <p>The main method prints out " and " in between the method calls.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Nothing, it does not compile.</p>
                </statement>
                <feedback>
                    <p>Try the code in the visualizer link below.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
            
            <p>Try this <raw format="html" xml:space="preserve"><a href="http://www.pythontutor.com/visualize.html#code=%20%20public%20class%20MethodTrace%20%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20public%20void%20square%28int%20x%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20System.out.print%28x*x%29%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20public%20void%20divide%28int%20x,%20int%20y%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20System.out.println%28x/y%29%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20MethodTrace%20traceObj%20%3D%20new%20MethodTrace%28%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20traceObj.square%285%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20System.out.print%28%22%20and%20%22%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20traceObj.divide%284,2%29%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%7D&amp;cumulative=false&amp;curInstr=18&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false" target="_blank" style="text-decoration:underline">visualization</a></raw> to see this code in action.</p>
        
  
 

    <exercise label="AP2-4-1">
        <statement>

            <p>2-4-8: Consider the following methods:</p>
            <program language="java"><input>
public void inchesToCentimeters(double i)
{
    double c = i * 2.54;
    printInCentimeters(i, c);
}

public void printInCentimeters(double inches, double centimeters)
{
    System.out.print(inches + "--&gt;" + centimeters);
}
</input></program>
            <p>Assume that the method call <c>inchesToCentimeters(10)</c> appears in a method in the same class. What is printed as a result of the method call?</p>
</statement><choices><choice><statement id="AP2-4-1_opt_a">            <p>inches –&gt; centimeters</p>
</statement><feedback id="AP2-4-1_opt_a">
            <p>The values of the variables inches and centimeters should be printed out, not the words.</p>
</feedback></choice><choice><statement id="AP2-4-1_opt_b">            <p>10 –&gt;  25</p>
</statement><feedback id="AP2-4-1_opt_b">
            <p>Two doubles should be printed, not two ints, and the centimeters should be 25.4</p>
</feedback></choice><choice><statement id="AP2-4-1_opt_c">            <p>25.4 –&gt; 10</p>
</statement><feedback id="AP2-4-1_opt_c">
            <p>Inches should be printed before centimeters.</p>
</feedback></choice><choice><statement id="AP2-4-1_opt_d">            <p>10 –&gt; 12.54</p>
</statement><feedback id="AP2-4-1_opt_d">
            <p>c = 10 * 2.54 = 25.4, not 12.54.</p>
</feedback></choice><choice correct="yes"><statement id="AP2-4-1_opt_e">            <p>10.0 –&gt; 25.4</p>
</statement><feedback id="AP2-4-1_opt_e">
            <p>Correct! centimeters = 10 * 2.54 = 25.4.</p>
</feedback></choice></choices>
    </exercise>

    <exercise label="AP2-4-2">
        <statement>

            <p>2-4-9: Consider the following methods, which appear in the same class.</p>
            <program language="java"><input>
public void splitPizza(int numOfPeople)
{
    int slicesPerPerson = 8/numOfPeople;
    /* INSERT CODE HERE */
}

public void printSlices(int slices)
{
    System.out.println("Each person gets " + slices + " slices each");
}
</input></program>
            <p>Which of the following lines would go into <c>/* INSERT CODE HERE */</c> in the method splitPizza in order to call the <c>printSlices</c> method to print the number of slices per person correctly?</p>
</statement><choices><choice correct="yes"><statement id="AP2-4-2_opt_a">            <p>printSlices(slicesPerPerson);</p>
</statement><feedback id="AP2-4-2_opt_a">
            <p>Correct! If you had 4 people, slicesPerPerson would be 8/4=2 and printSlices would print out “Each person gets 2 slices each”.</p>
</feedback></choice><choice><statement id="AP2-4-2_opt_b">            <p>printSlices(numOfPeople);</p>
</statement><feedback id="AP2-4-2_opt_b">
            <p>If you had 4 people, this would print out that they get 4 slices each of an 8 slice pizza.</p>
</feedback></choice><choice><statement id="AP2-4-2_opt_c">            <p>printSlices(8);</p>
</statement><feedback id="AP2-4-2_opt_c">
            <p>This would always print out 8 slices each.</p>
</feedback></choice><choice><statement id="AP2-4-2_opt_d">            <p>splitPizza(8);</p>
</statement><feedback id="AP2-4-2_opt_d">
            <p>This would not call the printSlices method.</p>
</feedback></choice><choice><statement id="AP2-4-2_opt_e">            <p>splitPizza(slicesPerPerson);</p>
</statement><feedback id="AP2-4-2_opt_e">
            <p>This would not call the printSlices method.</p>
</feedback></choice></choices>
    </exercise>
  
   

      </subsection>
  
</section>
