<?xml version="1.0"?>
<!-- Generated by Docutils 0.19 -->
<section xml:id = "sec-arraylist-basics">
  <title>ArrayList Basics</title>
  <introduction>
    <figure align="left" xml:id="id1_index-0">
    <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 1: A couple of lists</caption>
    <image source="ch-sync/lists.jpg" width="60%"/>
  </figure>
    <p> We learned how arrays are used to hold collections of related data. But arrays have limitations. The size of an array is established at the time of creation and cannot be changed. What if you don’t know how big the collection of data will be? What if you want to add and remove items from the collection and change the size of the collection while the program is running? For example, if you wanted to represent a shopping list, you might add to the list throughout the week and remove things from the list while you are shopping. You probably would not know how many items will be on the list at the beginning of the week.</p>
    <p>Luckily, Java has a class  called <term>ArrayList</term> which is a re-sizable array. An ArrayList has an underlying array that grows or shrinks as needed. You can use ArrayList instead of arrays whenever you don’t know the size of the array you need or you know that you will add and remove items and may need to change the array’s size dynamically during run time. An ArrayList is <term>mutable</term>, meaning it can change during runtime by adding and removing objects from it.</p>
  </introduction>
  <subsection xml:id="_import-package">
            <title>Import Package</title>
            
            
            <p xml:id="_index-1-1736734456">The <c>ArrayList</c> class is in the <c>java.util</c> package.  A <term>package</term> is a set or library of related classes. The java.lang package is the main Java language classes that you get automatically without importing it. The java.util package has a lot of utility classes that you can use if you import the package.    If you want to use any class other than those in <c>java.lang</c> you will need to either use the full name (packageName.ClassName) like (<c>java.util.ArrayList</c>) or use one or more import statements to import in that package.</p>
            <p>Import statements have to be the first code in a Java source file.  An import statement tells Java which class you mean when you use a short name (like <c>ArrayList</c>).  It tells Java where to find the definition of that class.</p>
            <p>You can import just the classes you need from a package as shown below.  Just provide an <c>import</c> statement for each class that you want to use.</p>
            <program language="java"><input>
import java.util.ArrayList; // import just the ArrayList class
</input></program>
            
            
            <p xml:id="_index-2-1736734457">Another option is to import everything at the same level in a package using <c>import packageName.*</c>.</p>
            <program language="java"><input>
import java.util.*; // import everything in package including ArrayList
</input></program>
     
            <p> <term>Practice</term></p>

    <exercise label="qlib_1">
        <statement>

            <p>Which of the following is true about import statements?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>You can only have one import statement in a source file.</p>
                </statement>
                <feedback>
                    <p>You can have an many import statements as you need.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>You must specify the class to import.</p>
                </statement>
                <feedback>
                    <p>You can use * to import all classes at the specified level.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>Import statements must be before other code in a Java source file.</p>
                </statement>
                <feedback>
                    <p>Import statements have to be the first Java statements in a source file.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>You must import java.lang.String to use the short name of String.</p>
                </statement>
                <feedback>
                    <p>You do not have to import any classes that are in the java.lang package.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
        </subsection>
  <subsection xml:id="_declaring-and-creating-arraylists">
            <title>Declaring and Creating ArrayLists</title>
            <p>To declare a ArrayList use <c>ArrayList&lt;Type&gt; name</c>  Change the <em>Type</em> to be whatever type of objects you want to store in the ArrayList, for example <c>String</c> as shown in the code below.  You don’t have to specify the <term>generic type</term> <c>&lt;Type&gt;</c>, since it will default to <c>Object</c>, but it is good practice to specify it to restrict what to allow in your ArrayList.  Using a type ArrayList&lt;Type&gt; is preferred over just using ArrayList because it allows the compiler to find errors that would otherwise be missed until run-time.</p>
            <program language="java"><input>
// ArrayList&lt;Type&gt; name = new ArrayList&lt;Type&gt;();
// An ArrayList of Strings:
ArrayList&lt;String&gt; shoppingList = new ArrayList&lt;String&gt;();
</input></program>
            <note>
                <p>ArrayLists can only hold objects like String and the wrapper classes Integer and Double. They cannot hold primitive types like int, double, etc.</p>
            </note>

<exercise label="ArrayListDeclare">
    <statement>
            <p>In the code below we are declaring a variable called <c>nameList</c> that can refer to a ArrayList of strings, but currently doesn’t refer to any ArrayList yet (it’s set to <c>null</c>).</p>

    </statement>
    <program xml:id="ArrayListDeclare_editor" interactive="activecode" language="java">

        <input>
import java.util.*; // import for ArrayList

public class ArrayListDeclare
{
    public static void main(String[] args)
    {
       ArrayList&lt;String&gt; nameList = null;
       System.out.println(nameList);
    }
 }
 ====
 import static org.junit.Assert.*;
 import org.junit.*;;
 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
     public RunestoneTests() {
         super("ArrayListDeclare");
     }

     @Test
     public void test1()
     {
         String output = getMethodOutput("main");
         String expect = "null";

         boolean passed = getResults(expect, output, "main()", true);
         assertTrue(passed);
     }

 }
        </input>
<tests>


</tests>

    </program>
</exercise>
            <p>Declaring a ArrayList doesn’t actually create a ArrayList. It only creates a variable that can refer to a ArrayList.  To actually create a ArrayList use <c>new ArrayList&lt;Type&gt;()</c>. If you leave off the <c>&lt;Type&gt;</c> it will default to <c>Object</c>.</p>
            <p>You can get the number of items in a ArrayList using the <c>size()</c> method.  Notice that an empty ArrayList has a size of 0 because the ArrayList constructor constructs an empty list.  Also notice that you can’t get the size of a ArrayList that is currently set to <c>null</c> on line 9.  You will get a <c>NullPointerException</c> instead, which means that you tried to do something with an object reference that was <c>null</c> (doesn’t exist).</p>

<exercise label="ArrayListCreateStr">
    <statement>
            <p>The following code demonstrates a NullPointerException. Change the list2 declaration so that it creates a new Arraylist to remove the NullPointerException.</p>

    </statement>
    <program xml:id="ArrayListCreateStr_editor" interactive="activecode" language="java">

        <input>
import java.util.*; // import needed for ArrayList
public class ArrayListCreateStr
{
    public static void main(String[] args)
    {
       ArrayList&lt;String&gt; nameList = new ArrayList&lt;String&gt;();
       System.out.println("The size of nameList is: " + nameList.size());
       ArrayList&lt;String&gt; list2 = null;
       System.out.println("The size of list2 is: " + list2.size());
    }
}
        </input>
<tests>
import static org.junit.Assert.*;
 import org.junit.*;;
 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
     public RunestoneTests() {
         super("ArrayListCreateStr");
     }

     @Test
     public void test1()
     {
         String output = getMethodOutput("main");
         String expect = "The size of nameList is: 0\nThe size of list2 is: 0";

         boolean passed = getResults(expect, output, "main()", true);
         assertTrue(passed);
     }
  }
</tests>

    </program>
</exercise>
            <p>You can also create ArrayLists of integer values.  However, you have to use <c>Integer</c> as the type because ArrayLists can only hold objects, not primitive values.  All primitive types must be <term>wrapped</term> in objects before they are added to an ArrayList.  For example, <c>int</c> values can be wrapped in <c>Integer</c> objects, <c>double</c> values can be wrapped in <c>Double</c> objects. You can actually put in any kind of Objects in an ArrayList, even for a class that you wrote in Unit 5 like Student or Person or Pet.</p>

<exercise label="ArrayListCreateInt">
    <statement>
            <p>Here’s an example of a Integer ArrayList.</p>

    </statement>
    <program xml:id="ArrayListCreateInt_editor" interactive="activecode" language="java">

        <input>
import java.util.*; // import everything at this level
public class ArrayListCreateInt
{
    public static void main(String[] args)
    {
       ArrayList&lt;Integer&gt; numList = new ArrayList&lt;Integer&gt;();
       System.out.println(numList.size());
    }
}
        </input>
<tests>
import static org.junit.Assert.*;
 import org.junit.*;;
 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
     public RunestoneTests() {
         super("ArrayListCreateInt");
     }

     @Test
     public void test1()
     {
         String output = getMethodOutput("main");
         String expect = "0";

         boolean passed = getResults(expect, output, "main()", true);
         assertTrue(passed);
     }
 }
</tests>

    </program>
</exercise>

    <exercise label="qArrayListInteger">
        <statement>

            <p>Which of the following is the correct way to create an ArrayList of integers?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>ArrayList[int] numbers = new ArrayList();</p>
                </statement>
                <feedback>
                    <p>The square brackets [] are only used with arrays, not ArrayLists.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>ArrayList&lt;String&amp;gt; numbers = new ArrayList();</p>
                </statement>
                <feedback>
                    <p>String is not the correct type since this is for an array of integers, and the type should be next to ArrayList on both sides.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>ArrayList&lt;int&amp;gt; numbers = new ArrayList&lt;int&amp;gt;();</p>
                </statement>
                <feedback>
                    <p>ArrayLists cannot hold primitive types like int. You must use the wrapper class Integer.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>ArrayList&lt;Integer&amp;gt; numbers = new ArrayList&lt;Integer&amp;gt;();</p>
                </statement>
                <feedback>
                    <p>The wrapper class Integer is used to hold integers in an ArrayList.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
            <p>You can convert arrays to ArrayLists using its constructor with an argument Arrays.asList(arrayname) like the following. Note that ArrayLists have a toString() method that is automatically called to print the list in a nice format.</p>

<exercise label="ArrayListFromArray">
    <statement>
            <p>Example code creating an ArrayList from an array.</p>

    </statement>
    <program xml:id="ArrayListFromArray_editor" interactive="activecode" language="java">

        <input>
import java.util.*;
public class ArrayListFromArray
{
    public static void main(String[] args)
    {
       String[] names = {"Dakota", "Madison", "Brooklyn"};
       ArrayList&lt;String&gt; namesList = new ArrayList&lt;String&gt;(Arrays.asList(names));
       System.out.println(namesList);
    }
}
        </input>
<tests>
import static org.junit.Assert.*;
 import org.junit.*;;
 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
     public RunestoneTests() {
         super("ArrayListFromArray");
     }

     @Test
     public void test1()
     {
         String output = getMethodOutput("main");
         String expect = "[Dakota, Madison, Brooklyn]";

         boolean passed = getResults(expect, output, "main()", true);
         assertTrue(passed);
     }
 }
</tests>

    </program>
</exercise>
            <p>You can add values to an ArrayList by using its <term>add</term> method, described in detail in the next lesson. Try the code below. Note that the type of the ArrayList, String or Integer, also determines the type of parameters and return types for all of its methods, so add and print work for any type of ArrayList.</p>

<exercise label="listAdd">
    <statement>
            <p>Can you add another item to the shopping list?</p>

    </statement>
    <program xml:id="listAdd_editor" interactive="activecode" language="java">

        <input>
import java.util.*;
public class Shopping
{
   public static void main(String[] args)
   {
       ArrayList&lt;String&gt; shoppingList = new ArrayList&lt;String&gt;();
       System.out.println("Size: " + shoppingList.size());
       shoppingList.add("carrots");
       System.out.println(shoppingList);
       shoppingList.add("bread");
       System.out.println(shoppingList);
       shoppingList.add("chocolate");
       System.out.println(shoppingList);
       System.out.println("Size: " + shoppingList.size());
       ArrayList&lt;Integer&gt; quantities = new ArrayList&lt;Integer&gt;();
       quantities.add(2);
       quantities.add(4);
       System.out.println(quantities);
  }
}
        </input>
<tests>
import static org.junit.Assert.*;
 import org.junit.*;;
 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
     public RunestoneTests() {
         super("Shopping");
     }

     @Test
     public void test1()
     {
         String output = getMethodOutput("main");
         String expect = "Size: 0\n[carrots]\n[carrots, bread]\n[carrots, bread, chocolate]\nSize: 3\n[2, 4]";

         boolean passed = !output.equals(expect);

         passed = getResults(expect, output, "Changed code", passed);
         assertTrue(passed);
     }

 }
</tests>

    </program>
</exercise>
 <exercise label="qloopList">
        <statement>

        <p>Which of the following is a reason to use an ArrayList instead of an array?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>A list will always use less memory than an array.</p>
                </statement>
                <feedback>
                    <p>No, an ArrayList grows as needed so it will typically be bigger than the data you put it in. If you try to add more data and the array is full, it usually doubles in size.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>A list can store objects, but arrays can only store primitive types.</p>
                </statement>
                <feedback>
                    <p>No, you can have an array of objects.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>A list has faster access to the last element than an array.</p>
                </statement>
                <feedback>
                    <p>No, an ArrayList is implemented using an array so it has the same access time to any index as an array does.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>A list resizes itself as necessary as items are added, but an array does not.</p>
                </statement>
                <feedback>
                    <p>An ArrayList is really a dynamic array (one that can grow or shrink as needed).</p>
                </feedback>
            </choice>
</choices>

    </exercise>
        </subsection>
  
  <subsection xml:id="_summary-1736734501">
            <title>Summary</title>
            <p><ul>
                <li>
                    <p>ArrayList are re-sizable arrays that allow adding and removing items to change their size during run time.</p>
                </li>
                <li>
                    <p>The ArrayList class is in the java.util package. You must import java.util.* to use it.</p>
                </li>
                <li>
                    <p>An ArrayList object contains object references and is mutable, meaning it can change (by adding and removing items from it).</p>
                </li>
                <li>
                    <p>The ArrayList constructor ArrayList() constructs an empty list of size 0.</p>
                </li>
                <li>
                    <p>Java allows the generic type ArrayList&lt;E&gt;, where the generic type E specifies the type of the elements, like String or Integer. Without it, the type will be Object.</p>
                </li>
                <li>
                    <p>ArrayList&lt;E&gt; is preferred over ArrayList because it allows the compiler to find errors that would otherwise be found at run-time.</p>
                </li>
                <li>
                    <p>When ArrayList&lt;E&gt; is specified, the types of the reference parameters and return type when using its methods are type E.</p>
                </li>
                <li>
                    <p>ArrayLists cannot hold primitive types like int or double, so you must use the wrapper classes Integer or Double to put numerical values into an ArrayList.</p>
                </li>
            </ul></p>
        </subsection>
   
</section>
