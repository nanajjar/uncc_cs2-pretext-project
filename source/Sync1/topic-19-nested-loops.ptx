<?xml version="1.0"?>
<!-- Generated by Docutils 0.19 -->
<section xm:id="nested-loops">
    <title>Nested For Loops</title>
    <p xml:id="_index-0-33">A <term>nested loop</term> has one loop inside of another.  These are typically used for working with two dimensions such as printing stars in rows and columns as shown below.   When a loop is nested inside another loop, the inner loop runs many times inside the outer loop. In each iteration of the outer loop, the inner loop will be re-started. The inner loop must finish all of its iterations before the outer loop can continue to its next iteration.</p>
    <figure align="center" xml:id="id1-29">
    <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 1: Nested Loops</caption>
    <image source="ch-sync/nestedloops.png" width="NaN%"/>
  </figure>
    <p><term>Practice</term></p>

    <exercise label="lcfcnl1">
    <statement>
        <p>Can you change the code to print a rectangle with 10 rows and 8 columns of stars? You can also try replacing line 10 with this print statement to see the rows and columns: <c>System.out.print(row + "-" + col + " ");</c></p>

    </statement>
    <program xml:id="lcfcnl1_editor" interactive="activecode" language="java">

        <input>
public class NestedLoops
{

   public static void main(String[] args)
   {
       for (int row = 1; row &lt;= 3; row++)
       {
           for (int col = 1; col &lt;= 5; col++)
           {
               System.out.print("*");
           }
           System.out.println();
       }
   }
}
        </input>
<tests>
import static org.junit.Assert.*;
 import org.junit.*;;
 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
     public RunestoneTests() {
         super("NestedLoops");
     }

     @Test
     public void test1()
     {
         String orig = "public class NestedLoops\n{\n\n   public static void main(String[] args)\n   {\n       for (int row = 1; row &lt;= 3; row++)\n       {\n           for (int col = 1; col &lt;= 5; col++)\n           {\n               System.out.print(\"*\");\n           }\n           System.out.println();\n       }\n   }\n}\n";

         boolean passed = codeChanged(orig);
         assertTrue(passed);
     }

     @Test
     public void test2()
     {
       boolean passed = checkCodeContains("10 rows","row &lt;= 10")
            &amp;&amp; checkCodeContains("8 columns","col &lt;= 8");
       assertTrue(passed);
     }
 }
</tests>

    </program>
</exercise>
    <exercise label="nested1">
        <statement>

        <p>4-4-2: What does the following code print?</p>
        <program language="java"><input>
for (int i = 1; i &lt; 7; i++)
{
    for (int y = 1; y &lt;= 5; y++)
    {
        System.out.print("*");
    }
    System.out.println();
}
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>A rectangle of 7 rows with 5 stars per row.</p>
                </statement>
                <feedback>
                    <p>This would be true if i was initialized to 0.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>A rectangle of 7 rows with 4 stars per row.</p>
                </statement>
                <feedback>
                    <p>This would be true if i was initialized to 0 and the inner loop continued while <code>y &lt; 5</code>.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>A rectangle of 6 rows with 5 stars per row.</p>
                </statement>
                <feedback>
                    <p>The outer loop runs from 1 up to 7 but not including 7 so there are 6 rows and the inner loop runs 1 to 5 times including 5 so there are 5 columns.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>A rectangle of 6 rows with 4 stars per row.</p>
                </statement>
                <feedback>
                    <p>This would be true if the inner loop continued while <code>y &lt; 5</code>.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="nested2">
        <statement>

        <p>4-4-3: What does the following code print?</p>
        <program language="java"><input>
for (int i = 0; i &lt; 5; i++)
{
    for (int j = 3; j &gt;= 1; j--)
    {
        System.out.print("*");
    }
    System.out.println();
}
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>A rectangle of 4 rows with 3 star per row.</p>
                </statement>
                <feedback>
                    <p>This would be true if i was initialized to 1 or ended at 4.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>A rectangle of 5 rows with 3 stars per row.</p>
                </statement>
                <feedback>
                    <p>Yes, the outer loop runs from 0 up to 5 but not including 5 so there are 5 rows and the inner loop runs from 3 down to 1 so 3 times.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>A rectangle of 4 rows with 1 star per row.</p>
                </statement>
                <feedback>
                    <p>The inner loop runs 3 times when j is 3, 2, and then 1, so there are 3 stars per row.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>The loops have errors.</p>
                </statement>
                <feedback>
                    <p>Try the code in an Active Code window and you will see that it does run.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="ch6ex6muc" numbered="yes" adaptive="yes" indentation="show" language="python"><statement>
        <p>The main method in the following class should print 10 rows with 5 &lt;code&gt;*&lt;/code&gt; in each row.   But, the blocks have been mixed up and include one extra block that isnâ€™t needed in the solution.  Drag the needed blocks from the left and put them in the correct order on the right.  Click the Check button to check your solution.</p>
</statement>
<blocks><block order="3">
<cline>public class Test1</cline>
<cline>{</cline>
<cline>    public static void main(String[] args)</cline>
<cline>    {</cline>
</block><block order="1">
<cline>        for (int x = 0; x &lt; 10; x++)</cline>
<cline>        {</cline>
</block><block order="9">
<choice correct="yes"><cline>            for (int y = 0; y &lt; 5; y++)</cline>
<cline>            {</cline>
</choice><choice><cline>            for (int y = 0; y &lt;= 5; y++)</cline>
<cline>            { </cline>
</choice></block><block order="8">
<cline>                System.out.print("*");</cline>
</block><block order="4">
<cline>            }</cline>
</block><block order="7">
<cline>            System.out.println();</cline>
</block><block order="6">
<cline>        }</cline>
</block><block order="5">
<cline>    }</cline>
<cline>}</cline>
</block></blocks></exercise>

  <subsection xml:id="_summary-26">
            <title>Summary</title>
            <p><ul>
                <li>
                    <p>Nested iteration statements are iteration statements that appear in the body of another iteration statement.</p>
                </li>
                <li>
                    <p>When a loop is nested inside another loop, the inner loop must complete all its iterations before the outer loop can continue.</p>
                </li>
            </ul></p>
        </subsection>
</section>
