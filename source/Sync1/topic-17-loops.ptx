<?xml version="1.0"?>
<!-- Generated by Docutils 0.19 -->
<section xml:id="_for-loops">
    <title>For Loops</title>
    <p xml:id="_index-0-31">Another type of loop in Java is a <term>for loop</term>. This is usually used when you know how many times you want the loop to execute. It is often a simple <term>counter-controlled loop</term> to do the loop body a set number of times.</p>
   
  <subsection xml:id="_three-parts-of-a-for-loop">
            <title>Three Parts of a For Loop</title>
            <p>A for-loop combines all 3 parts of writing a loop in one line to initialize, test, and change the loop control variable.  The 3 parts are separated by semicolons (<c>;</c>).  Each of the three parts of a <c>for</c> loop declaration is optional (initialization, condition, and change), but the semicolons are not optional.</p>
            <program language="java"><input>
for (initialize; test condition; change)
{
   loop body
}
</input></program>
            <p>The for-loop is almost a shortcut way to write a while loop with all three steps that you need in one line.</p>
            <figure align="center" xml:id="id2-18"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 2: Showing how a for loop maps to a while loop</caption><image source="ch-sync/compareForAndWhile.png" width="NaN%"/></figure>
            <p>Watch the following <url href="https://www.youtube.com/watch?v=SEDnzXeb2hU&amp;list=PLHqz-wcqDQIEP6p1_0wOb9l9aQ0qFijrP&amp;index=9&amp;ab_channel=colleenlewis" visual="https://www.youtube.com/watch?v=SEDnzXeb2hU&amp;list=PLHqz-wcqDQIEP6p1_0wOb9l9aQ0qFijrP&amp;index=9&amp;ab_channel=colleenlewis">video</url> which compares a while loop and for loop line by line.</p>

    <video xml:id="SEDnzXeb2hU" youtube="SEDnzXeb2hU" width="82%"/>
                <p>Here is a control flow diagram for a for loop.  The code in the initialization area is executed only one time before the loop begins, the test condition is checked each time through the loop and the loop continues as long as the condition is true, and the loop control variable change is done at the end of each execution of the body of the loop, just like a while loop.  When the loop condition is false, execution will continue at the next statement after the body of the loop.</p>
            <figure align="center" xml:id="id3-7"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 2: Control flow in a for loop</caption><image source="ch-sync/ForLoopFlow.png" width="NaN%"/></figure>

<exercise label="forloop">
    <statement>
            <p>Here is a for loop that counts from 1 to 5. Can you change it to count from 2 to 10?</p>

    </statement>
    <program xml:id="forloop_editor" interactive="activecode" language="java">

        <input>
public class ForLoop
{
   public static void main(String[] args)
   {
     for(int count = 1; count &lt;= 5; count++)
     {
        System.out.println(count);
     }
   }
}

        </input>
<tests>
import static org.junit.Assert.*;
import org.junit.*;;
import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
     @Test
     public void testMain() throws IOException
     {
         String output = getMethodOutput("main");
         String expect = "2\n3\n4\n5\n6\n7\n8\n9\n10\n";
         boolean passed = getResults(expect, output, "Expected output from main");
         assertTrue(passed);
     }
}
</tests>

    </program>
</exercise>

<exercise label="forloopfromwhile">
    <statement>
            <p>Here is a while loop that counts from 5 to 10. Run it and see what it does. Can you change it to a for-loop? Run your for-loop. Does it do the same thing?</p>

    </statement>
    <program xml:id="forloopfromwhile_editor" interactive="activecode" language="java">

        <input>
public class ForLoopFromWhile
{
   public static void main(String[] args)
   {
     int count = 5;
     while (count &lt;= 10)
     {
        System.out.println(count);
        count++;
     }
   }
}
        </input>
<tests>
// Test Code for Lesson 4.1 - For Loop

 import static org.junit.Assert.*;

 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;

 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
     public RunestoneTests() {
         super("ForLoopFromWhile");
     }

     @Test
     public void testMain() throws IOException
     {
         String output = getMethodOutput("main");
         String expect = "5\n6\n7\n8\n9\n10\n";

         boolean passed = getResults(expect, output, "Running main");
         assertTrue(passed);
     }

     @Test
     public void testWhile() throws IOException
     {
         String target = "while (*)";
         boolean passed = checkCodeNotContainsRegex("while loop", target);
         assertTrue(passed);
     }

     @Test
     public void testFor() throws IOException
     {
         String target = "for (int * = #; * ? #; *~)";
         boolean passed = checkCodeContainsRegex("for loop", target);
         assertTrue(passed);
     }
 }
</tests>

    </program>
</exercise>
            <note>
                <p>Two common patterns in for-loops are to count from 0 up to an number (using &lt;) or count from 1 to the number including the number (using &lt;=). Remember that if you start at 0 use &lt;, and if you start at 1, use &lt;=. The two loops below using these two patterns both run 10 times. The variable i (for index) is often used as a counter in for-loops.</p>
                <program language="java"><input>
// These loops both run 10 times
// If you start at 0, use &lt;
for(int i = 0; i &lt; 10; i++)
{
   System.out.println(i);
}
// If you start at 1, use &lt;=
for(int i = 1; i &lt;= 10; i++)
{
   System.out.println(i);
}
</input></program>
            </note>
            <p><term>Practice</term></p>

    <exercise label="qlb_3_1">
        <statement>

            <p>4-2-4: What does the following code print?</p>
            <program language="java"><input>
for (int i = 3; i &lt; 8; i++)
{
   System.out.print(i + " ");
}
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>3 4 5 6 7 8</p>
                </statement>
                <feedback>
                    <p>This loop starts with i equal to 3 but ends when i is equal to 8.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>0 1 2 3 4 5 6 7 8</p>
                </statement>
                <feedback>
                    <p>What is i set to in the initialization area?</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>8 8 8 8 8</p>
                </statement>
                <feedback>
                    <p>This would be true if the for loop was missing the change part <code>(int i = 3; i &lt; 8; )</code> but it does increment i in the change part <code>(int i = 3; i &lt; 8; i++)</code>.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>3 4 5 6 7</p>
                </statement>
                <feedback>
                    <p>The value of i is set to 3 before the loop executes and the loop stops when i is equal to 8.  So the last time through the loop i is equal to 7.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="qlb_3_2">
        <statement>

            <p>4-2-5: What does the following code print?</p>
            <program language="java"><input>
for (int i = 1; i &lt;= 10; i++)
{
   System.out.print(i + " ");
}
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>3 4 5 6 7 8</p>
                </statement>
                <feedback>
                    <p>What is i set to in the initialization area?</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>0 1 2 3 4 5 6 7 8 9</p>
                </statement>
                <feedback>
                    <p>What is i set to in the initialization area?</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>1 2 3 4 5 6 7 8 9 10</p>
                </statement>
                <feedback>
                    <p>The value of i starts at 1 and this loop will execute until i equals 11.  The last time through the loop the value of i is 10.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>1 3 5 7 9</p>
                </statement>
                <feedback>
                    <p>This loop changes i by 1 each time in the change area.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="qlb_3_3">
        <statement>

            <p>4-2-6: How many times does the following method print a <c>*</c>?</p>
            <program language="java"><input>
for (int i = 3; i &lt;= 9; i++)
{
   System.out.print("*");
}
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>10</p>
                </statement>
                <feedback>
                    <p>This would be true if i started at 0 and ended at 9.  Does it?</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>6</p>
                </statement>
                <feedback>
                    <p>Since i starts at 3 and the last time through the loop it is 9 the loop executes 7 times (9 - 3 + 1 = 7)</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>7</p>
                </statement>
                <feedback>
                    <p>How many numbers are between 3 and 9 (including 3 and 9)?</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>9</p>
                </statement>
                <feedback>
                    <p>This would be true if i started at 0 and the value of i the last time through the loop it was 8.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
<exercise label="print_evens" numbered="yes" adaptive="yes" indentation="hide" language="python"><statement>
            <p>The following method has the correct code to print out all the even values from 0 to the value of 10, but the code is mixed up.  Drag the blocks from the left into the correct order on the right and indent them correctly.  Even though Java doesn’t require indention it is a good habit to get into. You will be told if any of the blocks are in the wrong order or not indented correctly when you click the “Check Me” button.</p>
</statement>
<blocks><block order="3">
<cline>public static void printEvens()</cline>
<cline>{</cline>
</block><block order="1">
<cline>   for (int i = 0;</cline>
<cline>        i &lt;= 10;</cline>
<cline>        i+=2)</cline>
<cline>   {</cline>
</block><block order="5">
<cline>      System.out.println(i);</cline>
</block><block order="4">
<cline>   } // end for</cline>
</block><block order="2">
<cline>} // end method</cline>
</block></blocks></exercise>        </subsection>
  <subsection xml:id="_decrementing-loops">
            <title>Decrementing Loops</title>
            <p>You can also count backwards in a loop starting from the last number and decrementing down to 0 or 1. All 3 parts of the loop must change to count backwards including the test of when to stop. For example, “for (int i=5; i &gt; 0; i–)`` counts from 5 down to 1.</p>

<exercise label="lcfcp1">
    <statement>
            <p>What do you think will happen when you run the code below?  How would it change if you changed line 11 to initialize i’s value to 3? Try the Code Lens button to visualize and trace through this code.</p>

    </statement>
    <program xml:id="lcfcp1_editor" interactive="activecode" language="java">

        <input>
public class SongTest
{

   public static void printPopSong()
   {
      String line1 = " bottles of pop on the wall";
      String line2 = " bottles of pop";
      String line3 = "Take one down and pass it around";

      // loop 5 times (5, 4, 3, 2, 1)
      for (int i = 5; i &gt; 0; i--)
      {
         System.out.println(i + line1);
         System.out.println(i + line2);
         System.out.println(line3);
         System.out.println((i - 1) + line1);
         System.out.println();
      }
   }

   public static void main(String[] args)
   {
      SongTest.printPopSong();
   }
}
        </input>
<tests>
// Test Code for Lesson 4.1 - popSong
 import static org.junit.Assert.*;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
     public RunestoneTests() {
         super("SongTest");
     }

     @Test
     public void testMain() throws IOException
     {
         String output = getMethodOutput("main");
         String expect = "3 bottles of pop on the wall";

         String expect1 = expect.split("\n")[0];
         String output1 = output.split("\n")[0];

         boolean passed = output.contains(expect);
         passed = getResults(expect1, output1, "Print the song from 3", passed);
         assertTrue(passed);
     }

     @Test
     public void testMain2() throws IOException
     {
         String output = getMethodOutput("main");
         String expect = "5 bottles of pop on the wall";

         boolean passed = !output.contains(expect);

         String expect1 = expect.split("\n")[0];
         String output1 = output.split("\n")[0];

         passed = getResults(expect1, output1, "Do not start loop from 5", passed);
         assertTrue(passed);
     }
 }
</tests>

    </program>
</exercise>
            <p>The method <term>printPopSong</term> prints the words to a song.  It initializes the value of the variable i equal to 5 and then checks if i is greater than 0.  Since 5 is greater than 0, the body of the loop executes.  Before the condition is checked again, i is decreased by 1.  When the value in i is equal to 0 the loop stops executing.</p>

<exercise label="forloop-backwards">
    <statement>
            <p>Can you make the loop count by 2s backwards? It should print out 5 3 1? Remember to change all 3 parts of the for loop.</p>

    </statement>
    <program xml:id="forloop-backwards_editor" interactive="activecode" language="java">

        <input>
public class ForLoop
{
   public static void main(String[] args)
   {
     for(int count = 1; count &lt;= 5; count++)
     {
        System.out.println(count);
     }
   }
}

        </input>
<tests>
import static org.junit.Assert.*;
import org.junit.*;;
import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
     @Test
     public void testMain() throws IOException
     {
         String output = getMethodOutput("main");
         String expect = "5\n3\n1";
         boolean passed = getResults(expect, output, "Expected output from main");
         assertTrue(passed);
     }
}
</tests>

    </program>
</exercise>
        </subsection>
  
  <subsection xml:id="_summary-24">
            <title>Summary</title>
            <p><ul>
                <li>
                    <p>There are three parts in a for loop header: the initialization, the test condition (a Boolean expression), and an increment or decrement statement to change the loop control variable.</p>
                </li>
                <li>
                    <p>In a for loop, the initialization statement is only executed once before the evaluation of the test Boolean expression. The variable being initialized is referred to as a <term>loop control variable</term>.</p>
                </li>
                <li>
                    <p>In each iteration of a for loop, the increment or decrement statement is executed after the entire loop body is executed and before the Boolean expression is evaluated again.</p>
                </li>
                <li>
                    <p>A for loop can be rewritten into an equivalent while loop and vice versa.</p>
                </li>
            </ul></p>
        </subsection>
</section>
