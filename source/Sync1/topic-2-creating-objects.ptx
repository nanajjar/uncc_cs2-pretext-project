<?xml version="1.0"?>
<!-- Generated by Docutils 0.19 -->
<section xml:id="creating-and-initializing-objects-constructors">
    <title>Creating and Initializing Objects: Constructors</title>
    <introduction>
        <p>A Java class defines what objects of the class know (attributes) and what they can do
            (behaviors). Each class has <term>constructors</term> like <c>Player()</c> and 
            <c>Person("Grace Hopper")</c> which are used to initialize the attributes in a newly created
            object.</p>

          <p>       For example, here is how we create a Person object using their name, email and phone number.</p>
    <program language="java">
    <input>
// To create a new object, write:
// ClassName variableName = new ConstructorName(arguments);
Person p = new Person("Pat","pat@gmail.com","123-456-7890");
</input>
  </program>
        <p>A new object is created with the <c>new</c> keyword followed by the class name 
        (<c>new Class()</c>). When this code executes, it creates a new object of the specified class
            and calls a constructor, which has the same name as the class. For example, <c>new Date()</c> 
            creates and initializes a new object of the <c>Date</c> class.
            </p>

            
        <program language="java">
            <input>
                // To create a new object and call a constructor write:
                // ClassName variableName = new ClassName(parameters);
                Monster monster = new Monster(); // create a new Monster object
                String name = "Ada Lovelance";
                Student aStudent = new Student(name); // create a new Student object
</input>
        </program>
    </introduction>
    <subsection xml:id="_overloading-constructors">
        <title>Overloading Constructors</title>
        <p>There can be more than one constructor defined in a class. This is called <term>
            overloading</term> the constructor. There is usually a constructor that has no
            parameters (nothing inside the parentheses following the name of the constructor) like
            the <c>Monster()</c> constructor above. This is also called the <term>no-argument
            constructor</term>. The <term>no-argument</term> constructor usually sets the attributes
            of the object to default values.</p>
        <p>There can also be other constructors that take parameters like the <c>Student(name)</c>
            constructor call above. A <term>parameter</term> (also called <term>actual parameter</term>
            or <term>argument</term>) is a value that is passed into a constructor. It can be used
            to initialize the attribute of an object.</p>
        

    </subsection>
    <subsection xml:id="_object-variables-and-references">
        <title>Object Variables and References</title>
        <p>You can also declare an <term>object variable</term> and initialize it to <term>null</term>
            (<c>Monster m1 = null;</c>). An object variable holds a <term>reference</term> to an
            object. A <term>reference</term> is a way to find the object in memory. It is like a
            tracking number that you can use to track the location of a package.</p>

        <p>Watch the video below about null.</p>

        <video xml:id="_5fpjgXAV2BU" youtube="5fpjgXAV2BU" width="76%" />
        <p>The code <c>Monster m1 = null;</c> creates a variable <c>m1</c> that refers to a <c>Monster</c>
            object, but the <c>null</c> means that it doesn't refer to an object yet. You could
            later create the object and set the object variable to refer to that new object 
            (<c>m1 = new Monster()</c>). Or more commonly, you can declare an object variable and
            initialize it in the same line of code (<c>Monster m2 = new Monster();</c>).</p>
       
    </subsection>
    <subsection xml:id="_constructor-signatures">
        <title>Constructor Signatures</title>

        <p>When you use a class that someone has already written for you in a <term>library</term>
            that you can import you can look up how to use the
            constructors and methods in the documentation for that
            class. The documentation will list the <term>signatures</term> (or headers) of the
            constructors or methods which will tell you their name and parameter list. The <term>parameter
            list</term>, in the <term>header</term> of a constructor, lists the <term>formal
            parameters</term>, declaring the variables that will be passed in as values and their
            data types.</p>
        <p>Constructors are <term>overloaded</term> when there are multiple constructors, but the
            constructors have different signatures. They can differ in the number, type, and/or
            order of parameters. 
            </p>
  


        <p>This is an example of a class definition for a class called <c>Date</c>, you should be
            able to pick out the attributes (instance variables) and the constructors and know how
            to use them.</p>
        <figure align="center" xml:id="id4">
            <caption xmlns:c="https://www.sphinx-doc.org/"
                xmlns:changeset="https://www.sphinx-doc.org/"
                xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/"
                xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/"
                xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/"
                xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure
                4: A Date class showing attributes and constructors</caption>
            <image source="ch-sync/DateClass.png" width="80%"
                alt="A Date class showing attributes and constructors" />
        </figure>
 

       
    </subsection>
    <subsection xml:id="formal-and-actual-parameters">
        <title>Formal and Actual Parameters</title>
        <p>When a constructor like <c>Date(2005,9,1)</c> is called, the <term>formal parameters</term>,
            (year, month, day), are set to copies of the <term>actual parameters</term> (or <term>
            arguments</term>), which are (2005,9,1). This is <term>call by value</term> which means
            that copies of the actual parameter values are passed to the constructor. These values
            are used to initialize the object's attributes.</p>
        <figure align="center" xml:id="id5">
            <caption xmlns:c="https://www.sphinx-doc.org/"
                xmlns:changeset="https://www.sphinx-doc.org/"
                xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/"
                xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/"
                xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/"
                xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure
                5: Parameter Mapping</caption>
            <image source="ch-sync/parameterMappingDate.png" width="NaN%"
                alt="Parameter Mapping" />
        </figure>
        <p>The type of the values being passed in as arguments have to match the type of the formal
            parameter variables. We cannot give a constructor a <c>String</c> object when it is
            expecting an <c>int</c>. The order of the arguments also matters. If you mix up the
            month and the day in the <c>Date</c> constructor, you will get a completely different
            date, for example January 9th (1/9) instead of Sept. 1st (9/1).</p>
       


    </subsection>
    <subsection xml:id="_summary-1736653188">
        <title>Summary</title>
        <p>
            <ul>
                <li>
                    <p><term>Constructors</term> initialize the attributes in newly created objects.
                        They have the same name as the class.</p>
                </li>
                <li>
                    <p>A <term>constructor signature</term> is the constructor name followed by the
                        parameter list which is a list of the types of the parameters and the
                        variable names used to refer to them in the constructor.</p>
                </li>
                <li>
                    <p><term>Overloading</term> is when there is more than one constructor. They
                        must differ in the number, type, or order of parameters.</p>
                </li>
                <li>
                    <p><term>New</term> is a keyword that is used to create a new object of a class.
                        The syntax is <c>new ClassName()</c>. It creates a new object of the
                        specified class and calls a constructor.</p>
                </li>
                <li>
                    <p>A <term>no-argument constructor</term> is a constructor that doesn't take any
                        passed in values (arguments).</p>
                </li>
                <li>
                    <p><term>Parameters</term> allow values to be passed to the constructor to
                        initialize the newly created object's attributes.</p>
                </li>
                <li>
                    <p>The <term>parameter list</term>, in the header of a constructor, is a list of
                        the type of the value being passed and a variable name. These variables are
                        called the <term>formal parameters</term>.</p>
                </li>
                <li>
                    <p><term>Actual parameters</term> are the values being passed to a constructor.
                        The formal parameters are set to a copy of the value of the actual
                        parameters.</p>
                </li>
                <li>
                    <p><term>Formal parameters</term> are the specification of the parameters in the
                        constructor header. In Java this is a list of the type and name for each
                        parameter (<c>World(int width, int height</c>).</p>
                </li>
                <li>
                    <p><term>Call by value</term> means that when you pass a value to a constructor
                        or method it passes a copy of the value.</p>
                </li>
            </ul>
        </p>
    </subsection>
    <subsection xml:id="_ap-practice-1736653034">
        <title>Practice</title>

          <exercise label="overload_const_1">
            <statement>

                <p>Which of these is overloading?</p>

            </statement>
            <choices>

                <choice>
                    <statement>
                        <p>When a constructor takes one parameter.</p>
                    </statement>
                    <feedback>
                        <p>For a constructor to be overloaded there must be more than one
                            constructor.</p>
                    </feedback>
                </choice>

                <choice>
                    <statement>
                        <p>When a constructor takes more than one parameter.</p>
                    </statement>
                    <feedback>
                        <p>For a constructor to be overloaded there must be more than one
                            constructor.</p>
                    </feedback>
                </choice>

                <choice>
                    <statement>
                        <p>When one constructor is defined in a class.</p>
                    </statement>
                    <feedback>
                        <p>For a constructor to be overloaded there must be more than one
                            constructor.</p>
                    </feedback>
                </choice>

                <choice correct="yes">
                    <statement>
                        <p>When more than one constructor is defined in a class.</p>
                    </statement>
                    <feedback>
                        <p>Overloading means that there is more than one constructor. The parameter
                            lists must differ in either number, order, or type of parameters.</p>
                    </feedback>
                </choice>
            </choices>

        </exercise>
 <exercise label="date_constructor">
            <statement>
                <p>Click on the constructor headers (signatures)</p>
            </statement>
            <feedback>
                <p>Constructors are public and have the same name as the class. Click on the
                    constructor headers which are the first line of the constructors showing their
                    name and parameters.</p>
            </feedback>
            <areas>
                <cline><area correct="no">public class Date {</area>
                </cline>
                <cline />
                <cline><area correct="no">private int year;</area>
                </cline>
                <cline><area correct="no">private int month;</area>
                </cline>
                <cline><area correct="no">private int day;</area>
                </cline>
                <cline />
                <cline> <area correct="yes">public Date() </area>
                </cline>
                <cline><area correct="no">{ /** Implementation not shown */ }</area>
                </cline>
                <cline />
                <cline><area correct="yes">public Date(int year, int month, int day) </area>
                </cline>
                <cline><area correct="no">{ /** Implementation not shown */ }</area>
                </cline>
                <cline />
                <cline><area correct="no">public void print() </area>
                </cline>
                <cline><area correct="no">{ /** Implementation not shown */ }</area>
                </cline>
                <cline />
                <cline><area correct="no">}</area>
                </cline>
            </areas>
        </exercise>
        <exercise label="DateClass1">
            <statement>

                <p> Given the <c>Date</c> class in the figure above and assuming that months
                    in the <c>Date</c> class are numbered starting at 1, which of the following code
                    segments will create a <c>Date</c> object for the date September 20, 2020 using
                    the correct constructor?</p>

            </statement>
            <choices>

                <choice>
                    <statement>
                        <p>Date d = new Date();</p>
                    </statement>
                    <feedback>
                        <p>This would initialize the date attributes to today's date according to
                            the constructor comment above, which might not be Sept. 20, 2020.</p>
                    </feedback>
                </choice>

                <choice>
                    <statement>
                        <p>Date d = new Date(9,20);</p>
                    </statement>
                    <feedback>
                        <p>There is no Date constructor that takes 2 parameters according to the
                            figure above.</p>
                    </feedback>
                </choice>

                <choice>
                    <statement>
                        <p>Date d = new Date(9,20,2020);</p>
                    </statement>
                    <feedback>
                        <p>The comment for the second constructor in the Date class above says that
                            the first parameter must be the year.</p>
                    </feedback>
                </choice>

                <choice correct="yes">
                    <statement>
                        <p>Date d = new Date(2020,9,20);</p>
                    </statement>
                    <feedback>
                        <p>This matches the second constructor above with the parameters year,
                            month, day.</p>
                    </feedback>
                </choice>

                <choice>
                    <statement>
                        <p>Date d = new Date(2020,20,9);</p>
                    </statement>
                    <feedback>
                        <p>Make sure the order of the parameters match the constructor signature
                            above.</p>
                    </feedback>
                </choice>
            </choices>

        </exercise>

        <exercise label="AP2-2-1">
            <statement>

                <p>Consider the following class. Which of the following successfully creates a new
                    Cat object?</p>
                <blockquote>
                    <program language="java">
                        <input>
                            public class Cat
                            {
                            private String color;
                            private String breed;
                            private boolean isHungry;

                            public Cat()
                            {
                            color = "unknown";
                            breed = "unknown";
                            isHungry = false;
                            }

                            public Cat(String c, String b, boolean h)
                            {
                            color = c;
                            breed = b;
                            isHungry = h;
                            }
                            }

                            I. Cat a = new Cat();
                            II. Cat b = new Cat("Shorthair", true);
                            III. String color = "orange";
                            boolean hungry = false;
                            Cat c = new Cat(color, "Tabby", hungry);
</input>
                    </program>
                </blockquote>

            </statement>
            <choices>

                <choice>
                    <statement>
                        <p>I only</p>
                    </statement>
                    <feedback>
                        <p>I is one of the correct constructors but the second constructor can also
                            be used.</p>
                    </feedback>
                </choice>

                <choice>
                    <statement>
                        <p>I and II</p>
                    </statement>
                    <feedback>
                        <p>II is not correct because there is no Cat constructor that takes 2
                            parameters.</p>
                    </feedback>
                </choice>

                <choice correct="yes">
                    <statement>
                        <p>I and III</p>
                    </statement>
                    <feedback>
                        <p>I and III call the correct constructors.</p>
                    </feedback>
                </choice>

                <choice>
                    <statement>
                        <p>I, II, and III</p>
                    </statement>
                    <feedback>
                        <p>II is not correct because there is no Cat constructor that takes 2
                            parameters.</p>
                    </feedback>
                </choice>

                <choice>
                    <statement>
                        <p>II and III</p>
                    </statement>
                    <feedback>
                        <p>II is not correct because there is no Cat constructor that takes 2
                            parameters.</p>
                    </feedback>
                </choice>
            </choices>

        </exercise>

        <exercise label="AP2-2-2">
            <statement>

                <p>Consider the following class. Which of the following code segments will construct
                    a Movie object m with a title of “Lion King” and rating of 8.0?</p>
                <program language="java">
                    <input>
                        public class Movie
                        {
                        private String title;
                        private String director;
                        private double rating;
                        private boolean inTheaters;

                        public Movie(String t, String d, double r)
                        {
                        title = t;
                        director = d;
                        rating = r;
                        inTheaters = false;
                        }

                        public Movie(String t)
                        {
                        title = t;
                        director = "unknown";
                        rating = 0.0;
                        inTheaters = false;
                        }
                        }
</input>
                </program>

            </statement>
            <choices>

                <choice>
                    <statement>
                        <p>Movie m = new Movie(8.0, "Lion King");</p>
                    </statement>
                    <feedback>
                        <p>There is no Movie constructor with 2 parameters.</p>
                    </feedback>
                </choice>

                <choice>
                    <statement>
                        <p>Movie m = Movie("Lion King", 8.0);</p>
                    </statement>
                    <feedback>
                        <p>There is no Movie constructor with 2 parameters.</p>
                    </feedback>
                </choice>

                <choice>
                    <statement>
                        <p>Movie m = new Movie();</p>
                    </statement>
                    <feedback>
                        <p>This creates a Movie object but it does not have the correct title and
                            rating.</p>
                    </feedback>
                </choice>

                <choice correct="yes">
                    <statement>
                        <p>Movie m = new Movie("Lion King", "Disney", 8.0);</p>
                    </statement>
                    <feedback>
                        <p>This creates a Movie object with the correct title and rating.</p>
                    </feedback>
                </choice>

                <choice>
                    <statement>
                        <p>Movie m = new Movie("Lion King");</p>
                    </statement>
                    <feedback>
                        <p>This creates a Movie object but it does not have a rating of 8.0.</p>
                    </feedback>
                </choice>
            </choices>

        </exercise>
    </subsection>
</section>
