<?xml version="1.0"?>
<!-- Generated by Docutils 0.19 -->
<section xml:id="calling-methods-that-return-values">
  <title>Calling Methods that Return Values</title>
  <introduction>
    <p>If a method is a <term>void method</term> and has <term>void</term> as its return type, like most of the methods we have seen so far, 
    that means that it does not return anything. But some methods <term>return</term> a value back that the program can use.</p>
  </introduction>
  
        <p>When you use a method that returns a value, you need to save what it returns in a variable or use the value in some way for example by printing it out. 
        The data type of the variable must match the data type of the return value of the method. You can find out the return type of a method in its documentation. 
        It will be right before the method name, for example <em>int[] getPosition()</em> means getPosition will return an int array (an array of integer numbers).</p>
            <note>
                <p>A common error is forgetting to do something with the value returned from a method. 
                When you call a method that returns a value, you should do something with that value like saving it into a variable or printing it out.</p>
            </note>

  <subsection xml:id="_methods-with-arguments-and-return-values">
            <title>Methods with Arguments and Return Values</title>
            <p>Methods that take arguments and return values are like mathematical functions. Given some input, they return a value. For example, a square(x) method would take an argument x and return its square by multiplying it by itself.</p>
            <figure align="center" xml:id="id1-1736653230"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 1: Method that takes arguments and returns a value</caption><image source="ch-sync/function.png" width="60%" alt="function"/></figure>
            <p>You should be able to trace through method calls like below. Notice that the <term>return statement</term> in a method returns the value that is indicated in the return type back to the calling method. 
            The calling method must save or use or print that value.</p>


            
        </subsection>

  <subsection xml:id="_summary-1736653183">
            <title>Summary</title>
            <p><ul>
                <li>
                    <p>Some methods return values.</p>
                </li>
                <li>
                    <p>To use the return value when calling a method, it must be stored in a variable or used as part of an expression. The variable data type must match the return type of the method.</p>
                </li>
            </ul></p>
        </subsection>
  <subsection xml:id="_ap-practice-1736653028-">
            <title>Practice</title>

    <exercise label="traceReturnMethods">
        <statement>

            <p>What does the following code print out?</p>
            <program language="java"><input>
public class MethodTrace
{
  public int square(int x)
  {
      return x*x;
  }
  public int divide(int x, int y)
  {
        return x/y;
  }
  public static void main(String[] args) {
      MethodTrace traceObj = new MethodTrace();
      System.out.println( traceObj.square(2) + traceObj.divide(6,2) );
  }
 }
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>5</p>
                </statement>
                <feedback>
                    <p>Make sure you call both methods and compute the square of 2 and then add the results.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>7</p>
                </statement>
                <feedback>
                    <p>Yes, square(2) returns 4 which is added to divide(6,2) which returns 3. The total of 4 + 3 is 7.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>4 3</p>
                </statement>
                <feedback>
                    <p>Make sure you add the results before printing it out.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>2 3</p>
                </statement>
                <feedback>
                    <p>Make sure you square(2) and add the results before printint it out.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Does not compile.</p>
                </statement>
                <feedback>
                    <p>Try the code in an active code window.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
            <p>Try this <raw format="html" xml:space="preserve"><a href="http://www.pythontutor.com/visualize.html#code=public%20class%20MethodTrace%20%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20public%20int%20square%28int%20x%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20x*x%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20public%20int%20divide%28int%20x,%20int%20y%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20x/y%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20MethodTrace%20traceObj%20%3D%20new%20MethodTrace%28%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20System.out.println%28%20traceObj.square%282%29%20%2B%20traceObj.divide%286,2%29%20%29%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%7D&amp;cumulative=false&amp;curInstr=16&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false" target="_blank" style="text-decoration:underline">visualization</a></raw> to see this code in action.</p>

    <exercise label="AP2-5-1">
        <statement>

            <p>Consider the following method.</p>
            <program language="java"><input>
public double calculatePizzaBoxes(int numOfPeople, double slicesPerBox)
{ /*implementation not shown */}
</input></program>
            <p>Which of the following lines of code, if located in a method in the same class as calculatePizzaBoxes, will compile without an error?</p>
</statement><choices><choice><statement id="AP2-5-1_opt_a">            <p>int result = calculatePizzaBoxes(45, 9.0);</p>
</statement><feedback id="AP2-5-1_opt_a">
            <p>The method calculatePizzaBoxes returns a double value that cannot be saved into an int variable.</p>
</feedback></choice><choice><statement id="AP2-5-1_opt_b">            <p>double result = calculatePizzaBoxes(45.0, 9.0);</p>
</statement><feedback id="AP2-5-1_opt_b">
            <p>The method calculatePizzaBoxes has an int parameter that cannot hold a double value 45.0.</p>
</feedback></choice><choice><statement id="AP2-5-1_opt_c">            <p>int result = calculatePizzaBoxes(45.0, 9);</p>
</statement><feedback id="AP2-5-1_opt_c">
            <p>The method calculatePizzaBoxes has an int parameter that cannot hold a double value 45.0. Note that the int 9 can be passed into a double parameter.</p>
</feedback></choice><choice correct="yes"><statement id="AP2-5-1_opt_d">            <p>double result = calculatePizzaBoxes(45, 9.0);</p>
</statement><feedback id="AP2-5-1_opt_d">
            <p>The method calculatePizzaBoxes has an int and a double parameter and returns a double result.</p>
</feedback></choice><choice><statement id="AP2-5-1_opt_e">            <p>result = calculatePizzaBoxes(45, 9);</p>
</statement><feedback id="AP2-5-1_opt_e">
            <p>The variable result has not been declared (with an appropriate data type).</p>
</feedback></choice></choices>
    </exercise>

    <exercise label="AP2-5-2">
        <statement>

            <p>Consider the following class definition.</p>
            <program language="java"><input>
public class Liquid
{
    private double boilingPoint;
    private double freezingPoint;
    private double currentTemp;

    public Liquid()
    {
        currentTemp = 50;
    }

    public void lowerTemp()
    {
        currentTemp -= 10;
    }

    public double getTemp()
    {
        return currentTemp;
    }
}
</input></program>
            <p>Assume that the following code segment appears in a class other than Liquid.</p>
            <program language="java"><input>
Liquid water = new Liquid();
water.lowerTemp();
System.out.println(water.getTemp());
</input></program>
            <p>What is printed as a result of executing the code segment?</p>
</statement><choices><choice><statement id="AP2-5-2_opt_a">            <p>-10</p>
</statement><feedback id="AP2-5-2_opt_a">
            <p>The Liquid() constructor sets the currentTemp instance variable to 50 and the lowerTemp() method subtracts 10 from it.</p>
</feedback></choice><choice><statement id="AP2-5-2_opt_b">            <p>50</p>
</statement><feedback id="AP2-5-2_opt_b">
            <p>The Liquid() constructor sets the currentTemp instance variable to 50 and the lowerTemp() method subtracts 10 from it.</p>
</feedback></choice><choice><statement id="AP2-5-2_opt_c">            <p>water.getTemp()</p>
</statement><feedback id="AP2-5-2_opt_c">
            <p>The System.out.println will print the value returned from water.getTemp().</p>
</feedback></choice><choice><statement id="AP2-5-2_opt_d">            <p>The code will not compile.</p>
</statement><feedback id="AP2-5-2_opt_d">
            <p>This code should compile.</p>
</feedback></choice><choice correct="yes"><statement id="AP2-5-2_opt_e">            <p>40.0</p>
</statement><feedback id="AP2-5-2_opt_e">
            <p>Correct, the Liquid() constructor sets the currentTemp instance variable to 50 and the lowerTemp() method subtracts 10 from it, and getTemp() returns the currentTemp value as a double.</p>
</feedback></choice></choices>
    </exercise>
        </subsection>
</section>
