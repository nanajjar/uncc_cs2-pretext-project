<?xml version="1.0"?>
<!-- Generated by Docutils 0.19 -->
<section>
    <title>Writing Constructors</title>
    <p xml:id="_index-0-39">In a previous unit, we learned how to create objects using constructor. 
    Objects are created in programs by declaring a variable of the class and using the keyword new followed by a call to a constructor. 
    <term>Constructors</term>  set the initial values for the object's instance variables.   
     For example, here is how we create a Person object.</p>
    <program language="java">
    <input>
// To create a new object, write:
// ClassName variableName = new ConstructorName(arguments);
Person p = new Person("Pat","pat@gmail.com","123-456-7890");
</input>
  </program>
    <p>In a new class, constructors are usually written after the instance variables and before any methods. 
    They typically start with <c>public</c> and then the <em>name</em> of the class: <c>public ClassName()</c>. 
    Unlike other methods, they do not have a return type, not even void, after the access modifier public.  
    They can take <term>parameters</term> (specified in parentheses) for the data which is used to initialize the instance variables.</p>
    <program language="java">
    <input>
public class ClassName
{

   /* Instance Variable Declarations -- not shown */

   /* Constructor - same name as Class, no return type */
   public ClassName()
   {
     /* Implementation not shown */
   }
}
</input>
  </program>
    <note>
            <p>Constructors must have the same name as the class! Constructors have no return type!</p>
        </note>
    <p>Classes usually have more than one constructor. There are usually at least 2 constructors:</p>
    <p>
    <ul>
            <li>
                <p>a constructor that takes no parameters</p>
            </li>
            <li>
                <p>a constructor that takes all the parameters necessary for initializing all the instance variables</p>
            </li>
        </ul>
  </p>
    <p>The attributes of an object and their values at a given time define that object's state. The constructors initialize the object's state by assigning initial values to the instance variables that the object has as its attributes.</p>
    <p>Here are two constructors that could be written for the Person class. Notice that the first one initializes name, email, and phoneNumber to empty string “” as the default values. Most programmers use “” as the default value for String variables and 0 as the default value for int and double variables.</p>
    <program language="java">
    <input>
// default constructor: initialize instance vars to default empty strings
public Person()
{
   name = "";
   email = "";
   phoneNumber = "";
}

// constructor: initialize all 3 instance variables to parameters
public Person(String initName, String initEmail, String initPhone)
{
   name = initName;
   email = initEmail;
   phoneNumber = initPhone;
}
</input>
  </program>
    <p>If there are no constructors written for a class, Java provides a no-argument <term>default constructor</term> where the instance variables are set to their default values. For int and double variables, the default value used is <term>0</term>, and for String and other object variables, the default is <term>null</term>. However, if you do write at least one constructor, Java will not generate the default constructor for you, so you should write at least a constructor with no parameters and one with many parameters.</p>
    <p>Constructors are used to set the initial state of an object by initializing its instance variables. 
    The examples above have instance variables that are primitive types, but you can have other objects, reference types, as instance variables. 
    For example, a Person class could have an Address object as an instance variable, and the Address class could have String instance variables for the street, city, and state.</p>
    <note>When you pass object references as parameters to constructors or methods, they become aliases for the original object 
    and can change it. If a constructor has an object instance variable, it can copy the referenced object in the parameter using 
    new and the constructor of the referenced object like below so that it does not change the state of the original object. 
    You will see more examples like this in later lessons.</note>
    <program language="java">
    <input>
public class Person
{
  private String name;
  private Address addr; //Assumes an Address class is already defined

  // constructor: initialize instance variable and call Address constructor to make a copy
  public Person(String initName, Address initAddr)
  {
     name = initName;
     addr = new Address(initAddr.getStreet(),
                initAddr.getCity(), initAddr.getState());
  }
 }
</input>
  </program>

  <subsection xml:id="_summary-30">
            <title>Summary</title>
            <p><ul>
                <li>
                    <p><term>Constructors</term> are used to set the initial state of an object, which includes initial values for all instance variables.</p>
                </li>
                <li>
                    <p>When no constructor is written, Java provides a no-argument <term>default constructor</term>, and the instance variables are set to their default values (0 for int and double, null for objects like String).</p>
                </li>
                <li>
                    <p>Constructor parameters are local variables to the constructor and provide data to initialize instance variables.</p>
                </li>
            </ul></p>
        </subsection>
  <subsection xml:id="sec_ap-practice-7">
            <title>Practice</title>

    <exercise label="AP5-2-1">
        <statement>

            <p>Consider the definition of the Cat class below. The class uses the instance variable isSenior to indicate whether a cat is old enough to be considered a senior cat or not.</p>
            <program language="java"><input>
public class Cat
{
    private String name;
    private int age;
    private boolean isSenior;
    public Cat(String n, int a)
    {
        name = n;
        age = a;
        if (age &gt;= 10)
        {
            isSenior = true;
        }
        else
        {
            isSenior = false;
        }
    }
}
</input></program>
            <p>Which of the following statements will create a Cat object that represents a cat that is considered a senior cat?</p>
</statement><choices><choice><statement id="AP5-2-1_opt_a">            <p>Cat c = new Cat (“Oliver”, 7);</p>
</statement><feedback id="AP5-2-1_opt_a">
            <p>The age 7 is less than 10, so this cat would not be considered a senior cat.</p>
</feedback></choice><choice><statement id="AP5-2-1_opt_b">            <p>Cat c = new Cat (“Max”, “15”);</p>
</statement><feedback id="AP5-2-1_opt_b">
            <p>An integer should be passed in as the second parameter, not a string.</p>
</feedback></choice><choice><statement id="AP5-2-1_opt_c">            <p>Cat c = new Cat (“Spots”, true);</p>
</statement><feedback id="AP5-2-1_opt_c">
            <p>An integer should be passed in as the second parameter, not a boolean.</p>
</feedback></choice><choice correct="yes"><statement id="AP5-2-1_opt_d">            <p>Cat c = new Cat (“Whiskers”, 10);</p>
</statement><feedback id="AP5-2-1_opt_d">
            <p>Correct!</p>
</feedback></choice><choice><statement id="AP5-2-1_opt_e">            <p>Cat c = new Cat (“Bella”, isSenior);</p>
</statement><feedback id="AP5-2-1_opt_e">
            <p>An integer should be passed in as the second parameter and isSenior would be undefined outside of the class.</p>
</feedback></choice></choices>
    </exercise>

    <exercise label="AP5-2-2">
        <statement>

            <p>Consider the following class definition. Each object of the class Cat will store the cat's name as name, the cat's age as age, and the number of kittens the cat has as kittens. Which of the following code segments, found in a class other than Cat, can be used to create a cat that is 5 years old with no kittens?</p>
            <program language="java"><input>
public class Cat
{
    private String name;
    private int age;
    private int kittens;

    public Cat(String n, int a, int k)
    {
        name = n;
        age = a;
        kittens = k;
    }
    public Cat(String n, int a)
    {
        name = n;
        age = a;
        kittens = 0;
    }
    /* Other methods not shown */
}

I.   Cat c = new Cat("Sprinkles", 5, 0);
II.  Cat c = new Cat("Lucy", 0, 5);
III. Cat c = new Cat("Luna", 5);
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>I only</p>
                </statement>
                <feedback>
                    <p>Option III can also create a correct Cat instance.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>II only</p>
                </statement>
                <feedback>
                    <p>Option II will create a cat that is 0 years old with 5 kittens.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>III only</p>
                </statement>
                <feedback>
                    <p>Option I can also create a correct Cat instance.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>I and III only</p>
                </statement>
                <feedback>
                    <p>Good job!</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>I, II and III</p>
                </statement>
                <feedback>
                    <p>Option II will create a cat that is 0 years old with 5 kittens.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="AP5-2-3">
        <statement>

            <p>Consider the following class definition.</p>
            <program language="java"><input>
public class Cat
{
    private String color;
    private boolean isHungry;
    /* missing constructor */
}
</input></program>
            <p>The following statement appears in a method in a class other than Cat. It is intended to create a new Cat object c with its attributes set to “black” and true. Which of the following can be used to replace  <term>missing constructor code</term> in the class definition so that the object c below is correctly created?</p>
            <program language="java"><input>
Cat c = new Cat("black", true);
</input></program>
</statement><choices><choice><statement id="AP5-2-3_opt_a">            <program language="java"><input>
public Cat(String c, boolean h)
{
    c = "black";
    h = true;
}
</input></program>
</statement><feedback id="AP5-2-3_opt_a">
            <p>The constructor should be changing the instance variables, not the local variables.</p>
</feedback></choice><choice><statement id="AP5-2-3_opt_b">            <program language="java"><input>
public Cat(String c, boolean h)
{
    c = "black";
    h = "true";
}
</input></program>
</statement><feedback id="AP5-2-3_opt_b">
            <p>The constructor should be changing the instance variables, not the local variables.</p>
</feedback></choice><choice><statement id="AP5-2-3_opt_c">            <program language="java"><input>
public Cat(String c, boolean h)
{
    c = color;
    h = isHungry;
}
</input></program>
</statement><feedback id="AP5-2-3_opt_c">
            <p>The constructor should be changing the instance variables, not the local variables.</p>
</feedback></choice><choice><statement id="AP5-2-3_opt_d">            <program language="java"><input>
public Cat(String c, boolean h)
{
    color = black;
    isHungry = true;
}
</input></program>
</statement><feedback id="AP5-2-3_opt_d">
            <p>The constructor should be using  the local variables to set the instance variables.</p>
</feedback></choice><choice correct="yes"><statement id="AP5-2-3_opt_e">            <program language="java"><input>
public Cat(String c, boolean h)
{
    color = c;
    isHungry = h;
}
</input></program>
</statement><feedback id="AP5-2-3_opt_e">
            <p>Correct!</p>
</feedback></choice></choices>
    </exercise>
    <exercise label="name_constructor">
    <statement><p>Click on all the lines of code that are part of constructors in the following class.</p></statement>
<feedback><p>Constructors are public and have the same name as the class.</p></feedback>
<areas>
<cline><area correct="no">public class Name {</area></cline>
<cline/>
<cline>    <area correct="no">private String first;</area></cline>
<cline>    <area correct="no">private String last;</area></cline>
<cline/>
<cline>    <area correct="yes">public Name(String theFirst, String theLast) {</area></cline>
<cline>        <area correct="yes">first = theFirst;</area></cline>
<cline>        <area correct="yes">last = theLast;</area></cline>
<cline>     <area correct="yes">}</area></cline>
<cline/>
<cline>     <area correct="no">public void setFirst(String theFirst) {</area></cline>
<cline>        <area correct="no">first = theFirst;</area></cline>
<cline>     <area correct="no">}</area></cline>
<cline/>
<cline>     <area correct="no">public void setLast(String theLast) {</area></cline>
<cline>        <area correct="no">last = theLast;</area></cline>
<cline>     <area correct="no">}</area></cline>
<cline/>
<cline><area correct="no">}</area></cline>
</areas></exercise>
    <exercise label="qsse_5">
        <statement>

        <p>What best describes the purpose of a class's constructor?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>Determines the amount of space needed for an object and creates the object</p>
                </statement>
                <feedback>
                    <p>The object is already created before the constructor is called but the constructor initializes the instance variables.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Names the new object</p>
                </statement>
                <feedback>
                    <p>Constructors do not name the object.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Return to free storage all the memory used by this instance of the class.</p>
                </statement>
                <feedback>
                    <p>Constructors do not free any memory. In Java the freeing of memory is done when the object is no longer referenced.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>Initialize the instance variables in the object</p>
                </statement>
                <feedback>
                    <p>A constructor  initializes the instance variables to their default values or in the case of a parameterized constructor, to the values passed in to the constructor.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    <exercise label="class-Fraction">
    <statement>
        <p>The following class defines a Fraction with the instance variables numerator and denominator. It uses 2 constructors. Note that this constructor sets the default instance variable values to 1 rather than 0 – so we don't end up with divide by zero. Try to guess what it will print before you run it.  Hint!  Remember to start with the main method! You can also view it in the <raw format="html" xml:space="preserve"><a href="http://www.pythontutor.com/visualize.html#code=%20%20public%20class%20Fraction%0A%20%20%7B%0A%20%20%20%20%20//%20%20instance%20variables%0A%20%20%20%20%20private%20int%20numerator%3B%0A%20%20%20%20%20private%20int%20denominator%3B%0A%20%20%20%20%20%0A%20%20%20%20%20//%20constructor%3A%20set%20instance%20variables%20to%20default%20values%0A%20%20%20%20%20public%20Fraction%28%29%0A%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20numerator%20%3D%201%3B%0A%20%20%20%20%20%20%20%20denominator%20%3D%201%3B%0A%20%20%20%20%20%7D%0A%20%20%20%20%20%0A%20%20%20%20%20//%20constructor%3A%20set%20instance%20variables%20to%20init%20parameters%0A%20%20%20%20%20public%20Fraction%28int%20initNumerator,%20int%20initDenominator%29%0A%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20numerator%20%3D%20initNumerator%3B%0A%20%20%20%20%20%20%20%20denominator%20%3D%20initDenominator%3B%0A%20%20%20%20%20%7D%0A%20%20%20%20%20%0A%20%20%20%20%20//%20Print%20fraction%0A%20%20%20%20%20public%20void%20print%28%29%0A%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20System.out.println%28numerator%20%2B%20%22/%22%20%2B%20denominator%29%3B%0A%20%20%20%20%20%7D%0A%20%20%20%20%20%0A%20%20%20%20%20//%20main%20method%20for%20testing%0A%20%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%0A%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20Fraction%20f1%20%3D%20new%20Fraction%28%29%3B%0A%20%20%20%20%20%20%20%20Fraction%20f2%20%3D%20new%20Fraction%281,2%29%3B%0A%20%20%20%20%20%20%20%20//%20What%20will%20these%20print%20out%3F%0A%20%20%20%20%20%20%20%20f1.print%28%29%3B%0A%20%20%20%20%20%20%20%20f2.print%28%29%3B%0A%20%20%20%20%20%7D%0A%20%20%7D&amp;cumulative=false&amp;curInstr=28&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false&amp;curInstr=0" target="_blank"  style="text-decoration:underline">Java visualizer</a></raw> by clicking on the Code Lens button below.</p>

    </statement>
    <program xml:id="class-Fraction_editor" interactive="activecode" language="java">

        <input>
public class Fraction
{
   //  instance variables
   private int numerator;
   private int denominator;

   // constructor: set instance variables to default values
   public Fraction()
   {
      numerator = 1;
      denominator = 1;
   }

   // constructor: set instance variables to init parameters
   public Fraction(int initNumerator, int initDenominator)
   {
      numerator = initNumerator;
      denominator = initDenominator;
   }

   // Print fraction
   public void print()
   {
     System.out.println(numerator + "/" + denominator);
   }

   // main method for testing
   public static void main(String[] args)
   {
      Fraction f1 = new Fraction();
      Fraction f2 = new Fraction(1,2);
      // What will these print out?
      f1.print();
      f2.print();
   }
}
        </input>
<tests>
// Test Code for Lesson 5.2.0.1 - Fraction
  import static org.junit.Assert.*;
  import org.junit.After;
  import org.junit.Before;
  import org.junit.Test;

  import java.io.*;

  public class RunestoneTests extends CodeTestHelper
  {
      @Test
      public void test() throws IOException
      {
          String output = getMethodOutput("main");
          String expect = "1/1\n1/2";

          boolean passed = getResults(expect, output, "Running main", true);
          assertTrue(passed);
      }

  }
</tests>

    </program>
</exercise>
    <exercise label="class-Car">
    <statement>
        <p>The following class defines a Car with the instance variables model and year, for example a Honda 2010 car. However, some of the code is missing. Fill in the code for the 2 constructors that are numbered 1 and 2. And fill in the code to call the constructors in the main method numbered 3. The car1 object should test the first constructor with default values and the car2 object should test the second constructor to create a Honda 2010 car. Run your program and make sure it works and prints out the information for both cars.</p>

    </statement>
    <program xml:id="class-Car_editor" interactive="activecode" language="java">

        <input>
public class Car
{
   //  instance variables
   private String model;
   private int year;

   // constructor: set instance variables to default values
   public Car()
   {
       // 1. set the instance variables to default values "" and 2019


   }

   // constructor: set instance variables to init parameters
   public Car(String initModel, int initYear)
   {
       // 2. set the instance variables to the init parameter variables


   }

   // Print Car info
   public void print()
   {
     System.out.println("Car model: " + model);
     System.out.println("Car year: " + year);
   }

   // main method for testing
   public static void main(String[] args)
   {
       // 3. call the constructor to create 2 new Car objects
       // using the 2 constructors.
       // car1 will be the default values.
       // car2 should be a Honda 2010 car.
       Car car1 =
       Car car2 =

       car1.print();
       car2.print();
   }
}
        </input>
<tests>
// Test Code for Lesson 5.2.0 - Car
  import static org.junit.Assert.*;
  import org.junit.After;
  import org.junit.Before;
  import org.junit.Test;

  import java.io.*;

  public class RunestoneTests extends CodeTestHelper
  {
      @Test
      public void testMain() throws IOException
      {
          String output = getMethodOutput("main");
          String expect = "Car model: \nCar year: 2019\nCar model: Honda\nCar year: 2010";

          boolean passed = getResults(expect, output, "Running main");
          assertTrue(passed);
      }

  }
</tests>

    </program>
</exercise>
  </subsection>
</section>
