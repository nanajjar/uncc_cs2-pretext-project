<?xml version="1.0"?>
<!-- Generated by Docutils 0.19 -->
<section xml:id="while-loops">
    <title>While Loops</title>
    <image source="ch-sync/loops.png" width="NaN%"/>
    <p>When you play a song, you can set it to loop, which means that when it reaches the end it starts over at the beginning.  A <term>loop</term> in programming, also called <term>iteration</term> or <term>repetition</term>,  is a way to repeat one or more statements. If you didn't have loops to allow you to repeat code, your programs would get very long very quickly! Using a sequence of code, selection (ifs), and repetition (loops), the <term>control structures</term> in programming, you can construct an algorithm to solve almost any programming problem!</p>
    <p>A <c>while</c> loop executes the body of the loop as long as (or while) a Boolean condition is true.  When the condition is false, we exit the loop and continue with the statements that are after the body of the <c>while</c> loop.  If the condition is false the first time you check it, the body of the loop will not execute.</p>
    <p>Notice the <c>while</c> statement looks a lot like an <c>if</c> statement, but it runs more than once. The curly brackets { } are optional when there is just 1 statement following the condition, but required if there are more than 1 statement in the loop.</p>
    <program language="java">
      <input>
// if statements just run once if the condition is true
if (condition)
{
    statements;
}
// while statements are repeated while the condition is true
while (condition)
{
  statements;
}
</input>
    </program>
    
    <p>The following <url href="https://www.youtube.com/watch?v=Uw9mv53Jnfs" visual="https://www.youtube.com/watch?v=Uw9mv53Jnfs">video</url> introduces while loops.</p>
    <video xml:id="Uw9mv53Jnfs" youtube="Uw9mv53Jnfs" width="82%"/>
    <p>Here's what the flow of control looks like in a Java while loop. Notice that while the condition is true, the loop body is repeated.</p>
    <figure align="center" xml:id="id3-6">
      <caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 3: Control Flow in a while Loop</caption>
      <image source="ch-sync/WhileLoopFlow.png" width="NaN%"/>
    </figure>
  <subsection xml:id="_three-steps-to-writing-a-loop">
            <title>Three Steps to Writing a Loop</title>
            <p>The simplest loops are <term>counter-controlled loops</term> like below, where the <term>loop control variable</term> is a counter that controls how many times to repeat the loop. There are 3 steps to writing a loop using this loop control variable as seen below in a loop that counts from 1 to 10.</p>
            <figure align="center" xml:id="id4-3"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 4: Three Steps of Writing a Loop</caption><image source="ch-sync/loop3steps.png" width="NaN%"/></figure>
            <note>
                <p>Remember these 3 steps to writing a loop:</p>
                <p><ol marker="1">
                    <li>
                        <p>Initialize the loop variable (before the while loop)</p>
                    </li>
                    <li>
                        <p>Test the loop variable (in the loop header)</p>
                    </li>
                    <li>
                        <p>Change the loop variable (in the while loop body at the end)</p>
                    </li>
                </ol></p>
            </note>
    

<exercise label="whileloop">
    <statement>
            <p>Here is a while loop that counts from 1 to 5 that demonstrates the 3 steps of writing a loop. Can you change it to count from 2 to 10?</p>

    </statement>
    <program xml:id="whileloop_editor" interactive="activecode" language="java">

        <input>
public class LoopTest1
{
   public static void main(String[] args)
   {
     // 1. initialize the loop variable
     int count = 1;

     // 2. test the loop variable
     while (count &lt;= 5)
     {
        System.out.println(count);
        // 3. change the loop variable
        count++;
     }

   }
}
        </input>
<tests>
import static org.junit.Assert.*;
 import org.junit.*;;
 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
     @Test
     public void testMain() throws IOException
     {
         String output = getMethodOutput("main");
         String expect = "2\n3\n4\n5\n6\n7\n8\n9\n10\n";
         boolean passed = getResults(expect, output, "Expected output from main");
         assertTrue(passed);
     }
 }
</tests>

    </program>
</exercise>
            <p>Java doesn't require your code to be correctly indented (code moved to the right a few spaces) to make it clear what statements are part of the body of the loop, but it is standard practice to do so.</p>
            <note>
                <p>On the free response part of the exam, the reader will use the indention when determining the meaning of your code, even if you forget the open or close curly brace.</p>
            </note>
            <p><term>Practice</term></p>

    <exercise label="while1">
        <statement>

            <p>Consider the following code segment. Which of the following can be used as a replacement for the missing loop header so that the loop prints out “0 2 4 6 8 10”?</p>
            <program language="java"><input>
int count = 0;
/* missing loop header */
{
    System.out.print(count + " ");
    count += 2;
}
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>while (count == 10)</p>
                </statement>
                <feedback>
                    <p>This would not print out anything because count = 0 at the start of the loop, so it never equals 10.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>while (count &lt; 10)</p>
                </statement>
                <feedback>
                    <p>This would print out 0 2 4 6 8. Try it in the Active Code window above.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>while (count &lt;= 10)</p>
                </statement>
                <feedback>
                    <p>Yes, try it in the Active Code window above.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>while (count &gt; 10)</p>
                </statement>
                <feedback>
                    <p>This would not print out anything because count = 0 at the start of the loop, so it is not greater than 10.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
        </subsection>
  <subsection xml:id="_tracing-loops">
            <title>Tracing Loops</title>
            
            <p>A really important skill to develop is the ability to trace the values of variables and how they change during each iteration of a loop.</p>
            <p>You can create a tracing table that keeps track of the variable values each time through the loop as shown below.  This is very helpful on the exam. Studies have shown that students who create tables like this do much better on code tracing problems on multiple choice exams.</p>
            <figure align="center" xml:id="id5-2"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 5: A trace table showing the values of all of the variables each time through the loop.  Iteration 0 means before the loop.</caption><image source="ch-sync/traceTable.png" width="NaN%"/></figure>
            <p>Watch the following <raw format="html" xml:space="preserve"><a href="https://www.youtube.com/watch?v=TZss5ukwN8s" target="_blank">video</a></raw> for a tracing demo. When you are tracing through code, pretend to be the computer running the code line by line, repeating the code in the loop, and keeping track of the variable values and output.</p>

    <video xml:id="TZss5ukwN8s" youtube="TZss5ukwN8s" width="71%"/>
                
            <p> <term>Practice</term></p>

    <exercise label="while2">
        <statement>

            <p>Consider the following code segment. What is count's value after running this code segment? (To trace through the code, keep track of the variable count and its value through each iteration of the loop.)</p>
            <program language="java"><input>
int count = 1;
while (count &lt;= 10)
{
    count *= 2;
}
count = count - 10;
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>0</p>
                </statement>
                <feedback>
                    <p>Count is changed inside the loop and after the loop.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>1</p>
                </statement>
                <feedback>
                    <p>Count is changed inside the loop and after the loop.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>16</p>
                </statement>
                <feedback>
                    <p>Don't forget to subtract 10 from count after the loop.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>6</p>
                </statement>
                <feedback>
                    <p>Yes, the loop will keep multiplying count by 2 to get 2, 4, 8, 16 and then it subtracts 10 from 16 after the loop.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
            <p>Step through the code above with the <raw format="html" xml:space="preserve"><a href="http://www.pythontutor.com/visualize.html#code=public%20class%20TraceLoop%20%7B%0A%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%20%7B%0A%20%20%20%20%20%20int%20count%20%3D%201%3B%0A%20%20%20%20%20%20while%20%28count%20%3C%3D%2010%29%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20count%20*%3D%202%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20count%20%3D%20count%20-%2010%3B%0A%20%20%20%20%7D%0A%7D&amp;cumulative=false&amp;curInstr=16&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false" target="_blank">visualizer</a></raw>.</p>

    <exercise label="qlb_2_1">
        <statement>

            <p>What does the following code print? (To trace through the code, keep track of the variable x and its value, the iteration of the loop, and the output every time through the loop.)</p>
            <program language="java"><input>
int x = -5;
while (x &lt; 0)
{
   x++;
   System.out.print(x + " ");
}
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>5 4 3 2 1</p>
                </statement>
                <feedback>
                    <p>x is initialized (set) to -5 to start.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>-5 -4 -3 -2 -1</p>
                </statement>
                <feedback>
                    <p>x is incremented (x++) before the print statement executes.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>-4 -3 -2 -1 0</p>
                </statement>
                <feedback>
                    <p>x is set to -5 to start but then incremented by 1 so it first prints -4.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
        </subsection>
  <subsection xml:id="_common-errors-with-loops">
            <title>Common Errors with Loops</title>
            
            
            <p xml:id="_index-1-8">One common error with loops is <term>infinite loops</term>.  An infinite loop is one that never stops (the condition is always true).</p>
            <program language="java"><input>
// an infinite loop
while (true)
{
   System.out.println("This is a loop that never ends");
}
</input></program>
            <p>The infinite loop above is pretty obvious.  But, most infinite loops are accidental.  They usually occur because you forget to change the loop variable in the loop (step 3 of a loop).</p>
            <p>Another common error with loops is an <term>off-by-one error</term> where the loop runs one too many or one too few times. This is usually a problem with step 2 the test condition and using the incorrect relational operator &lt; or &lt;=.</p>

<exercise label="whileloopbugs">
    <statement>
            <p>The while loop should print out the numbers 1 to 8, but it has 2 errors that cause an infinite loop and an off-by-one error. Can you fix the errors? If you run an infinite loop, you may need to refresh the page to stop it (so make sure all active code windows on the page have been saved and click on Load History after refreshing).</p>

    </statement>
    <program xml:id="whileloopbugs_editor" interactive="activecode" language="java">

        <input>
public class LoopTest2
{
   public static void main(String[] args)
   {
     int count = 1;
     while (count &lt; 8)
     {
         System.out.println(count);
     }
   }
}
        </input>
<tests>
import static org.junit.Assert.*;
 import org.junit.*;;
 import java.io.*;

 public class RunestoneTests extends CodeTestHelper
 {
     public RunestoneTests() {
         super("LoopTest2");
     }

     @Test
     public void test1()
     {
         String output = getMethodOutput("main");
         String expect = "1\n2\n3\n4\n5\n6\n7\n8";

         boolean passed = getResults(expect, output, "Running main");
         assertTrue(passed);
     }
 }
</tests>

    </program>
</exercise>
        </subsection>
  <subsection xml:id="_input-controlled-loops">
            <title>Input-Controlled Loops</title>
            
            <p>You can use a <c>while</c> loop to repeat the body of the loop a certain number of times as shown above.  However, a <c>while</c> loop is typically used when you don't know how many times the loop will execute. It is often used for a <term>input-controlled loop</term> where the user's input indicates when to stop. For example, in the <raw format="html" xml:space="preserve"><a href="https://repl.it/@BerylHoffman/Magpie-ChatBot-Lab-v2" target="_blank">Magpie chatbot lab on repl.it</a></raw> below, the while loop stops when you type in “Bye”. The stopping value is often called the <term>sentinel value</term> for the loop. Notice that if you type in “Bye” right away, the loop will never run. If the loop condition evaluates to false initially, the loop body is not executed at all. Another way to stop the loop prematurely is to put in a return statement that makes it immediately return from the method.</p>
            <raw format="html" xml:space="preserve"><iframe height="700px" width="100%" style="max-width:90%; margin-left:5%" src="https://repl.it/@BerylHoffman/Magpie-ChatBot-Lab-v2?lite=true" scrolling="no" frameborder="no" allowtransparency="true" allowfullscreen="true" sandbox="allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals"></iframe></raw>
            
   </subsection>
  
  <subsection xml:id="_summary-23">
            <title>Summary</title>
            <p><ul>
                <li>
                    <p>Iteration statements (loops) change the flow of control by repeating a set of statements zero or more times until a condition is met.</p>
                </li>
                <li>
                    <p>Loops often have a <term>loop control variable</term> that is used in the boolean condition of the loop. Remember the 3 steps of writing a loop:</p>
                    <p><ul>
                        <li>
                            <p>Initialize the loop variable</p>
                        </li>
                        <li>
                            <p>Test the loop variable</p>
                        </li>
                        <li>
                            <p>Change the loop variable</p>
                        </li>
                    </ul></p>
                </li>
                <li>
                    <p>In loops, the Boolean expression is evaluated before each iteration of the loop body, including the first. When the expression evaluates to true, the loop body is executed. This continues until the expression evaluates to false which signals to exit the loop. If the Boolean expression evaluates to false initially, the loop body is not executed at all.</p>
                </li>
                <li>
                    <p>A loop is an <term>infinite loop</term> when the Boolean expression always evaluates to true so that the loop never ends.</p>
                </li>
                <li>
                    <p><term>Off by one</term> errors occur when the iteration statement loops one time too many or one time too few.</p>
                </li>
                <li>
                    <p>If the Boolean expression evaluates to false initially, the loop body is not executed at all.</p>
                </li>
                <li>
                    <p><term>Input-controlled loops</term> often use a <term>sentinel value</term> that is input by the user like “bye” or -1 as the condition for the loop to stop.</p>
                </li>
                <li>
                    <p>There are standard algorithms to compute a sum or average.</p>
                </li>
            </ul></p>
            
            
            
            
            
            
            
            
            
        </subsection>
</section>
