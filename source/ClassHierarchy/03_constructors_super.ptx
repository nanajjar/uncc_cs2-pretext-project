<section xml:id="constructors-and-super">
  <title>Constructors and the <c>super</c> Keyword</title>

  <!-- ==============================================
       3.1 Constructors and Initialization Order
       ============================================= -->
  <subsection xml:id="constructor-inheritance-order">
    <title>Constructor Chaining: Understanding Initialization Order</title>
    <p>When creating an object, Java requires that the superclass constructor runs before the subclass constructor. This ordering ensures that all inherited fields from the superclass are properly initialized before the subclass adds its specific functionality.</p>
    <p>For example, consider a game entity hierarchy:</p>
    <ul>
      <li>The superclass <c>Entity</c> initializes common fields such as <c>health</c> and <c>name</c>.</li>
      <li>The subclass <c>Monster</c> might add specific fields, like whether it is aggressive or passive.</li>
    </ul>
    <p>If the superclass constructor didn't run first, subclass methods might accidentally access uninitialized superclass fields, causing runtime errors or unpredictable behavior. Java strictly enforces that superclass initialization occurs before subclass initialization precisely to prevent these issues.</p>
    
    <p>Here's a concrete example illustrating what could go wrong if initialization order were reversed:</p>
    
    <program language="java">
      <code>public class Entity {
    protected int health;
    
    public Entity(int initialHealth) {
        health = initialHealth;
    }
    
    public void printHealth() {
        System.out.println("Health: " + health);
    }
}

public class Monster extends Entity {
    private boolean isAggressive;
    
    // Hypothetical situation if initialization order were reversed
    public Monster(int initialHealth, boolean aggressive) {
        // Imagine if Monster's initialization ran first
        isAggressive = aggressive;
        
        // The Monster might call methods using superclass fields
        printHealth();  // Would access uninitialized 'health' field!
        
        // Only after this would the superclass constructor run
        // super(initialHealth);  
    }
}</code>
    </program>
    
    <p>In this hypothetical scenario, <c>printHealth()</c> would be called before <c>health</c> is initialized by the superclass constructor, potentially causing a runtime error or printing an incorrect default value (0). By enforcing that superclass constructors run first, Java prevents these subtle initialization bugs.</p>
  </subsection>

  <!-- ==============================================
       3.2 Explicitly Calling Superclass Constructors
       ============================================= -->
  <subsection xml:id="using-super-explicitly">
    <title>Explicit Calls to the Superclass Constructor with <c>super()</c></title>
    <p>In Java, subclass constructors must always invoke a constructor from their superclass. Java implicitly calls a superclass constructor only if the superclass provides a no-argument constructor. If the superclass does not have a no-argument constructor, you must explicitly call its parameterized constructor using the <c>super(...)</c> keyword. Failing to do so results in a compile-time error.</p>
    <p>The syntax is straightforward:</p>
    <program language="java">
      <code>public SubclassName(parameters) {
    super(arguments);  // must be first line
    // subclass-specific initialization
}</code>
    </program>
    <p>Important notes:</p>
    <ul>
      <li>The call to <c>super(...)</c> <em>must</em> be the first line in the subclass constructor.</li>
      <li>If you omit <c>super(...)</c> when the superclass requires parameters, Java will issue a compile-time error.</li>
    </ul>
    <p>Here's a concrete, correct example:</p>
    <program language="java">
      <code>// Superclass: Entity.java
public class Entity {
    protected int health;

    public Entity(int initialHealth) {
        health = initialHealth;
    }
}

// Subclass: Monster.java
public class Monster extends Entity {
    private boolean isAggressive;

    public Monster(int initialHealth, boolean aggressive) {
        super(initialHealth);  // Explicit call required
        isAggressive = aggressive;
    }
}</code>
    </program>
    <p>If you forget to include the call to <c>super(initialHealth)</c>, Java produces a clear compile-time error:</p>
    <pre>Error: constructor Entity() not found</pre>
  </subsection>

  <!-- ==============================================
       3.3 Visualizing Constructor Chaining
       ============================================= -->
  <subsection xml:id="constructor-chaining-visual">
    <title>Visualizing Constructor Chaining</title>
    <p>To help visualize constructor chaining, let's enhance our previous example with explicit print statements. Observe carefully the order in which the constructors execute:</p>
    <program language="java">
      <code>// Superclass: Entity.java
public class Entity {
    protected int health;

    public Entity(int initialHealth) {
        health = initialHealth;
        System.out.println("Entity constructor: health set to " + health);
    }
}

// Subclass: Monster.java
public class Monster extends Entity {
    private boolean isAggressive;

    public Monster(int initialHealth, boolean aggressive) {
        super(initialHealth);
        isAggressive = aggressive;
        System.out.println("Monster constructor: isAggressive set to " + isAggressive);
    }
}

// Main.java
public class Main {
    public static void main(String[] args) {
        Monster goblin = new Monster(100, true);
    }
}</code>
    </program>
    <p>Running this code results in the following console output:</p>
    <pre>Entity constructor: health set to 100
Monster constructor: isAggressive set to true</pre>
    <p>This demonstrates explicitly that Java executes the superclass constructor first, initializing inherited fields, before running the subclass constructor.</p>
  </subsection>

  <!-- ==============================================
       3.4 Common Constructor Pitfalls
       ============================================= -->
  <subsection xml:id="constructor-pitfalls">
    <title>Common Pitfalls with Constructors and <c>super()</c></title>
    <p>Here are some frequent mistakes students encounter with constructors in inheritance hierarchies:</p>
    <ul>
      <li><term>Omitting explicit <c>super()</c> when required:</term> If the superclass lacks a no-argument constructor, forgetting to explicitly call <c>super(...)</c> leads to a compilation error.</li>
      <li><term>Incorrect placement of <c>super()</c>:</term> The <c>super(...)</c> call must always be the very first statement. Placing any other statement before it causes a compile-time error.</li>
      <li><term>Calling overridable methods in constructors:</term> This can lead to subtle bugs when subclasses override those methods before their fields are initialized.</li>
      <li><term>Overly complex constructor chains:</term> Long chains of constructor calls across multiple levels of inheritance can make code difficult to understand and maintain.</li>
    </ul>
    <p>Here's an example of incorrect constructor chaining that Java will reject:</p>
    <program language="java">
      <code>// Incorrect: will not compile
public class Monster extends Entity {
    private boolean isAggressive;

    public Monster(int initialHealth, boolean aggressive) {
        isAggressive = aggressive;  // Error: code before super()
        super(initialHealth);
    }
}</code>
    </program>
    <p>Compiler error:</p>
    <pre>Error: Call to super() must be first statement in constructor</pre>
    <p>Corrected example:</p>
    <program language="java">
      <code>// Corrected version
public class Monster extends Entity {
    private boolean isAggressive;

    public Monster(int initialHealth, boolean aggressive) {
        super(initialHealth);  // Correct placement
        isAggressive = aggressive;
    }
}</code>
    </program>
    
    <p>Here's another subtle issue to avoid - calling overridable methods from constructors:</p>
    
    <program language="java">
      <code>// Dangerous practice: calling overridable methods in constructor
public class Entity {
    protected int health;

    public Entity(int initialHealth) {
        health = initialHealth;
        initializeEntity();  // Dangerous if overridden by subclasses
    }
    
    protected void initializeEntity() {
        System.out.println("Entity initialized with health: " + health);
    }
}

public class Monster extends Entity {
    private int power;  // Not yet initialized when superclass constructor runs!

    public Monster(int initialHealth) {
        super(initialHealth);
        power = initialHealth / 2;
    }
    
    @Override
    protected void initializeEntity() {
        System.out.println("Monster initialized with health: " + health);
        System.out.println("Monster power ratio: " + (power / health));  // Bug! power is still 0
    }
}</code>
    </program>
    
    <p>In this example, when the <c>Entity</c> constructor calls <c>initializeEntity()</c>, Java uses the <c>Monster</c> version of the method (due to polymorphism). However, the <c>Monster</c> constructor hasn't yet run, so the <c>power</c> field is still at its default value of 0, potentially causing a division by zero error or incorrect calculations.</p>
  </subsection>
  
  <!-- ==============================================
       3.5 Constructor Design Best Practices (NEW)
       ============================================= -->
  <subsection xml:id="constructor-design-best-practices">
    <title>Constructor Design Best Practices</title>
    <p>Designing constructors in inheritance hierarchies requires care to maintain clarity, safety, and ease of maintenance. Here are key best practices:</p>
    
    <ul>
      <li><term>Keep constructors simple:</term> Constructors should primarily focus on initializing fields, not performing complex operations or business logic.</li>
      <li><term>Provide sensible defaults:</term> Include constructors with reasonable default values to make subclass creation easier.</li>
      <li><term>Use constructor overloading carefully:</term> Multiple constructors can improve usability but should be managed to avoid confusion.</li>
      <li><term>Avoid calling overridable methods:</term> As seen in the previous section, this can lead to unpredictable behavior.</li>
      <li><term>Document constructor requirements:</term> Clearly document what parameters are required for subclass constructors.</li>
    </ul>
    
    <p>Here's an example of a well-designed constructor hierarchy:</p>
    
    <program language="java">
      <code>public class Entity {
    protected String name;
    protected int health;
    protected int maxHealth;
    
    // Constructor with all parameters
    public Entity(String name, int maxHealth) {
        this.name = name;
        this.maxHealth = maxHealth;
        this.health = maxHealth;  // Start at full health
    }
    
    // Constructor with default health
    public Entity(String name) {
        this(name, 100);  // Default max health of 100
    }
}

public class Monster extends Entity {
    private boolean isAggressive;
    private int attackPower;
    
    // Full constructor
    public Monster(String name, int maxHealth, int attackPower, boolean isAggressive) {
        super(name, maxHealth);
        this.attackPower = attackPower;
        this.isAggressive = isAggressive;
    }
    
    // Simpler constructor with good defaults
    public Monster(String name, int maxHealth) {
        this(name, maxHealth, maxHealth / 4, true);  // Default attack = 1/4 of max health, aggressive by default
    }
    
    // Minimal constructor
    public Monster(String name) {
        super(name);  // Uses parent's default health of 100
        this.attackPower = 25;  // Default attack power
        this.isAggressive = true;  // Aggressive by default
    }
}</code>
    </program>
    
    <p>This design provides flexibility while maintaining simplicity:</p>
    <ul>
      <li>Multiple constructors cater to different creation scenarios</li>
      <li>Sensible defaults reduce the burden on developers creating subclasses</li>
      <li>Each constructor is focused only on initialization, not complex logic</li>
      <li>The constructors use chaining to avoid code duplication</li>
    </ul>
    
    <insight>
      <title>The Fragile Base Class Problem and Constructors</title>
      <p>One important reason to keep constructors simple and avoid overridable methods in them relates to the "fragile base class problem." This occurs when changes to a base class unexpectedly break subclasses.</p>
      <p>With constructors, this fragility is amplified because:</p>
      <ul>
        <li>Subclasses must work with whatever initialization the superclass performs</li>
        <li>Changes to superclass constructor behavior affect all subclasses, sometimes in subtle ways</li>
        <li>The initialization sequence is fixed and cannot be modified by subclasses</li>
      </ul>
      <p>By keeping constructors simple and predictable, you reduce the risk of breaking subclasses when the superclass evolves.</p>
    </insight>
  </subsection>

  <!-- ==============================================
       3.5 Exercises
       ============================================= -->
  <exercises>
    <exercise xml:id="constructor-chaining-order" type="multiplechoice">
      <title>Understanding Constructor Chaining</title>
      <statement>
        <p>Which statement correctly describes how Java executes constructors when creating a subclass object?</p>
      </statement>
      <choices>
        <choice correct="yes">
          <statement>The superclass constructor always executes first, followed by the subclass constructor.</statement>
          <feedback>Correct! Java enforces superclass initialization first to ensure that inherited fields are initialized before the subclass.</feedback>
        </choice>
        <choice>
          <statement>The subclass constructor executes first, followed by the superclass constructor.</statement>
          <feedback>Incorrect. If subclass constructors ran first, inherited fields could remain uninitialized, causing errors.</feedback>
        </choice>
        <choice>
          <statement>Only the subclass constructor runs, and superclass initialization is optional.</statement>
          <feedback>Incorrect. Java requires superclass initialization to ensure inherited fields are properly set.</feedback>
        </choice>
      </choices>
    </exercise>

    <exercise xml:id="writing-constructor-with-super" type="shortanswer">
      <title>Practice Writing a Subclass Constructor</title>
      <statement>
        <p>Given a superclass <c>Person</c> that requires a <c>name</c> parameter in its constructor, write a constructor for a subclass <c>Student</c>. The subclass constructor should take a <c>name</c> and an integer <c>studentId</c>. Remember to use <c>super(...)</c> correctly.</p>
      </statement>
      <solution>
        <program language="java">
          <code>public class Student extends Person {
    private int studentId;

    public Student(String name, int studentId) {
        super(name); // required explicit call to superclass constructor
        this.studentId = studentId;
    }
}</code>
        </program>
      </solution>
    </exercise>
    
    <exercise xml:id="constructor-design-scenario" type="shortanswer">
      <title>Improving Constructor Design</title>
      <statement>
        <p>Review the following constructor design and identify potential issues:</p>
        <program language="java">
          <code>public class Vehicle {
    protected int speed;
    protected String model;
    
    public Vehicle(String model) {
        this.model = model;
        startEngine(); // Calls overridable method
    }
    
    protected void startEngine() {
        System.out.println("Basic engine started");
    }
}

public class ElectricCar extends Vehicle {
    private int batteryLevel;
    
    public ElectricCar(String model) {
        super(model);
        batteryLevel = 100;
    }
    
    @Override
    protected void startEngine() {
        System.out.println("Battery level: " + batteryLevel);
        System.out.println("Electric motor initiated");
    }
}</code>
        </program>
        <p>What would happen when you create a new <c>ElectricCar</c>? Identify the issue and propose a better design.</p>
      </statement>
      <solution>
        <p>The issue is that the <c>Vehicle</c> constructor calls <c>startEngine()</c>, which is overridden by <c>ElectricCar</c>. When an <c>ElectricCar</c> is created, <c>startEngine()</c> is called before <c>batteryLevel</c> is initialized, leading to <c>batteryLevel</c> being 0 when printed. This is a classic example of calling an overridable method from a constructor.</p>
        <p>A better design would be:</p>
        <program language="java">
          <code>public class Vehicle {
    protected int speed;
    protected String model;
    
    public Vehicle(String model) {
        this.model = model;
        initializeVehicle(); // Using final method instead
    }
    
    // Make this final so it can't be overridden
    protected final void initializeVehicle() {
        // Safe initialization code
        doStartEngine(); // Call the overridable method through a non-overridable method
    }
    
    // This can still be overridden safely
    protected void doStartEngine() {
        System.out.println("Basic engine started");
    }
}

public class ElectricCar extends Vehicle {
    private int batteryLevel;
    
    public ElectricCar(String model) {
        super(model);
        batteryLevel = 100; // Now set before our version of doStartEngine is called directly
    }
    
    @Override
    protected void doStartEngine() {
        System.out.println("Battery level: " + batteryLevel);
        System.out.println("Electric motor initiated");
    }
}</code>
        </program>
        <p>This design separates initialization sequence (which is final and can't be overridden) from the specific engine starting behavior (which can be safely overridden). Alternatively, the design could avoid calling overridable methods during construction altogether.</p>
      </solution>
    </exercise>
  </exercises>
</section>