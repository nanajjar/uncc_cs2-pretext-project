<section xml:id="abstract-vs-interfaces">
  <title>Choosing Between Abstract Classes and Interfaces</title>
  <p>The choice between abstract classes and interfaces can sometimes confuse beginners. Here's a practical comparison:</p>

  <note>
    <title>Understanding "Contracts" in Java</title>
    <p>Both abstract classes and interfaces define "contracts" but in different ways:</p>
    <ul>
      <li><strong>Abstract classes</strong> represent a partial implementation contract: "Here's some common state and behavior, but you must implement these specific methods."</li>
      <li><strong>Interfaces</strong> represent a pure responsibility contract: "Any class implementing this must provide these capabilities, regardless of its inheritance hierarchy."</li>
    </ul>
    <p>Abstract classes focus on what a class <em>is</em> (identity), while interfaces focus on what a class can <em>do</em> (capability).</p>
  </note>

  <tabular>
    <row header="yes">
      <cell>Feature</cell>
      <cell>Abstract Classes</cell>
      <cell>Interfaces</cell>
    </row>
    <row>
      <cell>Fields</cell>
      <cell>Can have instance fields</cell>
      <cell>Only constants (static final)</cell>
    </row>
    <row>
      <cell>Methods</cell>
      <cell>Mix of abstract and concrete</cell>
      <cell>Abstract (+ default since Java 8)</cell>
    </row>
    <row>
      <cell>Implementation</cell>
      <cell>Can provide partial implementation</cell>
      <cell>Only through default methods</cell>
    </row>
    <row>
      <cell>Constructors</cell>
      <cell>Yes</cell>
      <cell>No</cell>
    </row>
    <row>
      <cell>Multiple inheritance</cell>
      <cell>No (only one superclass)</cell>
      <cell>Yes (implement multiple)</cell>
    </row>
    <row>
      <cell>Access modifiers</cell>
      <cell>Any (public, protected, private)</cell>
      <cell>Only public</cell>
    </row>
  </tabular>

  <p>Based on the comparison, here are guidelines for choosing:</p>

  <ul>
    <li><term>Use Abstract Classes when:</term>
      <ul>
        <li>You have shared <term>state</term> (fields) that subclasses need</li>
        <li>You want to provide some common method implementations</li>
        <li>You have a clear "is-a" relationship in your domain</li>
        <li>You need to use non-public members (protected methods, fields)</li>
      </ul>
    </li>
    <li><term>Use Interfaces when:</term>
      <ul>
        <li>You want classes to fulfill multiple roles or behaviors independently</li>
        <li>You have unrelated classes that share common method signatures but no shared state</li>
        <li>You want maximum flexibility for future classes</li>
        <li>You're defining a <term>capability</term> rather than a type of object</li>
      </ul>
    </li>
  </ul>

  <p><strong>Concrete Example Contrast:</strong></p>
  <sidebyside widths="48% 48%">
    <stack>
      <title>Abstract Class Example</title>
      <p>A <c>Vehicle</c> abstract class makes sense because:</p>
      <ul>
        <li>All vehicles share common state (model, speed, position)</li>
        <li>There's clearly an "is-a" relationship (Car <em>is a</em> Vehicle)</li>
        <li>Common behaviors can be implemented once (accelerate, decelerate)</li>
        <li>Some methods need customization in subclasses (start, stop)</li>
      </ul>
    </stack>
    <stack>
      <title>Interface Example</title>
      <p>A <c>Printable</c> interface makes sense because:</p>
      <ul>
        <li>Many unrelated classes (Document, Invoice, User) might need printing capability</li>
        <li>These classes don't share a common superclass</li>
        <li>No shared state is needed for printing</li>
        <li>The capability can be added independently of inheritance hierarchy</li>
      </ul>
    </stack>
  </sidebyside>

  <p>Let's look at some examples from different domains:</p>
  
  <sidebyside widths="48% 48%">
    <stack>
      <title>Document Processing System</title>
      <p>Abstract class: <c>Document</c> with fields for common properties and some shared implementation</p>
      <p>Interfaces: <c>Printable</c>, <c>Searchable</c>, <c>Editable</c> as capabilities</p>
      <p>Class hierarchy:</p>
      <pre>
Document (abstract class with common behavior)
PDFDocument extends Document, implements Printable, Searchable
WordDocument extends Document, implements Printable, Searchable, Editable
ImageDocument extends Document, implements Printable
      </pre>
    </stack>
    <stack>
      <title>Vehicle System Example</title>
      <p>Abstract class: <c>Vehicle</c> with model, position, and shared behaviors</p>
      <p>Interfaces: <c>Drivable</c>, <c>Electric</c>, <c>Towable</c> as capabilities</p>
      <p>Class hierarchy:</p>
      <pre>
Vehicle (abstract class with common behavior)
Car extends Vehicle, implements Drivable
ElectricCar extends Vehicle, implements Drivable, Electric
Trailer extends Vehicle, implements Towable
      </pre>
    </stack>
  </sidebyside>
  
  <p>Real-world systems often combine both approaches to create flexible and organized designs.</p>
  
  <insight>
    <title>Hybrid Design: Combining Abstract Classes and Interfaces</title>
    <p>In complex applications, you'll often use both abstract classes and interfaces together. Let's build this up step by step using our vehicle example:</p>
    
    <p><strong>Step 1:</strong> First, we define our abstract class for common vehicle behavior and state:</p>
    <program language="java">
      <code>// Abstract base class - handles common state and partial implementation
public abstract class Vehicle {
    protected String model;
    protected double position;
    
    // Common implementation shared by all vehicles
    public String getModel() {
        return model;
    }
    
    // Abstract methods that all vehicles must implement
    public abstract void start();
    public abstract void stop();
}</code>
    </program>
    
    <p><strong>Step 2:</strong> Next, we define interfaces for optional capabilities vehicles might have:</p>
    <program language="java">
      <code>// Interface for vehicles that are electric powered
public interface Electric {
    void charge();
    int getBatteryLevel();
}

// Interface for vehicles that can tow other vehicles
public interface Towable {
    void tow(Vehicle other);
    int getTowingCapacity();
}</code>
    </program>
    
    <p><strong>Step 3:</strong> Finally, we create concrete vehicle types that combine the abstract class with selected interfaces:</p>
    <program language="java">
      <code>// Concrete class using both approaches
public class ElectricTruck extends Vehicle 
        implements Electric, Towable {
    
    private int batteryLevel;
    private int towingCapacity;
    
    // Implement required abstract methods from Vehicle
    @Override
    public void start() { 
        if (batteryLevel > 10) {
            System.out.println("Starting electric motor...");
        } else {
            System.out.println("Battery too low to start!");
        }
    }
    
    @Override
    public void stop() { 
        System.out.println("Stopping electric motor...");
    }
    
    // Implement Electric interface
    @Override
    public void charge() { 
        batteryLevel = 100;
        System.out.println("Battery fully charged");
    }
    
    @Override
    public int getBatteryLevel() {
        return batteryLevel;
    }
    
    // Implement Towable interface
    @Override
    public void tow(Vehicle other) {
        System.out.println("Towing " + other.getModel());
    }
    
    @Override
    public int getTowingCapacity() {
        return towingCapacity;
    }
}</code>
    </program>
    
    <p>This design leverages the strengths of both approaches:</p>
    <ul>
      <li>The abstract class (<c>Vehicle</c>) provides shared state (fields) and some implementation</li>
      <li>The interfaces add optional capabilities (<c>Electric</c>, <c>Towable</c>)</li>
      <li>Different vehicle types can mix and match these capabilities as needed</li>
    </ul>
  </insight>
  
  <p><term>Key takeaways for choosing between abstract classes and interfaces:</term></p>
  <ul>
    <li>Use abstract classes for "is-a" relationships with shared state and implementation</li>
    <li>Use interfaces for "can-do" capabilities that may apply to diverse classes</li>
    <li>Consider using both in combination for complex systems</li>
    <li>Remember: Java allows single inheritance but multiple interface implementation</li>
    <li>Avoid deep inheritance hierarchies (more than 2-3 levels) to reduce complexity. Deep hierarchies can lead to:
      <ul>
        <li>Fragile code that breaks when superclasses change</li>
        <li>Difficulty understanding the full behavior of a class</li>
        <li>"Method origin confusion" (which superclass does this method come from?)</li>
        <li>Reduced maintainability and code flexibility</li>
      </ul>
    </li>
  </ul>
  
  <exercises>
    <exercise xml:id="abstract-interfaces-reflection" type="reflection">
      <title>Reflecting on Abstract Classes and Interfaces</title>
      <statement>
        <p>Consider these simple questions about abstract classes and interfaces:</p>
        <ol>
          <li>Give an example where an abstract class would help you avoid code duplication.</li>
          <li>Why can't you use an interface to share a data field like <c>balance</c> among classes?</li>
          <li>Name one specific situation where you'd use an interface instead of an abstract class.</li>
          <li>How does polymorphism with abstract classes help when you add new types to a system? Provide a brief example.</li>
        </ol>
      </statement>
      <solution>
        <p>An abstract class can avoid duplication when multiple classes share common data and behavior, like how different enemy types in a game all need health, position, and movement code.</p>

        <p>Interfaces cannot contain instance fields, only constants. If you tried using an interface to share <c>balance</c>, each class would need its own separate implementation, causing inconsistency.</p>

        <p>An interface is better when unrelated classes need the same capability, like making both <c>Document</c> and <c>Receipt</c> classes printable without them sharing a common parent.</p>
        
        <p>Polymorphism lets you write code that works with the abstract type without knowing specific subtypes. For example, a <c>displayVehicle(Vehicle v)</c> method works with <c>Car</c>, <c>Truck</c>, or any new <c>Vehicle</c> subclass you create later, without changing the method.</p>
      </solution>
    </exercise>
    
    <exercise xml:id="abstract-class-refactoring" type="shortanswer">
      <title>Refactoring to Abstract Classes</title>
      <statement>
        <p>Examine the following code with duplicated functionality across multiple concrete classes:</p>
        <program language="java">
          <code>
public class Rectangle {
    protected double width;
    protected double height;
    
    public Rectangle(double width, double height) {
        this.width = width;
        this.height = height;
    }
    
    public double area() {
        return width * height;
    }
    
    public void draw() {
        System.out.println("Drawing a rectangle");
        // Rectangle-specific drawing code
    }
}

public class Circle {
    protected double radius;
    
    public Circle(double radius) {
        this.radius = radius;
    }
    
    public double area() {
        return Math.PI * radius * radius;
    }
    
    public void draw() {
        System.out.println("Drawing a circle");
        // Circle-specific drawing code
    }
}

public class Triangle {
    protected double base;
    protected double height;
    
    public Triangle(double base, double height) {
        this.base = base;
        this.height = height;
    }
    
    public double area() {
        return 0.5 * base * height;
    }
    
    // Oops! Missing draw() method
}
          </code>
        </program>
        
        <p>Refactor this code to use an abstract class that captures the common functionality while enforcing that all shapes must be drawable. Include explanations for your design decisions.</p>
      </statement>
      <solution>
        <p>Here's a refactored solution using an abstract class, implemented step by step:</p>
        
        <p><strong>Step 1:</strong> First, create an abstract <c>Shape</c> class that defines the common contract:</p>
        <program language="java">
          <code>
// Abstract base class for all shapes
public abstract class Shape {
    // All shapes need an area calculation
    public abstract double area();
    
    // All shapes must be drawable
    public abstract void draw();
}
          </code>
        </program>
        
        <p><strong>Step 2:</strong> Refactor <c>Rectangle</c> to extend the abstract class:</p>
        <program language="java">
          <code>
public class Rectangle extends Shape {
    private double width;
    private double height;
    
    public Rectangle(double width, double height) {
        this.width = width;
        this.height = height;
    }
    
    @Override
    public double area() {
        return width * height;
    }
    
    @Override
    public void draw() {
        System.out.println("Drawing a rectangle");
        // Rectangle-specific drawing code
    }
}
          </code>
        </program>
        
        <p><strong>Step 3:</strong> Refactor <c>Circle</c> and <c>Triangle</c> similarly:</p>
        <program language="java">
          <code>
public class Circle extends Shape {
    private double radius;
    
    public Circle(double radius) {
        this.radius = radius;
    }
    
    @Override
    public double area() {
        return Math.PI * radius * radius;
    }
    
    @Override
    public void draw() {
        System.out.println("Drawing a circle");
        // Circle-specific drawing code
    }
}

public class Triangle extends Shape {
    private double base;
    private double height;
    
    public Triangle(double base, double height) {
        this.base = base;
        this.height = height;
    }
    
    @Override
    public double area() {
        return 0.5 * base * height;
    }
    
    @Override
    public void draw() {
        // Now the Triangle class is required to implement draw()
        System.out.println("Drawing a triangle");
        // Triangle-specific drawing code
    }
}
          </code>
        </program>
        
        <p>Design decisions explained:</p>
        <ul>
          <li>Created an abstract <c>Shape</c> class that requires all shapes to implement <c>area()</c> and <c>draw()</c></li>
          <li>Made both methods abstract since each shape will calculate its area and render itself differently</li>
          <li>This design catches the missing <c>draw()</c> method at compile time</li>
          <li>The abstract class lets us treat all shapes polymorphically (e.g., we could have an array of <c>Shape</c> objects and call <c>draw()</c> on each)</li>
          <li>I didn't include fields in the abstract class since each shape needs different measurements (radius vs. width/height)</li>
        </ul>
      </solution>
    </exercise>
    
    <exercise xml:id="interface-vs-abstract-use-case" type="matching">
      <title>Matching Use Cases with Abstractions</title>
      <statement>
        <p>For each scenario, decide whether an abstract class, an interface, or both would be the better choice. Match the scenarios with the appropriate options.</p>
      </statement>
      <matches>
        <match>
          <premise>You need to create various payment methods (credit card, PayPal, bank transfer) that all process payments but with different implementations.</premise>
          <response>Interface <c>PaymentProcessor</c> is best, as payment methods don't share implementation or state, just a common capability.</response>
        </match>
        <match>
          <premise>You're building different types of database connections that all share connection establishment code but have unique query execution methods.</premise>
          <response>Abstract class <c>DatabaseConnection</c> works best to share the connection establishment code and state.</response>
        </match>
        <match>
          <premise>You need various unrelated classes to be able to convert themselves to a standard text format for data exchange.</premise>
          <response>Interface <c>StringSerializable</c> is appropriate, as this is a capability that can apply to many unrelated classes.</response>
        </match>
        <match>
          <premise>You want to create different types of user accounts that share user profile data but have different permission systems.</premise>
          <response>Abstract class <c>UserAccount</c> with common fields plus an interface <c>Permissible</c> provides the best of both worlds.</response>
        </match>
      </matches>
    </exercise>
    
    <exercise xml:id="abstract-interface-true-false" type="truefalse">
      <title>True or False: Abstract Classes and Interfaces</title>
      <statement>
        <p>Determine whether each statement is true or false:</p>
      </statement>
      <truefalse>
        <statement>
          <p>An interface can have constructors.</p>
        </statement>
        <answer>false</answer>
        <feedback>
          <p>Interfaces cannot have constructors. Constructors are used to initialize object state, but interfaces cannot contain instance variables (except constants).</p>
        </feedback>
      </truefalse>
      <truefalse>
        <statement>
          <p>Abstract classes can contain only abstract methods.</p>
        </statement>
        <answer>false</answer>
        <feedback>
          <p>Abstract classes can contain a mix of abstract methods AND concrete methods with implementations. In fact, this is one of their key advantages over interfaces.</p>
        </feedback>
      </truefalse>
      <truefalse>
        <statement>
          <p>A class can implement multiple interfaces at the same time.</p>
        </statement>
        <answer>true</answer>
        <feedback>
          <p>This is correct. Java allows a class to implement multiple interfaces simultaneously, which is a way to achieve a form of multiple inheritance for behavior.</p>
        </feedback>
      </truefalse>
      <truefalse>
        <statement>
          <p>You can create an instance of an abstract class directly.</p>
        </statement>
        <answer>false</answer>
        <feedback>
          <p>You cannot instantiate abstract classes directly. You must create a concrete subclass that implements all abstract methods, then instantiate that subclass.</p>
        </feedback>
      </truefalse>
      <truefalse>
        <statement>
          <p>Interface methods are implicitly public and abstract.</p>
        </statement>
        <answer>true</answer>
        <feedback>
          <p>This is correct. In interfaces, methods are implicitly public and abstract (except for default methods, which have implementations).</p>
        </feedback>
      </truefalse>
    </exercise>
  </exercises>
</section> 