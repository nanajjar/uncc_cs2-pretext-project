  <section xml:id="object-class-inheritance">
    <title>Object: The Ultimate Superclass</title>
    <p>Did you know you're already using inheritance in every Java class you write? In Java, all classes implicitly inherit from a superclass called <c>Object</c> 
      if they don't explicitly extend another class. This means every class you create automatically receives methods like <c>toString()</c>, 
      <c>equals()</c>, and <c>hashCode()</c>.</p>
      <p>
       Since every class in Java implicitly extends the <c>Object</c> class (either directly or indirectly), any instance of any class can be assigned to a reference of type Object.
        This means that Java enables polymorphic handling by allowing variables of type Object to store references to any Java object, regardless of its actual class. 
      </p>    
      <p>
        This is useful in scenarios such as:
      <ul>
        <li>
          <p>
            Storing heterogeneous objects in collections (e.g., <c>ArrayList&lt;Object&gt;</c>).
          </p>
        </li>
        <li>
          <p>
            Passing any object to a method that accepts Object (e.g., <c>toString()</c>, <c>equals()</c>, and <c>hashCode()</c>).
          </p>
        </li>
        <li>
          <p>
            Implementing generic behaviors where a method can handle different types without knowing their specifics.
          </p>
        </li>
      </ul>
      </p>
 
    
   
    
    
    <p>Let's see what happens when we use inherited <c>Object</c> methods without overriding them:</p>
    
    <program language="java">
      <code>
public class Player {
    private String name;
    private int health;
    
    public Player(String name, int health) {
        this.name = name;
        this.health = health;
    }
    
    // No toString() override
}

// Later in code
Player hero = new Player("Hero", 100);
System.out.println(hero); // Outputs something like: Player@7a81197d
      </code>
    </program>
    
    <p>The output is not very readable because we're using the default <c>toString()</c> implementation inherited from <c>Object</c>. This default is deliberately minimal. Java can't assume what information would be meaningful for every possible class, so it provides a basic implementation that you're expected to override with class-specific behavior.</p>
    
    <p>This example illustrates an important inheritance concept: while inheriting methods is convenient, sometimes the parent class's implementation doesn't fit the specific needs of the subclass which is a perfect scenario for method overriding, which we'll explore in the next chapter.</p>
  
   <p>To summarize, this universal inheritance has profound implications for Java's design:</p>
    <ul>
      <li>It enables polymorphic handling of any object through the common <c>Object</c> reference type</li>
      <li>It establishes system-wide contracts for object comparison, string representation, and hashing</li>
      <li>It makes collections like <c>ArrayList</c> or <c>HashMap</c> possible, as they can store any object type</li>
    </ul>
    
  <p><alert>Check Your Understanding</alert></p>

    <exercise xml:id="mc-object">
      <statement>
        <p>
          Why can any object in Java be assigned to a variable of type <c>Object</c>?
        </p>
      </statement>
       <choices randomize="yes">
       <choice>
        <statement>
          <p>
            Because <c>Object</c> is an interface that all classes must implement.
          </p>
        </statement>
       </choice>
       <choice correct="yes">
        <statement>
          <p>
            Because <c>Object</c> is the root superclass of all Java classes.
          </p>
        </statement>
        <feedback>
          <p>
            Correct! Because <c>Object</c> is the root superclass of all Java classes.
          </p>
        </feedback>
       </choice>
       <choice>
        <statement>
          <p>
            Because Java automatically converts all objects into Object references.
          </p>
        </statement>
       </choice>
       <choice>
        <statement>
          <p>
            Because all Java objects share the same memory structure.
          </p>
        </statement>
       </choice>
       </choices>
       </exercise>
       <exercise xml:id="mc-object-use">
      <statement>
        <p>
          What is a common use case for storing objects as type <c>Object</c>?
        </p>
      </statement>
      <choices randomize="yes">
      <choice>
        <statement>
          <p>
             To ensure objects cannot be modified.
          </p>
        </statement>
      </choice>
      <choice correct="yes">
        <statement>
          <p>
            To allow storing heterogeneous objects in a common collection.
          </p>
        </statement>
        <feedback>
          <p>
          </p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>
            To prevent subclass-specific behavior.
          </p>
        </statement>
      </choice>
      <choice>
        <statement>
          <p>
            To avoid the need for explicit casting.
          </p>
        </statement>
      </choice>
    </choices>
    </exercise>
  </section>