<section xml:id="abstract-classes-implementation">
  <title>Working with Abstract Classes</title>

  <subsection xml:id="abstract-classes-methods">
    <title>Creating Abstract Classes and Methods</title>
    <p>An <term>abstract class</term> in Java is defined with the keyword <c>abstract</c>. Abstract classes can contain:</p>
    <ul>
      <li>Fields (instance variables)</li>
      <li>Constructors (though they can only be called by subclasses)</li>
      <li>Regular (concrete) methods with implementations</li>
      <li><term>Abstract methods</term> - methods declared without implementations</li>
    </ul>
    
    <p>An abstract method is a method declaration without a body. It specifies the method's signature (name, parameters, and return type) but doesn't provide an implementation:</p>
    
    <program language="java">
      <code>// An abstract method - note the semicolon instead of a method body
public abstract void calculateTax();
      </code>
    </program>
    
    <p>This tells Java: "Any non-abstract subclass of this class MUST provide an implementation for this method." It's like a contract that forces subclasses to fulfill certain responsibilities.</p>

    <p>Here's a simple abstract class example:</p>

    <program language="java">
      <code>// Abstract class with both concrete and abstract methods
public abstract class Document {               // ‚Üê Note the 'abstract' keyword
    protected String filename;                 // ‚Üê Instance variable (state)
    
    // Constructor - can be called by subclasses
    public Document(String filename) {
        this.filename = filename;
    }
    
    // Concrete method with implementation
    public String getFilename() {
        return filename;
    }
    
    // Abstract methods - MUST be implemented by subclasses ‚ö†Ô∏è
    public abstract void save();               // ‚Üê Note: no method body, ends with semicolon
    public abstract void print();
}</code>
    </program>

    <note>
      <title>Why Abstract Classes Can't Be Instantiated</title>
      <p>You cannot create objects directly from abstract classes:</p>
      <program language="java">
        <code>// This won't compile:
Document doc = new Document("report.txt"); // ‚ùå Error</code>
      </program>
      <p>This makes sense because abstract classes contain "incomplete" methods (the abstract ones). Since abstract methods have no implementation, Java can't allow you to create objects that would be unable to respond to method calls.</p>
    </note>
    
    <p>To use an abstract class, you must create a subclass that implements all the abstract methods:</p>
    
    <program language="java">
      <code>// Concrete subclass implementing the abstract methods
public class PDFDocument extends Document {    // ‚Üê Extends the abstract class
    public PDFDocument(String filename) {
        super(filename);                       // ‚Üê Calls abstract class constructor
    }
    
    @Override                                  // ‚Üê Always use @Override annotation
    public void save() {
        System.out.println("Saving PDF file: " + filename);
        // PDF-specific saving code
    }
    
    @Override                                  // ‚Üê Required for all abstract methods 
    public void print() {
        System.out.println("Printing PDF file: " + filename);
        // PDF-specific printing code
    }
}</code>
    </program>
    
    <p><term>Key takeaways about abstract classes:</term></p>
    <ul>
      <li>They use the <c>abstract</c> keyword in their class definition</li>
      <li>They cannot be instantiated (no <c>new AbstractClass()</c>)</li>
      <li>They can contain a mix of abstract and concrete methods</li>
      <li>They can have constructors, fields, and regular methods</li>
      <li>Subclasses must implement all abstract methods or also be declared abstract</li>
    </ul>
  </subsection>

  <subsection xml:id="implementing-abstract-methods">
    <title>Implementing Abstract Methods in Subclasses</title>
    <p>Any concrete (non-abstract) subclass extending an abstract class must implement all its abstract methods. Let's build a simple vehicle example step by step:</p>

    <p><term>Step 1:</term> First, we define our abstract Vehicle class with abstract methods:</p>
    <program language="java">
      <code>// Abstract class for vehicles
public abstract class Vehicle {
    protected String model;      // ‚Üê Shared state for all vehicles
    
    public Vehicle(String model) {
        this.model = model;
    }
    
    // Abstract methods that all vehicles must implement
    public abstract void start();
    public abstract void stop();
    
    // Concrete method shared by all vehicles
    public String getModel() {
        return model;
    }
}</code>
    </program>

    <p><term>Step 2:</term> Now, we create a concrete subclass that implements the abstract methods:</p>

    <program language="java">
      <code>// Concrete subclass of Vehicle
public class Car extends Vehicle {
    private int fuelLevel;      // ‚Üê Car-specific state
    
    public Car(String model, int fuelLevel) {
        super(model);           // ‚Üê Call to parent constructor
        this.fuelLevel = fuelLevel;
    }
    
    @Override                   // ‚Üê Always use @Override annotation
    public void start() {
        if (fuelLevel > 0) {
            System.out.println("Starting car engine for " + model);
        } else {
            System.out.println("Cannot start - out of fuel!");
        }
    }
    
    @Override                   // ‚Üê Required for all abstract methods
    public void stop() {
        System.out.println("Stopping car engine for " + model);
    }
}</code>
    </program>

    <p>Notice how the <c>Car</c> class:</p>
    <ul>
      <li>Extends the abstract <c>Vehicle</c> class</li>
      <li>Calls the parent constructor using <c>super(model)</c></li>
      <li>Implements both abstract methods (<c>start()</c> and <c>stop()</c>)</li>
      <li>Uses the <c>@Override</c> annotation for clarity and compile-time checking</li>
    </ul>

    <note>
      <title>üö© Important: Use @Override Annotation</title>
      <p>Always use the <c>@Override</c> annotation when implementing abstract methods. This annotation is technically optional but strongly recommended because:</p>
      <ul>
        <li>It asks the compiler to verify you're actually overriding a method (not creating a new one)</li>
        <li>If you misspell the method name or use incorrect parameters, the compiler will immediately catch the error</li>
        <li>It makes your code more readable by clearly showing which methods fulfill the contract</li>
      </ul>
      <p>Without <c>@Override</c>, you might accidentally create a new method instead of implementing the required one. The compiler would then complain that you haven't implemented the abstract method, but it wouldn't tell you why.</p>
    </note>
    
    <p>Here are common errors when implementing abstract methods:</p>
    
    <program language="java">
      <code>// ‚ö†Ô∏è COMMON MISTAKES when implementing abstract methods ‚ö†Ô∏è
public class BrokenCar extends Vehicle {
    // ‚ùå Mistake 1: Method signature doesn't match (wrong name)
    @Override
    public void startEngine() {  // Should be 'start()'
        // This won't satisfy the abstract method requirement
        System.out.println("Starting engine");
    }
    
    // ‚ùå Mistake 2: Wrong return type
    @Override
    public boolean stop() {  // Should return void, not boolean
        System.out.println("Stopping");
        return true;
    }
    
    // ‚ùå Mistake 3: Forgetting to implement an abstract method
    // 'stop()' is missing completely - compiler will detect this
}</code>
    </program>
    
    <p>The compiler will generate errors for each of these mistakes. Pay close attention to these error messages as they tell you exactly what's wrong:</p>
    <ul>
      <li>"Method does not override method from its superclass" (for <c>startEngine</c>)</li>
      <li>"Return type boolean is not compatible with void" (for <c>stop</c>)</li>
      <li>"BrokenCar must implement inherited abstract method Vehicle.stop()" (for the missing method)</li>
    </ul>

    <p><em><term>Pro Tip:</term> When implementing abstract classes or interfaces, your Java compiler is your most important debugging tool. Always carefully read compiler error messages‚Äîthey contain precise information about what's wrong and often suggest how to fix it. The compiler ensures you correctly fulfill the "contract" required by the abstract class or interface.</em></p>

    <insight>
      <title>Debugging Abstract Method Implementations</title>
      <p>Compiler errors are your best guide when working with abstract classes and interfaces. Unlike runtime bugs that might only appear under specific conditions, the compiler immediately flags contract violations. Think of compiler messages as guardrails keeping your implementation aligned with the required contract.</p>
      
      <p>When you see errors like:</p>
      <ul>
        <li>"Class X must implement inherited abstract method Y" ‚Äî You forgot to implement a required method</li>
        <li>"Method does not override a method from superclass" ‚Äî You likely misspelled the method name or used wrong parameters</li>
        <li>"Return type Z is not compatible with Y" ‚Äî Your implementation returns the wrong type</li>
      </ul>
      
      <p>Don't just fix the errors mechanically; understand what contract you're violating. This helps build a deeper comprehension of abstract class and interface design.</p>
    </insight>

    <p>Let's see why abstract classes are useful by comparing code with and without them:</p>
    
    <sidebyside widths="48% 48%">
      <stack>
        <title>Without Abstract Classes</title>
        <program language="java">
          <code>
// No shared structure
public class Car {
    private String model;
    
    public void start() {
        System.out.println("Starting car");
    }
    
    public void stop() {
        System.out.println("Stopping car");
    }
}

public class Motorcycle {
    private String model;
    
    public void start() {
        System.out.println("Starting motorcycle");
    }
    
    // Oops! Developer forgot to implement stop()
    // No compiler warning!
}
          </code>
        </program>
      </stack>
      <stack>
        <title>With Abstract Classes</title>
        <program language="java">
          <code>
// Shared structure through abstraction
public abstract class Vehicle {
    protected String model;
    
    // All vehicles must implement:
    public abstract void start();
    public abstract void stop();
}

public class Motorcycle extends Vehicle {
    @Override
    public void start() {
        System.out.println("Starting motorcycle");
    }
    
    // Compiler error:
    // "Motorcycle must implement 
    // inherited abstract method Vehicle.stop()"
}
          </code>
        </program>
      </stack>
    </sidebyside>
    
    <p>The approach with abstract classes ensures that developers can't forget to implement required methods‚Äîthe compiler enforces the contract.</p>
    
    <insight>
      <title>The "Substitutability" Benefit of Abstract Classes</title>
      <p>Abstract classes enable <term>polymorphism</term>: the ability to treat objects of different concrete subclasses uniformly through their common abstract superclass. This is one of the most powerful features of object-oriented programming.</p>
      
      <p><term>What this means in practice:</term> You can use the abstract superclass type (<c>Vehicle</c>) as a variable type or parameter type to handle any subclass object, even when you don't know its specific subclass at compile time.</p>
      
      <program language="java">
        <code>// Working with different vehicles polymorphically
// Create an array of different vehicle types
Vehicle[] vehicles = new Vehicle[3];
vehicles[0] = new Car("Toyota Camry", 50);      // Car object stored in Vehicle variable
vehicles[1] = new Motorcycle("Honda CBR");       // Motorcycle object stored in Vehicle variable
vehicles[2] = new Truck("Ford F-150", 2000);     // Truck object stored in Vehicle variable

// Process all vehicles the same way - without knowing specific types
for (Vehicle v : vehicles) {
    System.out.println("Starting: " + v.getModel());
    v.start();  // Each vehicle type starts differently
    
    // Later...
    v.stop();   // Each vehicle type stops differently
}</code>
      </program>
      
      <p>This code doesn't need to know which specific vehicle subclass it's working with. It simply treats every vehicle through the common <c>Vehicle</c> interface, while at runtime, each object executes its specific implementation of <c>start()</c> and <c>stop()</c>. This allows for:</p>
      
      <ul>
        <li>More flexible and extensible code (adding new vehicle types without changing existing code)</li>
        <li>Reduced code duplication (shared logic in one place)</li>
        <li>Better organization of related functionality</li>
      </ul>
      
      <p><term>Key benefit:</term> With <term>polymorphism</term>, you can add new types to your system without modifying existing code. For example, if you later create a <c>Helicopter</c> class extending <c>Vehicle</c>, all code that works with <c>Vehicle</c> objects will automatically work with <c>Helicopter</c> objects without any changes. This is known as the <em>Open/Closed Principle</em>‚Äîcode should be open for extension but closed for modification.</p>
      
      <p>However, an abstract class only ensures that methods exist, not that they work properly. A faulty implementation could still cause problems:</p>
      
      <program language="java">
        <code>public class FaultyTruck extends Vehicle {
    @Override
    public void start() {
        // Doesn't actually do anything useful
        System.out.println("Not implemented yet!");
    }
    
    @Override
    public void stop() {
        // Creates unexpected behavior
        throw new RuntimeException("Brakes failed!");
    }
}</code>
      </program>
      
      <p>When creating abstract classes, consider not just <em>what</em> methods subclasses must provide, but also what the expected behavior should be. Document the contract clearly so subclass authors understand their responsibilities.</p>
    </insight>
    
    <p><term>Key takeaways about implementing abstract methods:</term></p>
    <ul>
      <li>Non-abstract subclasses must implement all abstract methods from their superclass</li>
      <li>Always use <c>@Override</c> to catch signature mismatches</li>
      <li>The implementation must match the method signature exactly (name, parameters, return type)</li>
      <li>Abstract classes enforce a contract that the compiler checks</li>
      <li>Abstract classes enable polymorphism (treating diverse objects uniformly)</li>
    </ul>
  </subsection>
</section> 