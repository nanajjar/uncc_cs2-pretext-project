<section xml:id="basic-inheritance-java">
  <title>Basic Inheritance in Java</title>

  <!-- ==============================================
       2.1 Introducing Inheritance: Classes with Shared Behaviors
       ============================================= -->
  <subsection xml:id="inheritance-intro">
    <title>Why Do We Need Inheritance?</title>
    <p>As you saw before, repeating similar fields or methods in multiple classes can create a maintenance headache. Inheritance addresses this by letting one class "share" its common code with other classes. In Java, the class that provides shared code is called the <em>superclass</em>, while the classes that reuse this code are called <em>subclasses</em>.</p>
    
    <p>A subclass automatically inherits all non-private fields and methods from its superclass. This inheritance enables you to:</p>
    <ul>
      <li>Reuse existing code without copying it</li>
      <li>Add new fields and methods to extend functionality</li>
      <li>Override inherited methods to provide specialized behavior</li>
      <li>Leverage polymorphism to write more flexible code</li>
    </ul>
    
    <p>Imagine a game where <c>Entity</c> represents anything that can appear in the world. <c>Player</c> and <c>Monster</c> might both need a <c>health</c> field and a <c>takeDamage</c> method. Rather than copy-pasting them into each class, we can define these once in <c>Entity</c>. Subclasses like <c>Player</c> or <c>Monster</c> then inherit the same <c>health</c> and <c>takeDamage</c> logic, but are still free to add unique attributes or special behaviors.</p>
    
    <p>Perhaps the most powerful benefit of inheritance is <em>polymorphism</em> – the ability to treat objects of different subclasses as instances of their common superclass. This enables you to write code that operates on the general type while automatically getting the specialized behavior of specific subtypes:</p>
    
    <program language="java">
      <code>// Using polymorphism
// Collection holding different entity types
List&lt;Entity&gt; entities = new ArrayList&lt;&gt;();
entities.add(new Player("Hero", 100));
entities.add(new Monster("Goblin", 50));
entities.add(new NPC("Shopkeeper", 30));

// Apply damage to all entities
// Each will use its own version of takeDamage()
for (Entity e : entities) {
    e.takeDamage(10);  // Polymorphic call
}
</code>
    </program>
    
    <p>In this example, the same <c>takeDamage()</c> call works differently depending on the actual type of entity, even though our code only deals with the general <c>Entity</c> type. This is a powerful mechanism that enables flexible and extensible designs.</p>
  </subsection>

  <!-- ==============================================
       2.2 Subclasses and Superclasses
       ============================================= -->
  <subsection xml:id="subclasses-and-superclasses">
    <title>Subclasses and Superclasses</title>
    <p>The superclass is your general or "parent" class. Subclasses (sometimes called "child" classes) extend this superclass and become more specialized. This relationship is often described as "is-a": a <c>Monster</c> is-a(n) <c>Entity</c>. This helps you follow the DRY principle because you only write the shared logic once.</p>
    
    <p>Here are some examples of superclass-subclass relationships organized by domain:</p>
    
    <tabular>
      <row header="yes">
        <cell>Domain</cell>
        <cell>Superclass</cell>
        <cell>Subclasses</cell>
        <cell>What's Inherited</cell>
      </row>
      <row>
        <cell>Game Development</cell>
        <cell><c>Entity</c></cell>
        <cell><c>Player</c>, <c>Monster</c>, <c>NPC</c></cell>
        <cell>position, health, collision detection</cell>
      </row>
      <row>
        <cell>Financial Systems</cell>
        <cell><c>Account</c></cell>
        <cell><c>CheckingAccount</c>, <c>SavingsAccount</c></cell>
        <cell>balance, deposit/withdraw methods</cell>
      </row>
      <row>
        <cell>Graphics</cell>
        <cell><c>Shape</c></cell>
        <cell><c>Circle</c>, <c>Rectangle</c>, <c>Triangle</c></cell>
        <cell>position, color, draw methods</cell>
      </row>
    </tabular>
    
    <p>Here's a visual representation of a simple class hierarchy:</p>
    <pre>
Entity
 ├── Player
 ├── Monster
 └── NPC
    </pre>
    <p>This diagram shows <c>Entity</c> as the superclass with three subclasses: <c>Player</c>, <c>Monster</c>, and <c>NPC</c>. Each of these subclasses inherits properties and behaviors from <c>Entity</c>, while potentially adding their own specialized features.</p>
    
    <p>In this hierarchy, the <c>Entity</c> class would contain common attributes like position, health, and basic movement functionality. Each subclass then adds specialized behaviors:</p>
    <ul>
      <li><c>Player</c> adds user input handling, inventory management, and experience/leveling</li>
      <li><c>Monster</c> adds AI pathfinding, aggression logic, and combat behaviors</li>
      <li><c>NPC</c> adds dialogue systems, quest management, and interaction options</li>
    </ul>
    <p>This structure allows you to write code that works with any Entity while still leveraging specialized behaviors when needed.</p>
  </subsection>

  <!-- ==============================================
       2.2.1 Common Inheritance Mistakes (NEW)
       ============================================= -->
  <subsection xml:id="common-inheritance-mistakes">
    <title>Common Inheritance Mistakes</title>
    
    <note>
      <title>Inheritance Anti-Patterns</title>
      <p>The most common inheritance mistake is using it for "has-a" relationships instead of "is-a" relationships.</p>
      <ul>
        <li><term>Incorrect:</term> <c>Car extends Engine</c> (A car has an engine, it is not a type of engine)</li>
        <li><term>Correct:</term> <c>Car</c> contains an <c>Engine</c> field (composition)</li>
      </ul>
      <p>Other common anti-patterns include:</p>
      <ul>
        <li><term>Deep inheritance hierarchies:</term> More than 2-3 levels deep creates fragile, difficult-to-maintain code where changes to base classes can have unexpected effects rippling throughout the hierarchy</li>
        <li><term>Inheritance for code reuse only:</term> Using inheritance when there's no logical "is-a" relationship leads to confusing designs that violate the principle of least surprise</li>
        <li><term>Inheriting from final classes or those not designed for extension:</term> This limits future flexibility and may violate assumptions made by the original class designer</li>
      </ul>
    </note>
    
    <p>Here's an example of incorrect use of inheritance:</p>
    <program language="java">
      <code>// Incorrect: Using inheritance inappropriately
public class Car extends Engine {
    private String model;
    
    // Car functionality...
}</code>
    </program>
    
    <p>This design is flawed because a <c>Car</c> is not a specialized type of <c>Engine</c>—it contains an engine as one of its components. The consequences of this flawed design include:</p>
    
    <ul>
      <li>A car would inherit all engine methods like <c>ignite()</c> and <c>increaseFuelFlow()</c> at the top level, creating a confusing API</li>
      <li>Changes to the Engine class would directly impact Car, creating tight coupling</li>
      <li>You couldn't change the engine in a car without changing the car itself</li>
    </ul>
    
    <p>Here's how it should be corrected using composition:</p>
    
    <program language="java">
      <code>// Correct: Using composition for a "has-a" relationship
public class Engine {
    private int horsepower;
    
    public void start() {
        // Engine starting logic
    }
}

public class Car {
    private Engine engine;  // Composition
    private String model;
    
    public Car(Engine engine, String model) {
        this.engine = engine;
        this.model = model;
    }
    
    public void startCar() {
        engine.start();
        // Additional car startup logic
    }
}</code>
    </program>
    
    <p>With composition, the relationship is clearer: a <c>Car</c> has an <c>Engine</c>, but it is not an <c>Engine</c>. This design also makes it easier to change or replace the engine without affecting the car's implementation.</p>
  </subsection>

  <!-- ==============================================
       2.3 Java Inheritance Syntax
       ============================================= -->
  <subsection xml:id="java-inheritance-syntax">
    <title>Java Inheritance Syntax</title>
    
    <sidebyside widths="45% 55%">
      <stack>
        <p>In Java, you establish an inheritance relationship using the <c>extends</c> keyword in your class declaration.</p>
        <p>When a class extends another class, it automatically inherits all non-private members (fields and methods) from the superclass.</p>
        <p>The general syntax is shown in the diagram to the right.</p>
      </stack>
      <stack>
        <pre>
public class SubclassName extends SuperclassName {
    // Additional fields and methods
    // unique to this subclass
}
        </pre>
      </stack>
    </sidebyside>
    
    <p>For example, if <c>Monster</c> extends <c>Entity</c>, it inherits all non-private fields and methods from <c>Entity</c> automatically:</p>
    <program language="java">
      <code>public class Monster extends Entity {
    // extra fields or methods for Monster can go here
}</code>
    </program>
  </subsection>

  <!-- ==============================================
       2.4 A Complete Example: Entity and Player
       ============================================= -->
  <subsection xml:id="inheritance-simple-example">
    <title>A Complete Inheritance Example</title>
    <p>Below is a fuller example. The superclass <c>Entity</c> stores a <c>health</c> field, plus methods for initializing and modifying this health. The subclass <c>Player</c> automatically gains those fields and methods, but also adds its own unique ones.</p>
    <program language="java">
      <code>// File: Entity.java
public class Entity {
    protected int health;
    protected int maxHealth;
    protected String name;
    
    public Entity(String name, int initialHealth) {
        this.name = name;
        this.maxHealth = initialHealth;
        this.health = initialHealth;
    }

    public void takeDamage(int amount) {
        // Common damage calculation logic
        health -= amount;
        if (health &lt; 0) {
            health = 0;
        }
        System.out.println(name + " takes " + amount + " damage. Health: " + health);
    }
    
    public void heal(int amount) {
        health += amount;
        if (health &gt; maxHealth) {
            health = maxHealth;
        }
        System.out.println(name + " heals for " + amount + ". Health: " + health);
    }

    public int getHealth() {
        return health;
    }
    
    public String getName() {
        return name;
    }
}

// File: Player.java
import java.io.Serializable; // Example import, if Player implements Serializable
 
public class Player extends Entity {
    private int experiencePoints;
    private int level;

    public Player(String playerName, int initialHealth) {
        super(playerName, initialHealth); // calls the Entity constructor
        this.experiencePoints = 0;
        this.level = 1;
    }

    public void gainExperience(int points) {
        experiencePoints += points;
        System.out.println(getName() + " gains " + points + " experience points!");
        
        // Level up if enough experience is gained
        if (experiencePoints >= level * 100) {
            levelUp();
        }
    }
    
    private void levelUp() {
        level++;
        maxHealth += 10; // Increasing maximum health on level up
        health = maxHealth; // Full heal on level up
        System.out.println(getName() + " levels up to level " + level + "!");
    }

    public void printStatus() {
        System.out.println("Player: " + getName() + ", Level: " + level + 
                          ", Health: " + getHealth() + "/" + maxHealth + 
                          ", XP: " + experiencePoints);
    }
}</code>
    </program>
    <p>When <c>Player</c> calls <c>super(playerName, initialHealth)</c>, it runs the <c>Entity</c> constructor to set up the parent class fields. Thanks to inheritance, you don't need to duplicate the <c>health</c> variable or <c>takeDamage()</c> method in <c>Player</c>. You inherit them all from <c>Entity</c>, while adding player-specific behaviors like gaining experience and leveling up.</p>
  </subsection>

  <!-- ==============================================
       2.5 Protected vs. Private
       ============================================= -->
  <subsection xml:id="inheritance-protected-private">
    <title>Protected vs. Private</title>
    <p>Java has three main access modifiers for fields and methods: <c>private</c> (accessible only within the same class), <c>public</c> (accessible from any class), and <c>protected</c> (accessible within the same class, subclasses, and classes in the same package).</p>
    
    <p>In the example above, <c>health</c> is declared <c>protected</c>. That means subclasses of <c>Entity</c> can access it directly. If <c>health</c> were <c>private</c>, then only the <c>Entity</c> class itself could access <c>health</c>, and subclasses would need methods like <c>getHealth()</c> to interact with it.</p>
    
    <sidebyside widths="50% 50%">
      <stack>
        <title>Use private fields when:</title>
        <ul>
          <li>The field's implementation might change in the future</li>
          <li>You need to ensure validation when the field is modified</li>
          <li>You want to maintain stricter encapsulation of internal state</li>
        </ul>
      </stack>
      <stack>
        <title>Use protected fields when:</title>
        <ul>
          <li>Subclasses legitimately need direct access to modify the field</li>
          <li>The field's implementation is stable and unlikely to change</li>
          <li>Performance is critical and getter/setter overhead must be avoided</li>
        </ul>
      </stack>
    </sidebyside>
    
    <insight>
      <title>Best Practice for Field Access</title>
      <p>Default to <c>private</c> fields with accessor methods (getters/setters). This maintains better encapsulation and gives you more control over how fields are accessed and modified. Use <c>protected</c> sparingly and only when subclasses truly require direct field access for well-justified reasons.</p>
      <p>Remember: You can always relax access restrictions later if needed, but tightening them may require significant refactoring.</p>
    </insight>
  </subsection>

  <!-- ==============================================
       2.6 Method Overriding
       ============================================= -->
  <subsection xml:id="inheritance-overriding-methods">
    <title>Overriding Methods</title>
    <p>Inheritance allows you to take a method from your superclass and replace it with your own version in the subclass. This is called <em>method overriding</em>. To override a method, define a method in your subclass with exactly the same signature as the superclass method.</p>
    
    <p>Always use the <c>@Override</c> annotation when overriding methods. While optional, this annotation helps the compiler catch mistakes if you accidentally change the method's name or parameters.</p>
    
    <program language="java">
      <code>public class Monster extends Entity {
    private boolean isUndead;
    
    public Monster(String name, int initialHealth, boolean isUndead) {
        super(name, initialHealth);
        this.isUndead = isUndead;
    }

    @Override
    public void takeDamage(int amount) {
        // Undead monsters take half damage
        if (isUndead) {
            int reducedAmount = amount / 2;
            System.out.println(getName() + " resists damage due to undead nature!");
            super.takeDamage(reducedAmount); // Call the parent version with reduced damage
        } else {
            // Call the original implementation for non-undead monsters
            super.takeDamage(amount);
        }
    }
    
    @Override
    public void heal(int amount) {
        // Undead monsters are damaged by healing
        if (isUndead) {
            System.out.println("Healing harms the undead " + getName() + "!");
            takeDamage(amount);
        } else {
            super.heal(amount);
        }
    }
}</code>
    </program>
    <p>Here, <c>Monster</c> inherits and overrides both the <c>takeDamage</c> and <c>heal</c> methods to implement specialized behavior for undead monsters: they take half damage but are harmed by healing effects.</p>
    
    <note>
      <title>When to Override vs. When to Avoid Overriding</title>
      <p>Method overriding is most appropriate when:</p>
      <ul>
        <li>The subclass needs to modify or extend the superclass behavior while maintaining the same method contract</li>
        <li>The override still fulfills the original purpose of the method (respecting the Liskov Substitution Principle)</li>
        <li>The behavior change is a natural specialization that users of the class would expect</li>
      </ul>
      <p>Avoid overriding when:</p>
      <ul>
        <li>The override would drastically change the expected behavior, violating the superclass contract</li>
        <li>The override would disable or "turn off" functionality expected from the superclass</li>
        <li>You find yourself overriding many methods of the superclass, indicating the inheritance relationship might not be appropriate</li>
      </ul>
    </note>
    
    <insight>
      <title>@Override Best Practices</title>
      <p>Always use the <c>@Override</c> annotation when overriding methods in subclasses. It costs nothing to add but provides two significant benefits:</p>
      <ul>
        <li>The compiler verifies that you're actually overriding a superclass method</li>
        <li>It makes your code more readable by explicitly indicating overridden methods</li>
      </ul>
      <p>Without <c>@Override</c>, common mistakes like typos in method names, parameter type mismatches, or return type differences will create a new method instead of overriding the superclass method, leading to subtle bugs.</p>
    </insight>
    
    <p>For instance, consider this common mistake:</p>
    <program language="java">
      <code>// A bug without @Override
public class Monster extends Entity {
    // ...
    
    // Typo in method name - note the "i" in "takeDimage"
    public void takeDimage(int amount) {
        // This doesn't override Entity.takeDamage()
        // It creates a completely new method!
        health -= (amount / 2);
    }
}

// Usage elsewhere in code
Monster zombie = new Monster("Zombie", 100, true);
zombie.takeDamage(20); // Will call Entity.takeDamage, not the Monster version!</code>
    </program>
    
    <p>In this example, the typo creates a new method rather than overriding the existing one. When <c>takeDamage</c> is called on a <c>Monster</c>, it will use the original <c>Entity</c> implementation, not the intended specialized version. With <c>@Override</c>, the compiler would catch this error immediately with a message like: <c>"Method does not override method from its superclass"</c>.</p>
  </subsection>
  
  <!-- ==============================================
       2.7 Overriding Object Methods
       ============================================= -->
  <subsection xml:id="inheritance-overriding-object-methods">
    <title>Overriding Object Methods</title>
    <p>As we saw in the previous chapter, every Java class implicitly inherits from <c>Object</c>. This means you can override <c>Object</c>'s methods to customize behavior that makes sense for your specific classes. Three of the most commonly overridden methods are <c>toString()</c>, <c>equals()</c>, and <c>hashCode()</c>.</p>
    
    <p>Let's look at examples of overriding these methods and understand why doing so is important:</p>
    
    <subsubsection xml:id="overriding-toString">
      <title>Overriding toString()</title>
      <p>The <c>toString()</c> method provides a string representation of an object. By default, it returns a string containing the class name followed by an @ symbol and the object's hash code in hexadecimal format.</p>
      
      <program language="java">
        <code>public class Player extends Entity {
    private int experiencePoints;
    private int level;
    
    // Constructor and other methods...
    
    @Override
    public String toString() {
        return "Player{name='" + getName() + "', health=" + getHealth() + 
               ", level=" + level + ", xp=" + experiencePoints + "}";
    }
}</code>
      </program>
      
      <p>Overriding <c>toString()</c> has several benefits:</p>
      <ul>
        <li>Makes debugging easier by providing meaningful object information</li>
        <li>Improves logs and error messages</li>
        <li>Simplifies debugging arrays and collections</li>
      </ul>
      
      <p>With the override above, <c>System.out.println(player)</c> now produces readable output like: <c>Player{name='Hero', health=100, level=1, xp=0}</c></p>
    </subsubsection>
    
    <subsubsection xml:id="overriding-equals-hashcode">
      <title>Overriding equals() and hashCode()</title>
      <p>The <c>equals()</c> method determines whether two objects are equivalent. By default, it uses reference equality (==), checking if two variables refer to exactly the same object instance in memory.</p>
      
      <p>The <c>hashCode()</c> method returns a numeric value used by hash-based collections (like <c>HashMap</c> and <c>HashSet</c>).</p>
      
      <note>
        <title>The equals/hashCode Contract</title>
        <p>There's a critical rule in Java: if you override <c>equals()</c>, you <em>must</em> also override <c>hashCode()</c> to ensure consistent behavior. Two objects that are equal according to <c>equals()</c> must return the same <c>hashCode()</c> value.</p>
      </note>
      
      <program language="java">
        <code>public class Item {
    private String name;
    private int value;
    
    public Item(String name, int value) {
        this.name = name;
        this.value = value;
    }
    
    // Getters omitted for brevity
    
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        
        Item other = (Item) obj;
        return value == other.value &amp;&amp; 
               Objects.equals(name, other.name);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(name, value);
    }
}</code>
      </program>
      
      <p>With these overrides, two different <c>Item</c> objects with the same name and value will be considered equal:</p>
      
      <program language="java">
        <code>
Item sword1 = new Item("Sword", 50);
Item sword2 = new Item("Sword", 50);

// Without overriding equals, this would print "false"
// With our override, it prints "true"
System.out.println(sword1.equals(sword2));

// Now these items can be used properly in collections
Set&lt;Item&gt; inventory = new HashSet&lt;&gt;();
inventory.add(sword1);

// This will correctly return true because of our equals/hashCode
System.out.println(inventory.contains(sword2));
        </code>
      </program>
      
      <p>Here's a real-world example of what can go wrong when you override <c>equals()</c> but not <c>hashCode()</c>:</p>
      
      <program language="java">
        <code>
// INCORRECT implementation - equals without hashCode
public class IncorrectItem {
    private String name;
    private int value;
    
    // Constructor and getters omitted
    
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        
        IncorrectItem other = (IncorrectItem) obj;
        return value == other.value &amp;&amp; 
               Objects.equals(name, other.name);
    }
    
    // No hashCode override!
}

// Usage with collections
IncorrectItem sword1 = new IncorrectItem("Sword", 50);
IncorrectItem sword2 = new IncorrectItem("Sword", 50);

System.out.println(sword1.equals(sword2)); // Prints "true"

// But in a HashMap:
Map&lt;IncorrectItem, String&gt; itemDescriptions = new HashMap&lt;&gt;();
itemDescriptions.put(sword1, "A sharp blade made of steel");

// This will likely return null! Even though equals says they're the same object
System.out.println(itemDescriptions.get(sword2));
        </code>
      </program>
      
      <p>This unexpected behavior occurs because <c>HashMap</c> first uses <c>hashCode()</c> to find a "bucket" where an object should be stored. If <c>hashCode()</c> isn't properly overridden, <c>sword1</c> and <c>sword2</c> will likely go into different buckets, even though they are equal according to <c>equals()</c>.</p>
      
      <p>Overriding <c>equals()</c> and <c>hashCode()</c> is crucial when:</p>
      <ul>
        <li>Your objects are used as keys in maps or stored in sets</li>
        <li>You need to compare objects based on their content rather than identity</li>
        <li>You're implementing domain objects that should be comparable based on their field values</li>
      </ul>
    </subsubsection>
    
    <insight>
      <title>Practical Benefits</title>
      <p>Overriding Object methods demonstrates a key inheritance principle: you can leverage the general structure provided by the superclass while customizing behavior for your specific needs. This pattern applies throughout Java development, whether customizing built-in classes or extending your own superclasses.</p>
    </insight>
    
    <exercise xml:id="quick-check-object-methods" type="check-understanding">
      <title>Quick Check: Object Methods</title>
      <statement>
        <p>Consider the following questions about overriding Object methods:</p>
        <ol>
          <li>What happens if <c>equals()</c> isn't overridden in a class that needs content-based comparisons?</li>
          <li>How do <c>equals()</c> and <c>hashCode()</c> relate to each other in collections?</li>
          <li>If two objects have the same <c>hashCode()</c> value, does that mean they're equal according to <c>equals()</c>?</li>
        </ol>
      </statement>
      <response>
        <ol>
          <li>Without overriding <c>equals()</c>, objects will only be considered equal if they are the exact same instance (reference equality). Two objects with identical content but different memory references will be considered different.</li>
          <li>Hash-based collections like <c>HashMap</c> and <c>HashSet</c> use <c>hashCode()</c> to determine where to store objects internally. They then use <c>equals()</c> to check for duplicates. If <c>hashCode()</c> is inconsistent with <c>equals()</c>, collections may behave incorrectly.</li>
          <li>No. Objects with the same hash code are not necessarily equal. The <c>hashCode()</c> contract only requires that equal objects have the same hash code. Different objects can have the same hash code (a hash collision).</li>
        </ol>
      </response>
    </exercise>
  </subsection>

  <!-- ==============================================
       2.8 Exercises
       ============================================= -->
  <exercises>
    <exercise xml:id="mc-inheritance-basic-syntax" type="multiplechoice">
      <title>Basic Inheritance Syntax</title>
      <statement>
        <p>Which keyword in Java indicates that one class is inheriting from another?</p>
      </statement>
      <choices>
        <choice correct="yes">
          <statement><c>extends</c></statement>
          <feedback>Correct. The <c>extends</c> keyword establishes an inheritance relationship between classes.</feedback>
        </choice>
        <choice>
          <statement><c>implements</c></statement>
          <feedback>No, <c>implements</c> is used for interfaces, not class inheritance.</feedback>
        </choice>
        <choice>
          <statement><c>inherits</c></statement>
          <feedback>No, Java doesn't have an <c>inherits</c> keyword.</feedback>
        </choice>
        <choice>
          <statement><c>super</c></statement>
          <feedback>No, <c>super</c> is used inside a subclass to call its superclass constructor or methods.</feedback>
        </choice>
      </choices>
    </exercise>
    
    <exercise xml:id="exercise-critique-inheritance" type="reflect-and-critique">
      <title>Critique and Fix a Flawed Inheritance Design</title>
      <statement>
        <p>Consider the following code that attempts to model different types of vehicles:</p>
        <program language="java">
          <code>// A flawed inheritance design
public class Bicycle {
    private int numGears;
    private int speed;
    
    public void pedal() {
        speed += 1;
    }
    
    public void brake() {
        speed = Math.max(0, speed - 1);
    }
}

public class Car extends Bicycle {
    private int fuelLevel;
    
    // Override to make it work differently
    @Override
    public void pedal() {
        // Cars don't have pedals, so redefine this
        // to press the gas pedal instead
        speed += 5;
        fuelLevel -= 1;
    }
    
    // Add car-specific methods
    public void refuel() {
        fuelLevel = 100;
    }
}</code>
        </program>
        
        <p>Complete the following tasks:</p>
        <ol>
          <li>Identify why this inheritance relationship is inappropriate. Does it satisfy the "is-a" test?</li>
          <li>List two specific problems that arise from this faulty design.</li>
          <li>Create a better design using proper inheritance hierarchy that fixes these issues.</li>
          <li>Briefly explain how your redesign solves the original problems.</li>
        </ol>
        
        <p>Present your solution as a class diagram or code snippet showing the recommended class structure.</p>
      </statement>
      <solution>
        <p>Problems with this design:</p>
        <ol>
          <li><term>Inappropriate "is-a" relationship:</term> A Car is not a specialized type of Bicycle. They are both vehicles, but one doesn't inherit from the other.</li>
          <li><term>Violation of behavioral substitution:</term> The <c>pedal()</c> method in Car completely changes the meaning of the method from the parent class.</li>
          <li><term>Forced overriding of irrelevant methods:</term> Cars don't have pedals, so they shouldn't need to override a pedal method at all.</li>
        </ol>
        
        <p>A better design would use a common superclass with appropriate specialization:</p>
        <program language="java">
          <code>// Better design with proper inheritance
public abstract class Vehicle {
    protected int speed;
    
    public void brake() {
        speed = Math.max(0, speed - 1);
    }
    
    // Common methods for all vehicles
    public int getSpeed() {
        return speed;
    }
}

public class Bicycle extends Vehicle {
    private int numGears;
    
    public void pedal() {
        speed += 1;
    }
}

public class Car extends Vehicle {
    private int fuelLevel;
    
    public void accelerate() {
        speed += 5;
        fuelLevel -= 1;
    }
    
    public void refuel() {
        fuelLevel = 100;
    }
}</code>
        </program>
        
        <p>This improved design:</p>
        <ul>
          <li>Creates a proper hierarchy with Vehicle as the superclass</li>
          <li>Places common behavior (brake, getSpeed) in the superclass</li>
          <li>Allows each subclass to define only methods that make sense for it</li>
          <li>Avoids forcing inappropriate overrides</li>
        </ul>
      </solution>
    </exercise>
    
    <exercise xml:id="reflection-inheritance-why" type="reflection">
      <title>Reflecting on Inheritance Benefits and Challenges</title>
      <statement>
        <p>You're building a game with different character types (Player, Monster, NPC) that all need position, health, and movement tracking. Consider each of the following questions:</p>
        <ol>
          <li>How would you structure an inheritance hierarchy to minimize code duplication? (Identify classes and their relationships)</li>
          <li>What specific fields and methods would you place in the parent class versus the subclasses?</li>
          <li>As your game grows, you need to add specialized monster types: <c>FlyingMonster</c>, <c>AquaticMonster</c>, and <c>BossMonster</c>. What specific maintenance challenges do you anticipate with this deeper hierarchy?</li>
          <li>How might you mitigate these challenges while still benefiting from inheritance? (Consider alternatives or hybrid approaches)</li>
        </ol>
        <p>For each point, provide a brief explanation (2-3 sentences) and include code examples or diagrams where appropriate.</p>
      </statement>
      <solution>
        <p>Inheritance reduces code duplication by allowing shared fields and methods to exist in a single superclass instead of copying them into multiple classes. This makes updates easier and ensures consistency.</p>
        
        <ol>
          <li><p><term>Inheritance hierarchy:</term> A sensible structure would have a base <c>GameCharacter</c> class at the top, with <c>Player</c>, <c>Monster</c>, and <c>NPC</c> classes extending it.</p></li>
          
          <li><p><term>Parent vs. subclass responsibilities:</term></p>
            <ul>
              <li><term>Parent class (<c>GameCharacter</c>):</term> Would contain position coordinates (x, y), health, basic movement methods, collision detection, and damage handling.</li>
              <li><term>Subclasses:</term> <c>Player</c> would add inventory, experience points, and user input handling. <c>Monster</c> would add AI behavior and aggression levels. <c>NPC</c> would add dialog systems and quest-giving capabilities.</li>
            </ul>
          </li>
          
          <li><p><term>Deep hierarchy challenges:</term></p>
            <ul>
              <li><term>Ripple effects:</term> Changes to the <c>Monster</c> class affect all specialized monster types</li>
              <li><term>Cross-cutting concerns:</term> What if we need a <c>FlyingBossMonster</c> with properties from multiple specialized classes?</li>
              <li><term>Code comprehension:</term> Understanding a specialized class requires tracing behavior through multiple inheritance levels</li>
              <li><term>Method resolution complexity:</term> With multiple levels of overridden methods, it becomes harder to predict which implementation will be called</li>
            </ul>
          </li>
          
          <li><p><term>Mitigation strategies:</term></p>
            <ul>
              <li>Use composition alongside inheritance for behaviors that don't fit the hierarchy cleanly</li>
              <li>Keep the inheritance hierarchy shallow (max 2-3 levels deep)</li>
              <li>Consider interfaces for cross-cutting behaviors (like <c>Flying</c> or <c>Aquatic</c>)</li>
              <li>Design parent classes carefully with clear extension points</li>
              <li>Document intended override behavior for future maintainers</li>
            </ul>
          </li>
        </ol>
      </solution>
    </exercise>
  </exercises>
</section>